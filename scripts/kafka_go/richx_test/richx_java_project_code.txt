=== JAVA PROJECT STRUCTURE ===
.
├── HELP.md
├── java_collect.py
├── java_project_code.txt
├── pom.xml
└── src
    ├── main
    │   ├── java
    │   └── resources
    └── test
        └── java

7 directories, 4 files



// ====== FILE: ./src/test/java/com/astrosea/richer/RicherApplicationTests.java ======

   1 | package com.astrosea.richer;
   2 | 
   3 | import com.astrosea.richer.mapper.RewardBaseMapper;
   4 | import com.astrosea.richer.mapper.RichRewardLogMapper;
   5 | import com.astrosea.richer.mapper.TaxAllNftDoMapper;
   6 | import com.astrosea.richer.mapper.TimeTaskMapper;
   7 | import com.astrosea.richer.pojo.TimeTaskLogDo;
   8 | import com.astrosea.richer.service.RichService;
   9 | import com.astrosea.richer.vo.dto.HolderDto;
  10 | import lombok.extern.slf4j.Slf4j;
  11 | import org.junit.jupiter.api.Test;
  12 | import org.springframework.beans.factory.annotation.Autowired;
  13 | import org.springframework.boot.test.context.SpringBootTest;
  14 | 
  15 | import java.util.List;
  16 | 
  17 | @Slf4j
  18 | 
  19 | @SpringBootTest
  20 | class RicherApplicationTests {
  21 | 
  22 |     @Autowired
  23 |     RewardBaseMapper rewardBaseMapper;
  24 | 
  25 |     @Autowired
  26 |     RichService richService;
  27 | 
  28 |     @Autowired
  29 |     RichRewardLogMapper logMapper;
  30 | 
  31 |     @Autowired
  32 |     TaxAllNftDoMapper nftMapper;
  33 | 
  34 | 
  35 | 
  36 | 
  37 |     @Test
  38 |     void contextLoads() {
  39 | 
  40 |         List<HolderDto> nftCountByRarity = nftMapper.getNftCountByRarity();
  41 | 
  42 |         System.out.println(nftCountByRarity);
  43 | 
  44 |     }
  45 | 
  46 |     @Autowired
  47 |     TimeTaskMapper timeTaskMapper;
  48 | 
  49 | 
  50 |     @Test
  51 |     void logTest() {
  52 | 
  53 |         TimeTaskLogDo logDo = new TimeTaskLogDo();
  54 |         long orderId = System.currentTimeMillis();
  55 |         String resJsonString = "";
  56 |         logDo.setResLog(resJsonString);
  57 |         logDo.setOrderId(orderId);
  58 |         int insert = timeTaskMapper.insert(logDo);
  59 | 
  60 |     }
  61 | 
  62 | 
  63 | 
  64 | 
  65 | 
  66 | 
  67 | 
  68 | 
  69 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/RicherApplication.java ======

   1 | package com.astrosea.richer;
   2 | 
   3 | import org.springframework.boot.SpringApplication;
   4 | import org.springframework.boot.autoconfigure.SpringBootApplication;
   5 | 
   6 | @SpringBootApplication
   7 | public class RicherApplication {
   8 | 
   9 |     public static void main(String[] args) {
  10 |         SpringApplication.run(RicherApplication.class, args);
  11 |     }
  12 | 
  13 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/vo/MintQueryVo.java ======

   1 | package com.astrosea.richer.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.io.Serializable;
   6 | 
   7 | @Data
   8 | public class MintQueryVo implements Serializable {
   9 | 
  10 |     /**
  11 |      * 可以 mint 的数量
  12 |      */
  13 |     private Integer mintAmount;
  14 | 
  15 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/vo/GetCoinsVo.java ======

   1 | package com.astrosea.richer.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.math.BigDecimal;
   6 | 
   7 | @Data
   8 | public class GetCoinsVo {
   9 | 
  10 |     private BigDecimal coins;
  11 | 
  12 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/vo/UpdateRewVo.java ======

   1 | package com.astrosea.richer.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class UpdateRewVo {
   7 | 
   8 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/vo/QueryCoinsVo.java ======

   1 | package com.astrosea.richer.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class QueryCoinsVo {
   7 | 
   8 |     private String coins;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/vo/BaseRewVo.java ======

   1 | package com.astrosea.richer.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.math.BigDecimal;
   6 | 
   7 | @Data
   8 | public class BaseRewVo {
   9 | 
  10 |     private BigDecimal rewBase;
  11 | 
  12 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/vo/InviteCodeVo.java ======

   1 | package com.astrosea.richer.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.io.Serializable;
   6 | 
   7 | @Data
   8 | public class InviteCodeVo implements Serializable {
   9 | 
  10 |     private Long inviteCode;
  11 | 
  12 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/vo/GiveVo.java ======

   1 | package com.astrosea.richer.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.math.BigDecimal;
   6 | 
   7 | @Data
   8 | public class GiveVo {
   9 | 
  10 |     // 钱包地址
  11 |     private String address;
  12 | 
  13 |     // 能领取的收益
  14 |     private BigDecimal amount;
  15 | 
  16 |     // 订单 id
  17 |     private String orderId;
  18 | 
  19 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/vo/MintPayVo.java ======

   1 | package com.astrosea.richer.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.io.Serializable;
   6 | 
   7 | @Data
   8 | public class MintPayVo implements Serializable {
   9 | 
  10 |     /**
  11 |      * mint 支付金额
  12 |      */
  13 |     private Integer payAmount;
  14 | 
  15 |     /**
  16 |      * 可以 mint 的数量
  17 |      */
  18 |     private Integer curMintAmount;
  19 | 
  20 |     /**
  21 |      * 支付订单 id
  22 |      */
  23 |     private Long orderId;
  24 | 
  25 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/vo/UpdateGainsVo.java ======

   1 | package com.astrosea.richer.vo;
   2 | 
   3 | import com.astrosea.richer.vo.dto.HolderDto;
   4 | import lombok.Data;
   5 | 
   6 | import java.math.BigDecimal;
   7 | import java.time.LocalDate;
   8 | import java.util.List;
   9 | 
  10 | @Data
  11 | public class UpdateGainsVo {
  12 | 
  13 |     /**
  14 |      * 收益数据
  15 |      */
  16 |     private BigDecimal base;
  17 | 
  18 |     /**
  19 |      * 假收益基数
  20 |      */
  21 |     private BigDecimal fakeRewBase;
  22 | 
  23 |     /**
  24 |      * 真收益基数
  25 |      */
  26 |     private BigDecimal realRewBase;
  27 | 
  28 |     /**
  29 |      * 假收益基数
  30 |      */
  31 |     private BigDecimal fakeDecBase;
  32 | 
  33 |     /**
  34 |      * 真实收益基数
  35 |      */
  36 |     private BigDecimal realDecBase;
  37 | 
  38 |     /***
  39 |      * 矿厂产出日期
  40 |      */
  41 |     private LocalDate today;
  42 | 
  43 |     /**
  44 |      * 持有者实体
  45 |      */
  46 |     private List<HolderDto> holderList;
  47 | 
  48 |     /**
  49 |      * 当前持有者数量
  50 |      */
  51 |     private Integer curHolderNum;
  52 | 
  53 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/vo/TxCheckVo.java ======

   1 | package com.astrosea.richer.vo;
   2 | 
   3 | public class TxCheckVo {
   4 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/vo/ImgVo.java ======

   1 | package com.astrosea.richer.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | 
   6 | @Data
   7 | public class ImgVo {
   8 | 
   9 |     /**
  10 |      * 图片url
  11 |      */
  12 |     private String imgUrls;
  13 | 
  14 | 
  15 |     /**
  16 |      * 编号名称
  17 |      */
  18 |     private String names;
  19 | 
  20 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/vo/dto/TodayRewDto.java ======

   1 | package com.astrosea.richer.vo.dto;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.math.BigDecimal;
   6 | 
   7 | @Data
   8 | 
   9 | public class TodayRewDto {
  10 | 
  11 |     private BigDecimal personalBase;
  12 | 
  13 |     private BigDecimal personalRewBase;
  14 | 
  15 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/vo/dto/UnitUsdFloorPriceAvgDto.java ======

   1 | package com.astrosea.richer.vo.dto;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class UnitUsdFloorPriceAvgDto {
   7 | 
   8 |     private String unitUsdFloorPriceAvg;
   9 | 
  10 |     private String tokenId;
  11 | 
  12 |     private String inscriptionNum;
  13 | 
  14 |     private Boolean warn;
  15 | 
  16 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/vo/dto/PriceDto.java ======

   1 | package com.astrosea.richer.vo.dto;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class PriceDto {
   7 | 
   8 |     private Boolean lowPriceWarn;
   9 | 
  10 |     private String changeRate;
  11 | 
  12 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/vo/dto/ClaimStatusDto.java ======

   1 | package com.astrosea.richer.vo.dto;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class ClaimStatusDto {
   7 | 
   8 |     private Integer statusCode;
   9 | 
  10 |     private String msg;
  11 | 
  12 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/vo/dto/HolderDto.java ======

   1 | package com.astrosea.richer.vo.dto;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class HolderDto {
   7 | 
   8 |     /**
   9 |      * 钱包地址
  10 |      */
  11 |     private String address;
  12 | 
  13 |     /**
  14 |      * 稀有度1 数量
  15 |      */
  16 |     private Integer lv1amt;
  17 | 
  18 |     /**
  19 |      * 稀有度 2 数量
  20 |      */
  21 |     private Integer lv2amt;
  22 | 
  23 |     /**
  24 |      * 稀有度 3
  25 |      */
  26 |     private Integer lv3amt;
  27 | 
  28 |     /**
  29 |      * 稀有度 4 数量
  30 |      */
  31 |     private Integer lv4amt;
  32 | 
  33 |     /**
  34 |      * 稀有度 5 数量
  35 |      */
  36 |     private Integer lv5amt;
  37 | 
  38 |     /**
  39 |      * 稀有度 6 数量
  40 |      */
  41 |     private Integer lv6amt;
  42 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/vo/dto/NftResenderDto.java ======

   1 | package com.astrosea.richer.vo.dto;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class NftResenderDto {
   7 | 
   8 |     private String orderId;
   9 | 
  10 |     private String from;
  11 | 
  12 |     private String nftUtxo;
  13 | 
  14 |     private String toAddress;
  15 | 
  16 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/schedule/SpiderTimeTask.java ======

   1 | package com.astrosea.richer.schedule;
   2 | 
   3 | import cn.hutool.core.util.StrUtil;
   4 | import com.astrosea.richer.constant.RedisKeyConstant;
   5 | import com.astrosea.richer.utils.BeijingTimeUtil;
   6 | import com.astrosea.richer.utils.MailClient;
   7 | import com.astrosea.richer.utils.SpiderClient;
   8 | import lombok.extern.slf4j.Slf4j;
   9 | import org.springframework.beans.factory.annotation.Autowired;
  10 | import org.springframework.data.redis.core.RedisTemplate;
  11 | import org.springframework.scheduling.annotation.EnableScheduling;
  12 | import org.springframework.scheduling.annotation.Scheduled;
  13 | import org.springframework.stereotype.Component;
  14 | 
  15 | import java.io.IOException;
  16 | import java.util.ArrayList;
  17 | import java.util.List;
  18 | import java.util.concurrent.TimeUnit;
  19 | 
  20 | @Component
  21 | @Slf4j
  22 | @EnableScheduling
  23 | public class SpiderTimeTask {
  24 | 
  25 |     @Autowired
  26 |     MailClient mailClient;
  27 | 
  28 |     @Autowired
  29 |     RedisTemplate redisTemplate;
  30 | 
  31 |     @Autowired
  32 |     SpiderClient spiderClient;
  33 | 
  34 | 
  35 |     /**
  36 |      * 预警邮箱（有去重
  37 |      */
  38 | //    @Scheduled(fixedRate = 3600000)
  39 | //    @Scheduled(fixedRate = 10000)
  40 |     public void priceReports()  {
  41 | 
  42 |         /**
  43 |          * 拉取最新数据
  44 |          */
  45 | 
  46 |         /**
  47 |          * 1.判断当前地板价有无提醒过提醒过则返回 false , 没有则返回 true 、均价 、 编号
  48 |          */
  49 |         /**
  50 |          * 2.比较地板价和均价的跌幅，超过 50% 则发邮件警告，没有则不发
  51 |          */
  52 |         String mainContent = spiderClient.constructEmail();
  53 | 
  54 |         try {
  55 | 
  56 |                     String beijingTime = BeijingTimeUtil.getBeijingTime();
  57 |                     log.warn("beijingTime:" + beijingTime);
  58 |                     String subject = "OKX Ordinals 市场 BRC-20 ：最新地板价跌幅提醒";
  59 | 
  60 |                     String content = mailClient.getHtmlContent("astrosea.io@astrosea", mainContent,
  61 |                             "Ordinals 市场 BRC-20 价格浮动提醒 / 北京时间 ："+ beijingTime + "\n"
  62 |                                     + "(此浮动计算根据当前挂单最低价与价格从低到高排列的后 6 笔均价得出，故皆显示为跌幅)");
  63 |             /**
  64 |              * 邮件策略
  65 |              */
  66 |         String aZe = "cryptoyisa@outlook.com";
  67 |         String boss =  "wbin7093@gmail.com";
  68 |             String me =  "1179530478@qq.com";
  69 | 
  70 | 
  71 |             List<String> emails = new ArrayList<>();
  72 | //        emails.add(aZe);
  73 | //        emails.add(boss);
  74 |             emails.add(me);
  75 | 
  76 |                     mailClient.sendMail(emails, subject, content);
  77 |                 } catch (IOException ex) {
  78 |                     throw new RuntimeException(ex);
  79 |                 }
  80 | 
  81 |     }
  82 | 
  83 |     /**
  84 |      * 预警邮箱，无去重
  85 |      */
  86 | //    @Scheduled(fixedRate = 3600000)
  87 | //    @Scheduled(fixedRate = 10000) // 10s
  88 |     @Scheduled(fixedRate = 300000) // 5 min 扫一次，第一版
  89 |     public void easyReports()  {
  90 | 
  91 |         /**
  92 |          * 拉取最新数据
  93 |          */
  94 | 
  95 |         /**
  96 |          * 1.比较地板价和均价的跌幅，超过 5% 则发邮件警告，没有则不发
  97 |          */
  98 |         String mainContent = spiderClient.constructEmailEasy();
  99 | 
 100 |         if (StrUtil.isNotEmpty(mainContent)) {
 101 | 
 102 |             try {
 103 | 
 104 |                 String beijingTime = BeijingTimeUtil.getBeijingTime();
 105 |                 log.warn("beijingTime:" + beijingTime);
 106 |                 String subject = "OKX Ordinals 市场 BRC-20 ：最新地板价跌幅提醒";
 107 | 
 108 |                 String content = mailClient.getHtmlContent("astrosea.io@astrosea", mainContent,
 109 |                         "Ordinals 市场 BRC-20 价格浮动提醒 / 北京时间 ："+ beijingTime + "\n"
 110 |                                 + "(此浮动计算根据当前挂单最低价与价格从低到高排列的后2～6 笔的均价得出，故皆显示为跌幅)");
 111 |                 /**
 112 |                  * 邮件策略
 113 |                  */
 114 |                 String aZe = "cryptoyisa@outlook.com";
 115 |                 String boss =  "wbin7093@gmail.com";
 116 |                 String me =  "1179530478@qq.com";
 117 | 
 118 | 
 119 |                 List<String> emails = new ArrayList<>();
 120 |                 emails.add(aZe);
 121 |                 emails.add(boss);
 122 |                 emails.add(me);
 123 | 
 124 |                 mailClient.sendMail(emails, subject + mainContent, content);
 125 |             } catch (IOException ex) {
 126 |                 throw new RuntimeException(ex);
 127 |             }
 128 | 
 129 |         }
 130 | 
 131 | 
 132 | 
 133 |     }
 134 | 
 135 | 
 136 | 
 137 | 
 138 | 
 139 |     /**
 140 |      * 如果邮箱不存在则说明从来没发过邮件，setKey 并返回 true，进行发邮件操作
 141 |      * 已经过期则说明半小时没发，setKey 并返回 true ，进行发邮件操作
 142 |      * 如果存在或未过期则，说明刚刚发过，返回 false
 143 |      * @param email
 144 |      * @return
 145 |      */
 146 |     public Boolean warnEmail(String email) {
 147 | 
 148 |         // 验证 email 是否过期
 149 |         String emailKey = RedisKeyConstant.EMAIL + email;
 150 |         String emailValue = (String) redisTemplate.opsForValue().get(emailKey);
 151 | 
 152 |         if (StrUtil.isBlank(emailValue)){// 为空，过期或者从未发过邮件
 153 |             redisTemplate.opsForValue().set(RedisKeyConstant.EMAIL + email, email, 30, TimeUnit.SECONDS);
 154 |             return true;
 155 |         }
 156 | 
 157 |         return false;
 158 |     }
 159 | 
 160 | 
 161 | 
 162 | 
 163 | 
 164 | 
 165 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/schedule/GainsUpdaterTimeTask.java ======

   1 | package com.astrosea.richer.schedule;
   2 | 
   3 | import com.astrosea.richer.mapper.TimeTaskMapper;
   4 | import com.astrosea.richer.service.TimeTaskService;
   5 | import com.astrosea.richer.utils.MailClient;
   6 | import lombok.extern.slf4j.Slf4j;
   7 | import org.slf4j.Logger;
   8 | import org.slf4j.LoggerFactory;
   9 | import org.springframework.beans.factory.annotation.Autowired;
  10 | import org.springframework.data.redis.core.RedisTemplate;
  11 | import org.springframework.scheduling.TaskScheduler;
  12 | import org.springframework.scheduling.annotation.EnableScheduling;
  13 | import org.springframework.scheduling.annotation.Scheduled;
  14 | import org.springframework.stereotype.Component;
  15 | 
  16 | @Component
  17 | @Slf4j
  18 | @EnableScheduling
  19 | public class GainsUpdaterTimeTask {
  20 | 
  21 |     @Autowired
  22 |     TimeTaskService timeTaskService;
  23 | 
  24 |     @Autowired
  25 |     TimeTaskMapper  timeTaskMapper;
  26 | 
  27 |     @Autowired
  28 |     MailClient          mailClient;
  29 | 
  30 |     @Autowired
  31 |     RedisTemplate    redisTemplate;
  32 | 
  33 |     private static final Logger logger = LoggerFactory.getLogger(TaskScheduler.class);
  34 | 
  35 | 
  36 | 
  37 | 
  38 | 
  39 | 
  40 | //    /**
  41 | //     * 零点的收益定时任务
  42 | //     * @throws SQLException
  43 | //     */
  44 | //    @Scheduled(cron = "0 0 0 * * *") // 此设置服务器在服务器上对应的是北京时间早上 8 点
  45 | //    public void timeTaskUpdateGains() throws SQLException {
  46 | //        UpdateGainsVo vo = timeTaskService.timeTaskUpdateGains().getData();
  47 | //
  48 | //        logger.info("timeTaskUpdateGains:{}", vo);
  49 | //        TimeTaskLogDo logDo = new TimeTaskLogDo();
  50 | //        long orderId = System.currentTimeMillis();
  51 | //        String resJsonString = JSONUtil.toJsonStr(vo);
  52 | //        logDo.setResLog(resJsonString);
  53 | //        logDo.setOrderId(orderId);
  54 | //        int insert = timeTaskMapper.insert(logDo);
  55 | //
  56 | //    }
  57 | 
  58 | 
  59 | 
  60 |     @Scheduled(fixedRate = 10000)//
  61 |     public void timeTaskRat() {
  62 | //        OkxSpider okxSpider = new OkxSpider();
  63 | //
  64 | //        String usdFloorPrice = getUsdFloorPrice("rats");
  65 | //
  66 | //        /**
  67 | //         * 1.判断当前地板价有无提醒过提醒过则返回 false , 没有则返回 true 、均价 、 编号
  68 | //         */
  69 | //        UnitUsdFloorPriceAvgDto ratsPriceAvgDto = okxSpider.getUnitUsdFloorPriceAvg("rats");// 获取均价和判断当前地板挂单有无提醒过
  70 | //
  71 | //        /**
  72 | //         * 2.比较地板价和均价的跌幅，超过 50% 则发邮件警告，没有则不发
  73 | //         */
  74 | //        // rats 邮箱提醒实体
  75 | //        PriceDto ratsFloorPriceDto = compareFloorPrice(getUsdFloorPrice("rats"), usdFloorPrice, "rats", ratsPriceAvgDto.getWarn());
  76 | //
  77 | //        System.out.println(ratsFloorPriceDto);
  78 | 
  79 | 
  80 |     }
  81 | 
  82 | 
  83 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/response/Response.java ======

   1 | package com.astrosea.richer.response;
   2 | 
   3 | import com.astrosea.richer.constant.HttpCode;
   4 | import lombok.Getter;
   5 | import lombok.NoArgsConstructor;
   6 | import lombok.Setter;
   7 | import lombok.ToString;
   8 | import org.slf4j.MDC;
   9 | 
  10 | import java.io.Serializable;
  11 | 
  12 | 
  13 | @Getter
  14 | @Setter
  15 | @NoArgsConstructor
  16 | @ToString
  17 | public class Response<T> implements Serializable {
  18 | 
  19 | 	private static final long serialVersionUID = 5771204995227939321L;
  20 | 
  21 | 	private String requestId;
  22 | 
  23 | 	private Integer code;
  24 | 
  25 | 	private String message;
  26 | 
  27 | 	private T data;
  28 | 
  29 | 	public Response(String requestId, Integer code, String message, T data) {
  30 | 		this.requestId = requestId;
  31 | 		this.code = code;
  32 | 		this.message = message;
  33 | 		this.data = data;
  34 | 	}
  35 | 
  36 | 	public static <T> Response<T> commonRes(Integer code, String message, T data) {
  37 | 		Response<T> result = new Response<>();
  38 | 		result.requestId = MDC.get("REQUEST_ID");
  39 | 		result.code = code;
  40 | 		result.data = data;
  41 | 		result.message = message;
  42 | 		return result;
  43 | 	}
  44 | 
  45 | 	public static <T> Response<T> success(T data) {
  46 | 		Response<T> result = new Response<>();
  47 | 		result.requestId = MDC.get("REQUEST_ID");
  48 | 		result.code = HttpCode.SUCCESS;
  49 | 		result.data = data;
  50 | 		result.message = "success";
  51 | 		return result;
  52 | 	}
  53 | 
  54 | 	public static <T> Response<T> successMsg(String message) {
  55 | 		Response<T> result = new Response<>();
  56 | 		result.requestId = MDC.get("REQUEST_ID");
  57 | 		result.code = HttpCode.SUCCESS;
  58 | 		result.message = message;
  59 | 		return result;
  60 | 	}
  61 | 
  62 | 	public static <T> Response<T> successMsg(T data, String message) {
  63 | 		Response<T> result = new Response<>();
  64 | 		result.requestId = MDC.get("REQUEST_ID");
  65 | 		result.code = HttpCode.SUCCESS;
  66 | 		result.data = data;
  67 | 		result.message = message;
  68 | 		return result;
  69 | 	}
  70 | 
  71 | 	public static <T> Response<T> success() {
  72 | 		Response<T> result = new Response<>();
  73 | 		result.requestId = MDC.get("REQUEST_ID");
  74 | 		result.code = HttpCode.SUCCESS;
  75 | 		result.data = null;
  76 | 		result.message = "success";
  77 | 		return result;
  78 | 	}
  79 | 
  80 | 	public static <T> Response<T> error(Integer code, String message) {
  81 | 		Response<T> result = new Response<>();
  82 | 		result.requestId = MDC.get("REQUEST_ID");
  83 | 		result.code = code;
  84 | 		result.message = message;
  85 | 		return result;
  86 | 	}
  87 | 
  88 | 	public boolean isSuccess() {
  89 | 		return this.code == HttpCode.SUCCESS;
  90 | 	}
  91 | 
  92 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/config/RedisConfig.java ======

   1 | package com.astrosea.richer.config;
   2 | 
   3 | 
   4 | import com.fasterxml.jackson.annotation.JsonAutoDetect;
   5 | import com.fasterxml.jackson.annotation.JsonTypeInfo;
   6 | import com.fasterxml.jackson.annotation.PropertyAccessor;
   7 | import com.fasterxml.jackson.databind.ObjectMapper;
   8 | import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
   9 | import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
  10 | import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;
  11 | import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
  12 | import com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;
  13 | import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;
  14 | import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
  15 | import com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;
  16 | import org.springframework.boot.SpringBootConfiguration;
  17 | import org.springframework.context.annotation.Bean;
  18 | import org.springframework.data.redis.connection.RedisConnectionFactory;
  19 | import org.springframework.data.redis.core.RedisTemplate;
  20 | import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
  21 | import org.springframework.data.redis.serializer.RedisSerializer;
  22 | 
  23 | import java.time.LocalDate;
  24 | import java.time.LocalDateTime;
  25 | import java.time.LocalTime;
  26 | import java.time.format.DateTimeFormatter;
  27 | 
  28 | @SpringBootConfiguration
  29 | public class RedisConfig {
  30 | 
  31 |     @Bean
  32 |     public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory, Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer)
  33 |     {
  34 |         RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();
  35 |         redisTemplate.setConnectionFactory(connectionFactory);
  36 |         redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);
  37 |         redisTemplate.setKeySerializer(RedisSerializer.string());
  38 |         redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);
  39 |         redisTemplate.setHashKeySerializer(RedisSerializer.string());
  40 |         redisTemplate.afterPropertiesSet();
  41 |         return redisTemplate;
  42 |     }
  43 | 
  44 |     @Bean
  45 |     public Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer() {
  46 |         Jackson2JsonRedisSerializer<Object> serializer = new Jackson2JsonRedisSerializer<>(Object.class);
  47 |         ObjectMapper mapper = new ObjectMapper();
  48 |         mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
  49 |         mapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
  50 | 
  51 |         JavaTimeModule javaTimeModule = new JavaTimeModule();
  52 |         // redis序列化 localDateTime
  53 |         DateTimeFormatter localDateTime = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
  54 |         javaTimeModule.addSerializer(LocalDateTime.class, new LocalDateTimeSerializer(localDateTime));
  55 |         javaTimeModule.addDeserializer(LocalDateTime.class, new LocalDateTimeDeserializer(localDateTime));
  56 | 
  57 |         // redis序列化 localDate
  58 |         DateTimeFormatter localDate = DateTimeFormatter.ofPattern("yyyy-MM-dd");
  59 |         javaTimeModule.addSerializer(LocalDate.class, new LocalDateSerializer(localDate));
  60 |         javaTimeModule.addDeserializer(LocalDate.class, new LocalDateDeserializer(localDate));
  61 | 
  62 |         // redis序列化 localTime
  63 |         DateTimeFormatter localTime = DateTimeFormatter.ofPattern("HH:mm:ss");
  64 |         javaTimeModule.addSerializer(LocalTime.class, new LocalTimeSerializer(localTime));
  65 |         javaTimeModule.addDeserializer(LocalTime.class, new LocalTimeDeserializer(localTime));
  66 | 
  67 |         mapper.registerModule(javaTimeModule);
  68 |         serializer.setObjectMapper(mapper);
  69 |         return serializer;
  70 |     }
  71 | 
  72 | 
  73 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/config/MybatisConfig.java ======

   1 | package com.astrosea.richer.annotation;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.DbType;
   4 | import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
   5 | import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
   6 | import org.springframework.boot.SpringBootConfiguration;
   7 | import org.springframework.context.annotation.Bean;
   8 | 
   9 | @SpringBootConfiguration
  10 | public class MybatisConfig {
  11 | 
  12 |     @Bean
  13 |     public MybatisPlusInterceptor mybatisPlusInterceptor() {
  14 |         MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
  15 |         interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
  16 |         return interceptor;
  17 |     }
  18 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/config/ThreadPoolConfig.java ======

   1 | package com.astrosea.richer.annotation;
   2 | 
   3 | import com.google.common.util.concurrent.ThreadFactoryBuilder;
   4 | import org.springframework.boot.SpringBootConfiguration;
   5 | import org.springframework.context.annotation.Bean;
   6 | import org.springframework.context.annotation.Configuration;
   7 | 
   8 | import java.util.concurrent.*;
   9 | import java.util.concurrent.atomic.AtomicInteger;
  10 | 
  11 | @SpringBootConfiguration
  12 | public class ThreadPoolConfig {
  13 | 
  14 |     @Bean(value = "jobCallbackAfterHandleThreadPool")
  15 |     public ExecutorService jobCallbackAfterHandleThreadPool() {
  16 | 
  17 |         ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNameFormat("job-callback-after-handle-pool-%d").build();
  18 | 
  19 |         ThreadPoolExecutor pool = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,
  20 |                 new LinkedBlockingQueue<>(20480), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());
  21 | 
  22 |         return pool;
  23 |     }
  24 | 
  25 |     @Bean(value = "bizThreadPool")
  26 |     public ExecutorService bizThreadPool() {
  27 | 
  28 |         ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNameFormat("biz-thread-pool-%d").build();
  29 | 
  30 |         ThreadPoolExecutor pool = new ThreadPoolExecutor(2, 2, 0L, TimeUnit.MILLISECONDS,
  31 |                 new LinkedBlockingQueue<>(20480), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());
  32 | 
  33 |         return pool;
  34 |     }
  35 | 
  36 |     @Bean("queryProdPool")
  37 |     public ExecutorService queryProdPool(){
  38 |         return new ThreadPoolExecutor(10, 20, 0, TimeUnit.SECONDS, new LinkedBlockingDeque<>(1000), new ThreadFactory() {
  39 |             final AtomicInteger atomicInteger = new AtomicInteger(1);
  40 |             @Override
  41 |             public Thread newThread(Runnable r) {
  42 |                 String name = "prod-task-"+atomicInteger.getAndIncrement();
  43 |                 return new Thread(null,r,name,0);
  44 |             }
  45 |         });
  46 |     }
  47 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/config/CorsConfig.java ======

   1 | package com.astrosea.richer.config;
   2 | 
   3 | import org.springframework.boot.SpringBootConfiguration;
   4 | import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
   5 | 
   6 | @SpringBootConfiguration
   7 | public class CorsConfig implements WebMvcConfigurer {
   8 | 
   9 | //    @Override
  10 | //    public void addCorsMappings(CorsRegistry registry) {
  11 | //        registry.addMapping("/**")
  12 | //                .allowedOriginPatterns("*") // 或者指定具体的来源列表，例如：allowedOriginPatterns("http://example.com", "https://example.com")
  13 | //                .allowedMethods("*")
  14 | //                .allowedHeaders("*")
  15 | //                .allowCredentials(true);
  16 | //    }
  17 | 
  18 | //    @Bean
  19 | //    public WebMvcConfigurer corsConfigurer() {
  20 | //        return new WebMvcConfigurer() {
  21 | //            @Override
  22 | //            public void addCorsMappings(CorsRegistry registry) {
  23 | //                registry.addMapping("/**")
  24 | //                        .allowedOrigins("*")
  25 | //                        .allowedMethods("*")
  26 | //                        .allowedHeaders("*");
  27 | //            }
  28 | //        };
  29 | //    }
  30 | 
  31 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/mapper/RichRewardLogMapper.java ======

   1 | package com.astrosea.richer.mapper;
   2 | 
   3 | import com.astrosea.richer.pojo.RichRewardLogDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface RichRewardLogMapper extends BaseMapper<RichRewardLogDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/mapper/OrderMapper.java ======

   1 | package com.astrosea.richer.mapper;
   2 | 
   3 | import com.astrosea.richer.pojo.OrderDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | import org.apache.ibatis.annotations.Select;
   7 | 
   8 | @Mapper
   9 | public interface OrderMapper extends BaseMapper<OrderDo> {
  10 | 
  11 |     @Select(" SELECT id, order_id, address, order_time, status, reward_amt, insert_time, update_time, is_deleted\n" +
  12 |             "        FROM rich_order\n" +
  13 |             "        WHERE order_id = #{orderId}")
  14 |     OrderDo selectOneOrder(Long order);
  15 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/mapper/Tax1of1NftDoMapper.java ======

   1 | package com.astrosea.richer.mapper;
   2 | 
   3 | import com.astrosea.richer.pojo.Tax1of1NftDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface Tax1of1NftDoMapper extends BaseMapper<Tax1of1NftDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/mapper/RewardBaseMapper.java ======

   1 | package com.astrosea.richer.mapper;
   2 | 
   3 | import com.astrosea.richer.pojo.RichBaseDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface RewardBaseMapper extends BaseMapper<RichBaseDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/mapper/TaxAllNftDoMapper.java ======

   1 | package com.astrosea.richer.mapper;
   2 | 
   3 | import com.astrosea.richer.pojo.TaxAllNftDo;
   4 | import com.astrosea.richer.vo.dto.HolderDto;
   5 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   6 | import org.apache.ibatis.annotations.Mapper;
   7 | import org.apache.ibatis.annotations.Result;
   8 | import org.apache.ibatis.annotations.Results;
   9 | import org.apache.ibatis.annotations.Select;
  10 | 
  11 | import java.util.List;
  12 | 
  13 | @Mapper
  14 | public interface TaxAllNftDoMapper extends BaseMapper<TaxAllNftDo> {
  15 |     /*
  16 |     -- 持有者SQL
  17 | SELECT address,
  18 | SUM(CASE WHEN rarity = 'lv1' THEN 1 ELSE 0 END) AS lv1_count,
  19 | SUM(CASE WHEN rarity = 'lv2' THEN 1 ELSE 0 END) AS lv2_count,
  20 | SUM(CASE WHEN rarity = 'lv3' THEN 1 ELSE 0 END) AS lv3_count,
  21 | SUM(CASE WHEN rarity = 'lv4' THEN 1 ELSE 0 END) AS lv4_count,
  22 | SUM(CASE WHEN rarity = 'lv5' THEN 1 ELSE 0 END) AS lv5_count,
  23 | SUM(CASE WHEN rarity = 'lv6' THEN 1 ELSE 0 END) AS lv6_count
  24 | FROM (
  25 | SELECT address, rarity
  26 | FROM tax_all_nft
  27 | WHERE is_deleted = b'0' AND other_json = '1' AND sell_status = 1 AND tax_status = 1
  28 | UNION ALL
  29 | SELECT address, rarity
  30 | FROM tax_1of1_nft
  31 | WHERE is_deleted = b'0' AND other_json = '1' AND sell_status = 1 AND tax_status = 1
  32 | ) AS combined_table
  33 | GROUP BY address
  34 |      */
  35 |     @Select("SELECT address, " +
  36 |             "SUM(CASE WHEN rarity = 'lv1' THEN 1 ELSE 0 END) AS lv1_count, " +
  37 |             "SUM(CASE WHEN rarity = 'lv2' THEN 1 ELSE 0 END) AS lv2_count, " +
  38 |             "SUM(CASE WHEN rarity = 'lv3' THEN 1 ELSE 0 END) AS lv3_count, " +
  39 |             "SUM(CASE WHEN rarity = 'lv4' THEN 1 ELSE 0 END) AS lv4_count, " +
  40 |             "SUM(CASE WHEN rarity = 'lv5' THEN 1 ELSE 0 END) AS lv5_count, " +
  41 |             "SUM(CASE WHEN rarity = 'lv6' THEN 1 ELSE 0 END) AS lv6_count " +
  42 |             "FROM ( " +
  43 |             "SELECT address, rarity " +
  44 |             "FROM tax_all_nft " +
  45 |             "WHERE is_deleted = b'0' AND other_json = '1' AND sell_status = 1 AND tax_status = 1 " +
  46 |             "UNION ALL " +
  47 |             "SELECT address, rarity " +
  48 |             "FROM tax_1of1_nft " +
  49 |             "WHERE is_deleted = b'0' AND other_json = '1' AND sell_status = 1 AND tax_status = 1 " +
  50 |             ") AS combined_table " +
  51 |             "GROUP BY address")
  52 |     @Results({
  53 |             @Result(property = "address", column = "address"),
  54 |             @Result(property = "lv1amt", column = "lv1_count"),
  55 |             @Result(property = "lv2amt", column = "lv2_count"),
  56 |             @Result(property = "lv3amt", column = "lv3_count"),
  57 |             @Result(property = "lv4amt", column = "lv4_count"),
  58 |             @Result(property = "lv5amt", column = "lv5_count"),
  59 |             @Result(property = "lv6amt", column = "lv6_count")
  60 |     })
  61 |     List<HolderDto> getNftCountByRarity();
  62 | 
  63 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/mapper/AstroResenderMapper.java ======

   1 | package com.astrosea.richer.mapper;
   2 | 
   3 | import com.astrosea.richer.pojo.ResenderOrderDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface AstroResenderMapper extends BaseMapper<ResenderOrderDo> {
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/mapper/OperatorLogMapper.java ======

   1 | package com.astrosea.richer.mapper;
   2 | 
   3 | import com.astrosea.richer.pojo.OperatorLogDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface OperatorLogMapper extends BaseMapper<OperatorLogDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/mapper/RichHolderMapper.java ======

   1 | package com.astrosea.richer.mapper;
   2 | 
   3 | import com.astrosea.richer.pojo.RichHolderDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface RichHolderMapper extends BaseMapper<RichHolderDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/mapper/TimeTaskMapper.java ======

   1 | package com.astrosea.richer.mapper;
   2 | 
   3 | import com.astrosea.richer.pojo.TimeTaskLogDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface TimeTaskMapper extends BaseMapper<TimeTaskLogDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/annotation/RedissonLock.java ======

   1 | package com.astrosea.richer.annotation;//package com.astrosea.richer.annotation;
   2 | //
   3 | //import java.lang.annotation.ElementType;
   4 | //import java.lang.annotation.Retention;
   5 | //import java.lang.annotation.RetentionPolicy;
   6 | //import java.lang.annotation.Target;
   7 | //
   8 | ///**
   9 | // * 基于 Redisson 分布式锁注解组件
  10 | // */
  11 | //@Target(ElementType.METHOD)
  12 | //@Retention(RetentionPolicy.RUNTIME)
  13 | //public @interface RedissonLock {
  14 | //
  15 | //	/**
  16 | //	 * 锁对应的 key
  17 | //	 */
  18 | //	String key();
  19 | //
  20 | //	/**
  21 | //	 * 阻塞等待时间为 waitTime 默认为 10s
  22 | //	 */
  23 | //	long waitTime() default 10; // 等待时间，默认为 10 秒
  24 | //
  25 | //	/**
  26 | //	 * 过期释放时间为 leaseTime 默认为 30s
  27 | //	 */
  28 | //	long leaseTime() default 30; // 存活时间，默认为 30 秒
  29 | //
  30 | //}


// ====== FILE: ./src/main/java/com/astrosea/richer/utils/SHA256Util.java ======

   1 | package com.astrosea.richer.utils;
   2 | 
   3 | import java.nio.charset.StandardCharsets;
   4 | import java.security.MessageDigest;
   5 | import java.security.NoSuchAlgorithmException;
   6 | 
   7 | public class SHA256Util {
   8 |     public static String encrypt(String input) {
   9 | //        input = input + salt;
  10 | 
  11 |         try {
  12 |             MessageDigest digest = MessageDigest.getInstance("SHA-256");
  13 |             byte[] encodedHash = digest.digest(input.getBytes(StandardCharsets.UTF_8));
  14 | 
  15 |             StringBuilder hexString = new StringBuilder();
  16 |             for (byte b : encodedHash) {
  17 |                 String hex = Integer.toHexString(0xff & b);
  18 |                 if (hex.length() == 1)
  19 |                     hexString.append('0');
  20 |                 hexString.append(hex);
  21 |             }
  22 | 
  23 |             return hexString.toString();
  24 |         } catch (NoSuchAlgorithmException e) {
  25 |             e.printStackTrace();
  26 |         }
  27 |         return null;
  28 |     }
  29 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/utils/InviteCodeUtil.java ======

   1 | package com.astrosea.richer.utils;
   2 | import java.nio.charset.StandardCharsets;
   3 | import java.security.MessageDigest;
   4 | import java.security.NoSuchAlgorithmException;
   5 | 
   6 | 
   7 | public class InviteCodeUtil {
   8 |     private static final int CODE_LENGTH = 8;
   9 | 
  10 |     public static Long generateInviteCode(String userUrl) {
  11 |         try {
  12 |             MessageDigest md = MessageDigest.getInstance("SHA-256");
  13 |             byte[] hashBytes = md.digest(userUrl.getBytes(StandardCharsets.UTF_8));
  14 | 
  15 |             long hashCode = byteArrayToLong(hashBytes);
  16 |             String inviteCodeStr = String.valueOf(Math.abs(hashCode)).substring(0, CODE_LENGTH);
  17 |             Long inviteCode = Long.parseLong(inviteCodeStr);
  18 | 
  19 |             return inviteCode;
  20 |         } catch (NoSuchAlgorithmException e) {
  21 |             // 处理算法不支持的异常
  22 |             e.printStackTrace();
  23 |         }
  24 | 
  25 |         return null;
  26 |     }
  27 | 
  28 |     private static long byteArrayToLong(byte[] bytes) {
  29 |         long result = 0;
  30 |         for (int i = 0; i < Math.min(bytes.length, 8); i++) {
  31 |             result <<= 8;
  32 |             result |= (bytes[i] & 0xFF);
  33 |         }
  34 |         return result;
  35 |     }
  36 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/utils/OrderIdUtil.java ======

   1 | package com.astrosea.richer.utils;
   2 | 
   3 | import java.security.MessageDigest;
   4 | import java.security.NoSuchAlgorithmException;
   5 | 
   6 | public class OrderIdUtil {
   7 |     public static String generateOrderId(String input) {
   8 |         try {
   9 |             // 创建一个MD5的哈希函数
  10 |             MessageDigest digest = MessageDigest.getInstance("MD5");
  11 |             
  12 |             // 计算输入字符串的哈希值
  13 |             byte[] hashBytes = digest.digest(input.getBytes());
  14 |             
  15 |             // 将哈希值转换为十六进制字符串
  16 |             StringBuilder hexString = new StringBuilder();
  17 |             for (byte b : hashBytes) {
  18 |                 String hex = Integer.toHexString(0xFF & b);
  19 |                 if (hex.length() == 1) {
  20 |                     hexString.append('0');
  21 |                 }
  22 |                 hexString.append(hex);
  23 |             }
  24 |             
  25 |             // 截取字符串前9位作为订单ID
  26 |             return hexString.toString().substring(0, 9);
  27 |         } catch (NoSuchAlgorithmException e) {
  28 |             e.printStackTrace();
  29 |         }
  30 |         
  31 |         return null;
  32 |     }
  33 | 
  34 |     public static void main(String[] args) {
  35 |         String orderId = generateOrderId("some_input_data");
  36 |         System.out.println(orderId); // 输出生成的9位订单ID
  37 |     }
  38 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/utils/BaseEntity.java ======

   1 | package com.astrosea.richer.utils;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.TableField;
   4 | import com.baomidou.mybatisplus.annotation.TableLogic;
   5 | 
   6 | import java.time.LocalDateTime;
   7 | 
   8 | /**
   9 |  * 基础POJO类
  10 |  *
  11 |  **/
  12 | public class BaseEntity {
  13 | 
  14 |     private Long id;
  15 | 
  16 |     private LocalDateTime insertTime;
  17 | 
  18 |     private LocalDateTime updateTime;
  19 | 
  20 |     @TableField("is_deleted")
  21 |     @TableLogic
  22 |     private Boolean deleted;
  23 | 
  24 |     public Long getId() {
  25 |         return id;
  26 |     }
  27 | 
  28 |     public void setId(Long id) {
  29 |         this.id = id;
  30 |     }
  31 | 
  32 |     public LocalDateTime getInsertTime() {
  33 |         return insertTime;
  34 |     }
  35 | 
  36 |     public void setInsertTime(LocalDateTime insertTime) {
  37 |         this.insertTime = insertTime;
  38 |     }
  39 | 
  40 |     public LocalDateTime getUpdateTime() {
  41 |         return updateTime;
  42 |     }
  43 | 
  44 |     public void setUpdateTime(LocalDateTime updateTime) {
  45 |         this.updateTime = updateTime;
  46 |     }
  47 | 
  48 |     public Boolean getDeleted() {
  49 |         return deleted;
  50 |     }
  51 | 
  52 |     public void setDeleted(Boolean deleted) {
  53 |         this.deleted = deleted;
  54 |     }
  55 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/utils/RarityUtil.java ======

   1 | package com.astrosea.richer.utils;
   2 | 
   3 | import static com.astrosea.richer.constant.NftConstant.NFT_LV6_IDS;
   4 | 
   5 | public class RarityUtil {
   6 | 
   7 |     public static boolean isLV1(Integer nftId) {
   8 |         return NFT_LV6_IDS.contains(nftId);
   9 |     }
  10 | 
  11 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/utils/BeijingTimeUtil.java ======

   1 | package com.astrosea.richer.utils;
   2 | 
   3 | import java.time.ZoneId;
   4 | import java.time.ZonedDateTime;
   5 | import java.time.format.DateTimeFormatter;
   6 | 
   7 | public class BeijingTimeUtil {
   8 |     public static String getBeijingTime() {
   9 |         // 获取当前系统默认时区
  10 |         ZoneId systemZone = ZoneId.systemDefault();
  11 |         
  12 |         // 设置为亚洲/上海时区（北京时间）
  13 |         ZoneId beijingZone = ZoneId.of("Asia/Shanghai");
  14 |         
  15 |         // 获取当前时间
  16 |         ZonedDateTime now = ZonedDateTime.now(systemZone);
  17 |         
  18 |         // 转换为北京时间
  19 |         ZonedDateTime beijingTime = now.withZoneSameInstant(beijingZone);
  20 |         // 格式化为字符串，精确到秒
  21 |         DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
  22 |         String beijingTimeStr = beijingTime.format(formatter);
  23 | 
  24 |         return beijingTimeStr;
  25 |     }
  26 | 
  27 | 
  28 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/utils/OrderUtils.java ======

   1 | package com.astrosea.richer.utils;
   2 | 
   3 | import java.text.SimpleDateFormat;
   4 | import java.time.LocalDateTime;
   5 | import java.time.format.DateTimeFormatter;
   6 | 
   7 | import java.util.concurrent.ThreadLocalRandom;
   8 | 
   9 | public class OrderUtils {
  10 | 
  11 | 
  12 | 
  13 |     private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");
  14 | 
  15 |     public static long generateOrderId() {
  16 |         LocalDateTime now = LocalDateTime.now();
  17 |         String timestamp = DATE_FORMATTER.format(now);
  18 | 
  19 |         // 生成3位随机数
  20 |         ThreadLocalRandom random = ThreadLocalRandom.current();
  21 |         int randomNumber = random.nextInt(1000); // 生成0到999之间的随机数
  22 | 
  23 |         // 将时间戳和随机数拼接起来
  24 |         StringBuilder orderIdBuilder = new StringBuilder(timestamp);
  25 |         orderIdBuilder.insert(10, String.format("%03d", randomNumber));
  26 | 
  27 |         String orderIdString = orderIdBuilder.toString();
  28 | 
  29 |         return Long.parseLong(orderIdString);
  30 |     }
  31 | 
  32 | 
  33 |     public static void main(String[] args) {
  34 |         Long orderId = OrderUtils.generateOrderId();
  35 | 
  36 |         System.out.println(orderId);
  37 |     }
  38 | 
  39 | 
  40 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/utils/MailClient.java ======

   1 | package com.astrosea.richer.utils;
   2 | 
   3 | import org.slf4j.Logger;
   4 | import org.slf4j.LoggerFactory;
   5 | import org.springframework.beans.factory.annotation.Autowired;
   6 | import org.springframework.beans.factory.annotation.Value;
   7 | import org.springframework.mail.javamail.JavaMailSender;
   8 | import org.springframework.mail.javamail.MimeMessageHelper;
   9 | import org.springframework.stereotype.Component;
  10 | 
  11 | import javax.mail.internet.MimeMessage;
  12 | import java.io.IOException;
  13 | import java.net.ServerSocket;
  14 | import java.util.List;
  15 | 
  16 | @Component
  17 | public class MailClient {
  18 | 
  19 |     private static final Logger logger = LoggerFactory.getLogger(MailClient.class);
  20 | 
  21 | 
  22 |     //不影响运行
  23 |     //MailProperties 的password必须是授权码
  24 |     @Autowired
  25 |     private JavaMailSender mailSender;
  26 | 
  27 |     @Value("${spring.mail.username}")
  28 |     private String from;
  29 | 
  30 |     public int sendMail(String to, String subject, String content) throws IOException {
  31 |         try (ServerSocket serverSocket = new ServerSocket(0)) {
  32 |             int port = serverSocket.getLocalPort();
  33 |             MimeMessage message = mailSender.createMimeMessage();
  34 |             MimeMessageHelper helper = new MimeMessageHelper(message);
  35 |             helper.setFrom(from);
  36 |             helper.setTo(to);
  37 |             helper.setSubject(subject);
  38 |             helper.setText(content,true);
  39 |             mailSender.send(helper.getMimeMessage());
  40 |             return port;
  41 |         } catch (Exception e) {
  42 |             throw new RuntimeException(e);
  43 |         }
  44 |     }
  45 | 
  46 |     public int sendMail(List<String> toList, String subject, String content) throws IOException {
  47 |         try (ServerSocket serverSocket = new ServerSocket(0)) {
  48 |             int port = serverSocket.getLocalPort();
  49 |             MimeMessage message = mailSender.createMimeMessage();
  50 |             MimeMessageHelper helper = new MimeMessageHelper(message);
  51 |             helper.setFrom(from);
  52 |             helper.setTo(toList.toArray(new String[0]));
  53 |             helper.setSubject(subject);
  54 |             helper.setText(content, true);
  55 |             mailSender.send(helper.getMimeMessage());
  56 |             return port;
  57 |         } catch (Exception e) {
  58 |             throw new RuntimeException(e);
  59 |         }
  60 |     }
  61 | 
  62 |     /**
  63 |      * 构建邮件 html
  64 |      * @param to
  65 |      * @param mainContent
  66 |      * @param remark
  67 |      * @return
  68 |      */
  69 |     public String getHtmlContent(String to, String mainContent, String remark) {
  70 |         String userEmail = to;
  71 | 
  72 |         StringBuilder content = new StringBuilder();
  73 |         content.append("<!DOCTYPE html>\n");
  74 |         content.append("<html lang=\"en\">\n");
  75 |         content.append("<head>\n");
  76 |         content.append("    <meta charset=\"UTF-8\">\n");
  77 |         content.append("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
  78 |         content.append("    <title>Astro</title>\n");
  79 |         content.append("    <style>\n");
  80 |         content.append("        body {\n");
  81 |         content.append("            margin: 0;\n");
  82 |         content.append("            padding: 0;\n");
  83 |         content.append("        }\n");
  84 |         content.append("\n");
  85 |         content.append("        .container {\n");
  86 |         content.append("            max-width: 1200px;\n");
  87 |         content.append("            width: 100%;\n");
  88 |         content.append("            margin: 0 auto;\n");
  89 |         content.append("            height: 80vh;\n");
  90 |         content.append("            max-height: 1200px;\n");
  91 |         content.append("        }\n");
  92 |         content.append("\n");
  93 |         content.append("        .content {\n");
  94 |         content.append("            margin: 10px 5%;\n");
  95 |         content.append("        }\n");
  96 |         content.append("\n");
  97 |         content.append("        img {\n");
  98 |         content.append("            width: 100%;\n");
  99 |         content.append("        }\n");
 100 |         content.append("\n");
 101 |         content.append("        h3 {\n");
 102 |         content.append("            margin-bottom: 50px;\n");
 103 |         content.append("        }\n");
 104 |         content.append("\n");
 105 |         content.append("        .bottom-img {\n");
 106 |         content.append("            position: absolute;\n");
 107 |         content.append("            bottom: 0;\n");
 108 |         content.append("            max-width: 1200px;\n");
 109 |         content.append("            margin-top: 40px; \n");
 110 |         content.append("        }\n");
 111 |         content.append("\n");
 112 |         content.append("        .eamil-code {\n");
 113 |         content.append("            font-weight: 700;\n");
 114 |         content.append("        }\n");
 115 |         content.append("\n");
 116 |         content.append("        @media (min-width: 1200px) {\n");
 117 |         content.append("            .container {\n");
 118 |         content.append("                max-width: 800px;\n");
 119 |         content.append("            }\n");
 120 |         content.append("\n");
 121 |         content.append("            .bottom-img {\n");
 122 |         content.append("                max-width: 800px;\n");
 123 |         content.append("            }\n");
 124 |         content.append("        }\n");
 125 |         content.append("    </style>\n");
 126 |         content.append("</head>\n");
 127 |         content.append("<body>\n");
 128 |         content.append("    <div class=\"container\">\n");
 129 |         content.append("        <img src=\"https://pic.astrosea.io/astro-email/email-page-top.png\" alt=\"\">\n");
 130 |         content.append("        <div class=\"content\">\n");
 131 |         content.append("            <h3>尊敬的用户：" + userEmail + "</h3>\n");  // 在这里插入变量 email
 132 |         content.append("            <p>" + remark.replaceAll("\n", "<br>") + "</p>\n");// 邮件内容备注 remark
 133 |         content.append("            <div>\n");
 134 |         content.append("                <pre><span class=\"email-code\">" + mainContent.replaceAll("\n", "<br>") + "</span></pre>\n");
 135 |         content.append("            </div>\n");
 136 |         content.append("        </div>\n");
 137 |         content.append("        <img class=\"bottom-img\" src=\"https://pic.astrosea.io/astro-email/email-page-bottom.png\" alt=\"\">\n");
 138 |         content.append("    </div>\n");
 139 |         content.append("</body>\n");
 140 |         content.append("</html>");
 141 |         return content.toString();
 142 |     }
 143 | 
 144 | 
 145 | 
 146 | 
 147 | 
 148 | 
 149 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/utils/SpiderClient.java ======

   1 | package com.astrosea.richer.utils;
   2 | 
   3 | import cn.hutool.core.util.StrUtil;
   4 | import cn.hutool.http.HttpRequest;
   5 | import cn.hutool.json.JSONArray;
   6 | import cn.hutool.json.JSONObject;
   7 | import cn.hutool.json.JSONUtil;
   8 | import com.astrosea.richer.constant.RedisKeyConstant;
   9 | import com.astrosea.richer.vo.dto.PriceDto;
  10 | import com.astrosea.richer.vo.dto.UnitUsdFloorPriceAvgDto;
  11 | import org.springframework.beans.factory.annotation.Autowired;
  12 | import org.springframework.data.redis.core.RedisTemplate;
  13 | import org.springframework.data.redis.core.ValueOperations;
  14 | import org.springframework.stereotype.Component;
  15 | 
  16 | import java.math.BigDecimal;
  17 | import java.util.concurrent.TimeUnit;
  18 | 
  19 | @Component
  20 | public class SpiderClient {
  21 | 
  22 |     @Autowired
  23 |     RedisTemplate redisTemplate;
  24 | 
  25 | 
  26 |     /**
  27 |      * 复杂
  28 |      * @return
  29 |      */
  30 |     public String constructEmail() {
  31 |         StringBuilder sb = new StringBuilder();
  32 | 
  33 |         // 构造rats邮箱提醒实体
  34 |         PriceDto ratsWarnDto = compareFloorPrice(getUsdFloorPrice("rats"),
  35 |                 getUnitUsdFloorPriceAvg("rats").getUnitUsdFloorPriceAvg(), "rats",
  36 |                 getUnitUsdFloorPriceAvg("rats").getWarn());
  37 |         if (ratsWarnDto.getChangeRate() != null) {
  38 |             sb.append(ratsWarnDto.getChangeRate()).append("\n");
  39 |         }
  40 | 
  41 |         // 构造sats邮箱提醒实体
  42 |         PriceDto satsWarnDto = compareFloorPrice(getUsdFloorPrice("sats"),
  43 |                 getUnitUsdFloorPriceAvg("sats").getUnitUsdFloorPriceAvg(), "sats",
  44 |                 getUnitUsdFloorPriceAvg("sats").getWarn());
  45 |         if (satsWarnDto.getChangeRate() != null) {
  46 |             sb.append(satsWarnDto.getChangeRate()).append("\n");
  47 |         }
  48 | 
  49 |         // 构造cats邮箱提醒实体
  50 |         PriceDto catsWarnDto = compareFloorPrice(getUsdFloorPrice("cats"),
  51 |                 getUnitUsdFloorPriceAvg("cats").getUnitUsdFloorPriceAvg(), "cats",
  52 |                 getUnitUsdFloorPriceAvg("cats").getWarn());
  53 |         if (catsWarnDto.getChangeRate() != null) {
  54 |             sb.append(catsWarnDto.getChangeRate()).append("\n");
  55 |         }
  56 | 
  57 |         // 构造csas邮箱提醒实体
  58 |         PriceDto csasWarnDto = compareFloorPrice(getUsdFloorPrice("csas"),
  59 |                 getUnitUsdFloorPriceAvg("csas").getUnitUsdFloorPriceAvg(), "csas",
  60 |                 getUnitUsdFloorPriceAvg("csas").getWarn());
  61 |         if (csasWarnDto.getChangeRate() != null) {
  62 |             sb.append(csasWarnDto.getChangeRate()).append("\n");
  63 |         }
  64 | 
  65 |         // 构造8848邮箱提醒实体
  66 |         PriceDto eightEightFourEightWarnDto = compareFloorPrice(getUsdFloorPrice("8848"),
  67 |                 getUnitUsdFloorPriceAvg("8848").getUnitUsdFloorPriceAvg(), "8848",
  68 |                 getUnitUsdFloorPriceAvg("8848").getWarn());
  69 |         if (eightEightFourEightWarnDto.getChangeRate() != null) {
  70 |             sb.append(eightEightFourEightWarnDto.getChangeRate()).append("\n");
  71 |         }
  72 | 
  73 |         // 构造MMSS邮箱提醒实体
  74 |         PriceDto mmssWarnDto = compareFloorPrice(getUsdFloorPrice("MMSS"),
  75 |                 getUnitUsdFloorPriceAvg("MMSS").getUnitUsdFloorPriceAvg(), "MMSS",
  76 |                 getUnitUsdFloorPriceAvg("MMSS").getWarn());
  77 |         if (mmssWarnDto.getChangeRate() != null) {
  78 |             sb.append(mmssWarnDto.getChangeRate());
  79 |         }
  80 | 
  81 |         return sb.toString();
  82 |     }
  83 | 
  84 |     /**
  85 |      * 不管重复，每次都去比价拿到数据
  86 |      * @return
  87 |      */
  88 |     public String constructEmailEasy() {
  89 |         StringBuilder sb = new StringBuilder();
  90 | 
  91 |         // 构造rats邮箱提醒实体
  92 |         PriceDto ratsWarnDto = compareFloorPrice(getUsdFloorPrice("rats"),
  93 |                 getSixFloorPriceAvg("rats"), "rats", true);
  94 |         if (ratsWarnDto.getChangeRate() != null) {
  95 |             sb.append(ratsWarnDto.getChangeRate()).append("\n");
  96 |         }
  97 | 
  98 |         // 构造sats邮箱提醒实体
  99 |         PriceDto satsWarnDto = compareFloorPrice(getUsdFloorPrice("sats"),
 100 |                 getSixFloorPriceAvg("sats"), "sats", true);
 101 |         if (satsWarnDto.getChangeRate() != null) {
 102 |             sb.append(satsWarnDto.getChangeRate()).append("\n");
 103 |         }
 104 | 
 105 |         // 构造cats邮箱提醒实体
 106 |         PriceDto catsWarnDto = compareFloorPrice(getUsdFloorPrice("cats"),
 107 |                 getSixFloorPriceAvg("cats"), "cats", true);
 108 |         if (catsWarnDto.getChangeRate() != null) {
 109 |             sb.append(catsWarnDto.getChangeRate()).append("\n");
 110 |         }
 111 | 
 112 |         // 构造csas邮箱提醒实体
 113 |         PriceDto csasWarnDto = compareFloorPrice(getUsdFloorPrice("csas"),
 114 |                 getSixFloorPriceAvg("csas"), "csas", true);
 115 |         if (csasWarnDto.getChangeRate() != null) {
 116 |             sb.append(csasWarnDto.getChangeRate()).append("\n");
 117 |         }
 118 | 
 119 |         // 构造8848邮箱提醒实体
 120 |         PriceDto eightEightFourEightWarnDto = compareFloorPrice(getUsdFloorPrice("8848"),
 121 |                 getSixFloorPriceAvg("8848"), "8848", true);
 122 |         if (eightEightFourEightWarnDto.getChangeRate() != null) {
 123 |             sb.append(eightEightFourEightWarnDto.getChangeRate()).append("\n");
 124 |         }
 125 | 
 126 |         // 构造MMSS邮箱提醒实体
 127 |         PriceDto mmssWarnDto = compareFloorPrice(getUsdFloorPrice("MMSS"),
 128 |                 getSixFloorPriceAvg("MMSS"), "MMSS", true);
 129 |         if (mmssWarnDto.getChangeRate() != null) {
 130 |             sb.append(mmssWarnDto.getChangeRate());
 131 |         }
 132 | 
 133 |         return sb.toString();
 134 |     }
 135 | 
 136 | 
 137 | 
 138 | 
 139 |     /**
 140 |      * 比价接口
 141 |      * 跌幅超 50% 达到报警阈值
 142 |      *
 143 |      * @param nowFloorPrice
 144 |      * @param avgPrice
 145 |      * @param brc
 146 |      * @param
 147 |      * @return
 148 |      */
 149 |     public static PriceDto compareFloorPrice(String nowFloorPrice, String avgPrice, String brc , Boolean warn) {
 150 | 
 151 |         PriceDto dto = new PriceDto();
 152 |         dto.setChangeRate(null);// 邮箱浮动提醒初始值为空
 153 |         dto.setLowPriceWarn(false);// 初始提醒为否
 154 | 
 155 |         // 若不需要提醒直接返回 dto
 156 |         if (!warn) {
 157 |             return dto;
 158 |         }
 159 | 
 160 |         BigDecimal floor = new BigDecimal(nowFloorPrice);
 161 |         BigDecimal nowAvg = new BigDecimal(avgPrice.trim());
 162 | 
 163 | 
 164 |         BigDecimal change = floor.subtract(nowAvg);
 165 |         System.out.println("change :" + change);
 166 | 
 167 |         BigDecimal changeRate = change.divide(nowAvg, 4, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("100"));// 涨幅百分数
 168 |         System.out.println("changeRate :" + changeRate);
 169 | 
 170 | 
 171 |         if (changeRate.compareTo(BigDecimal.ZERO) > 0) {
 172 | //            dto.setChangeRate(changeRate + "%");
 173 | //            dto.setLowPriceWarn(true);// 只是上涨
 174 | 
 175 |             System.out.println("涨幅百分比为：" + changeRate + "%");
 176 | 
 177 |         } else if (changeRate.compareTo(BigDecimal.ZERO) < 0) {
 178 | //            dto.setChangeRate(changeRate + "%");
 179 | //            dto.setLowPriceWarn(true);// 只是下跌
 180 | 
 181 |             System.out.println("跌幅百分比为：" + changeRate + "%");
 182 | 
 183 |             if (changeRate.compareTo(new BigDecimal("-50")) <= 0) {// 测试阶段为-5%就预警，正式为-50%
 184 |                 dto.setChangeRate(brc + "具体浮动为：" + changeRate + "%");
 185 |                 dto.setLowPriceWarn(true);// 达到报警阈值
 186 | 
 187 |                 System.out.println("达到报警阈值：" + changeRate + "%");
 188 |             }
 189 | 
 190 |         } else {
 191 |             System.out.println(brc + "无变化");
 192 |         }
 193 | 
 194 |         return dto;
 195 |     }
 196 | 
 197 | 
 198 | 
 199 | 
 200 |     /**
 201 |      * 获取欧易实时地板价 USD
 202 |      * @return
 203 |      */
 204 |     public String getUsdFloorPrice(String brc) {
 205 | 
 206 |         String timeStamp = String.valueOf(System.currentTimeMillis());
 207 | 
 208 |         System.out.println("getUsdFloorPrice timeStamp :" +timeStamp);
 209 | 
 210 |         String url = "https://www.okx.com/priapi/v1/nft/brc/tokens/"+ brc
 211 |                 +"?t=" + timeStamp
 212 |                 + "&token="
 213 |                 + brc +"&walletAddress=";
 214 | 
 215 |         String res = HttpRequest.get(url)
 216 | //                .setHttpProxy("127.0.0.1", 7890)
 217 |                 .timeout(100000)
 218 |                 .execute()
 219 |                 .body();
 220 | 
 221 |         JSONObject json = JSONUtil.parseObj(res);
 222 |         JSONObject data = json.getJSONObject("data");
 223 |         String usdFloorPrice = data.getStr("usdFloorPrice");
 224 | 
 225 |         System.out.println("usdFloorPrice:" + usdFloorPrice);
 226 | 
 227 |         return usdFloorPrice;
 228 |     }
 229 | 
 230 | 
 231 |     /**
 232 |      * 获取后六笔挂单的均价
 233 |      * @param brc 币种
 234 |      * @return 后六笔挂单的均价
 235 |      */
 236 |     public String getSixFloorPriceAvg(String brc) {
 237 | 
 238 |         String timeStamp = String.valueOf(System.currentTimeMillis());
 239 |         String url = "https://www.okx.com/priapi/v1/nft/brc/detail/items?t="
 240 |                 + timeStamp
 241 |                 + "&pageNum=1&pageSize=7&cursor=&ticker="
 242 |                 + brc + "&orderType=1";
 243 | 
 244 |         String res = HttpRequest.get(url)
 245 | //                .setHttpProxy("127.0.0.1", 7890)
 246 |                 .timeout(10000)
 247 |                 .execute()
 248 |                 .body();
 249 | 
 250 |         JSONObject json = JSONUtil.parseObj(res);
 251 |         JSONObject data = json.getJSONObject("data");
 252 |         JSONArray items = data.getJSONArray("items");
 253 | 
 254 |         double totalUsdPrice = 0;
 255 |         int count = 0;
 256 |         for (int i = 1; i < items.size(); i++) {
 257 |             JSONObject item = items.getJSONObject(i);
 258 |             JSONObject unitPrice = item.getJSONObject("unitPrice");
 259 |             double usdPrice = unitPrice.getDouble("usdPrice");
 260 |             totalUsdPrice += usdPrice;
 261 |             count++;
 262 |         }
 263 | 
 264 |         double averageUsdPrice = totalUsdPrice / count;
 265 |         return String.format("%.8f", averageUsdPrice);
 266 |     }
 267 | 
 268 | 
 269 | 
 270 |     /**
 271 |      * 获得实时平均单价（最低价后六笔的均价，有做去重逻辑
 272 |      * @param brc
 273 |      * @return
 274 |      */
 275 |     public UnitUsdFloorPriceAvgDto getUnitUsdFloorPriceAvg(String brc) {
 276 | 
 277 |         UnitUsdFloorPriceAvgDto dto = new UnitUsdFloorPriceAvgDto();
 278 | 
 279 |         String timeStamp = String.valueOf(System.currentTimeMillis());
 280 |         String url = "https://www.okx.com/priapi/v1/nft/brc/detail/items?t="
 281 |                 + timeStamp
 282 |                 + "&pageNum=1&pageSize=7&cursor=&ticker="
 283 |                 + brc + "&orderType=1";
 284 | 
 285 |         String res = HttpRequest.get(url)
 286 | //                .setHttpProxy("127.0.0.1", 7890)
 287 |                 .timeout(10000)
 288 |                 .execute()
 289 |                 .body();
 290 | 
 291 |         JSONObject json = JSONUtil.parseObj(res);
 292 |         JSONObject data = json.getJSONObject("data");
 293 |         JSONArray items = data.getJSONArray("items");
 294 | 
 295 |         double totalUsdPrice = 0;
 296 |         int count = 0;
 297 |         for (int i = 0; i < items.size(); i++) {
 298 |             JSONObject item = items.getJSONObject(i);
 299 | 
 300 |             if (i == 0) {
 301 |                 String inscriptionNum = item.getStr("inscriptionNum");
 302 |                 String tokenId = item.getStr("tokenId");
 303 | 
 304 |                 ValueOperations<String, String> opsForValue = redisTemplate.opsForValue();
 305 |                 // 验证 email 是否过期
 306 |                 String tokenIdValue = (String) opsForValue.get(RedisKeyConstant.BRC_TOKEN_ID + tokenId);
 307 | 
 308 |                 // 验证订单还在不在
 309 |                 if (StrUtil.isBlank(tokenIdValue)){
 310 |                     // 不存在则 , 说明是新低价订单需要警告 ， 存到 redis 中
 311 |                     opsForValue.set(RedisKeyConstant.BRC_TOKEN_ID + tokenId, tokenId, 30, TimeUnit.MINUTES);
 312 |                     dto.setWarn(true); // 需要发邮件
 313 |                     dto.setInscriptionNum(inscriptionNum);// 返回挂单 id
 314 |                 } else {
 315 |                     // 存在则已经警告过
 316 |                     dto.setWarn(false);
 317 |                     return dto;
 318 |                 }
 319 | 
 320 |             } else {
 321 |                 JSONObject unitPrice = item.getJSONObject("unitPrice");
 322 |                 double usdPrice = unitPrice.getDouble("usdPrice");
 323 |                 totalUsdPrice += usdPrice;
 324 |                 count++;
 325 |             }
 326 | 
 327 |         }
 328 | 
 329 |         double averageUsdPrice = totalUsdPrice / count;
 330 |         dto.setUnitUsdFloorPriceAvg(String.format("%.8f", averageUsdPrice));
 331 | 
 332 |         return dto;
 333 |     }
 334 | 
 335 | 
 336 | 
 337 | 
 338 | 
 339 |     /**
 340 |      * 获取欧易实时地板价 sats
 341 |      * @return
 342 |      */
 343 |     public static String getFloorSat(String brc) {
 344 | 
 345 |         String timeStamp = String.valueOf(System.currentTimeMillis());
 346 | 
 347 |         System.out.println("getFloor timeStamp :" +timeStamp);
 348 | 
 349 |         String url = "https://www.okx.com/priapi/v1/nft/brc/tokens/"+ brc
 350 |                 +"?t=" + timeStamp
 351 |                 + "&token="
 352 |                 + brc +"&walletAddress=";
 353 | 
 354 |         String res = HttpRequest.get(url)
 355 |                 .setHttpProxy("127.0.0.1", 7890)
 356 |                 .timeout(100000)
 357 |                 .execute()
 358 |                 .body();
 359 | 
 360 |         JSONObject json = JSONUtil.parseObj(res);
 361 |         JSONObject data = json.getJSONObject("data");
 362 |         String floorPrice = data.getStr("floorPrice");
 363 | 
 364 |         System.out.println("floorPrice:" + floorPrice);
 365 | 
 366 |         return floorPrice;
 367 |     }
 368 | 
 369 | 
 370 | 
 371 | 
 372 |     /**
 373 |      * 获取欧易前7笔
 374 |      * @return
 375 |      */
 376 |     public static String getListAvg(String brc) {
 377 | 
 378 |         String timeStamp = String.valueOf(System.currentTimeMillis());
 379 | 
 380 |         System.out.println("getFloor timeStamp :" +timeStamp);
 381 | 
 382 |         String url = "https://www.okx.com/priapi/v1/nft/brc/detail/items/"+ brc
 383 |                 +"?t=" + timeStamp
 384 |                 + "&token="
 385 |                 + brc +"&walletAddress=";
 386 | 
 387 |         String res = HttpRequest.get(url)
 388 |                 .setHttpProxy("127.0.0.1", 7890)
 389 |                 .timeout(100000)
 390 |                 .execute()
 391 |                 .body();
 392 | 
 393 |         JSONObject json = JSONUtil.parseObj(res);
 394 |         JSONObject data = json.getJSONObject("data");
 395 |         String floorPrice = data.getStr("floorPrice");
 396 | 
 397 |         System.out.println("floorPrice:" + floorPrice);
 398 | 
 399 |         return floorPrice;
 400 |     }
 401 | 
 402 |     /**
 403 |      * 获取欧易实时24h交易均价
 404 |      * @return
 405 |      */
 406 |     public static String get24hAvg(String brc) {
 407 | 
 408 |         String timeStamp = String.valueOf(System.currentTimeMillis());
 409 | 
 410 |         System.out.println("get24hAvg timeStamp :" + timeStamp);
 411 | 
 412 | 
 413 |         String url = "https://www.okx.com/priapi/v1/nft/brc/detail/analytics/trades?t=" + timeStamp
 414 |                 + "&ticker="
 415 |                 + brc + "&type=1";
 416 | 
 417 |         String res = HttpRequest.get(url)
 418 |                 .setHttpProxy("127.0.0.1", 7890)
 419 |                 .timeout(100000)
 420 |                 .execute()
 421 |                 .body();
 422 | 
 423 |         // 解析JSON数据
 424 |         JSONObject json = JSONUtil.parseObj(res);
 425 |         JSONObject avgPriceObj = json.getJSONObject("data").getJSONObject("avgPrice");
 426 |         String value = avgPriceObj.getStr("value");
 427 | 
 428 |         // 将字符串转换为BigDecimal
 429 |         BigDecimal avgPriceValue = new BigDecimal(value);
 430 | 
 431 |         System.out.println(value);
 432 | 
 433 |         return value;
 434 |     }
 435 | 
 436 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/utils/RandomUtil.java ======

   1 | package com.astrosea.richer.utils;
   2 | 
   3 | import java.util.Random;
   4 | 
   5 | public class RandomUtil {
   6 |     private static final Random RANDOM = new Random();
   7 | 
   8 |     /**
   9 |      * 生成1~10之间的随机数
  10 |      * @return 随机数
  11 |      */
  12 |     public static int getRandomNum() {
  13 |         return RANDOM.nextInt(10) + 1;
  14 |     }
  15 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/param/CreatGainParam.java ======

   1 | package com.astrosea.richer.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import javax.validation.constraints.NotNull;
   6 | import java.math.BigDecimal;
   7 | 
   8 | @Data
   9 | public class CreatGainParam {
  10 | 
  11 | 
  12 |     @NotNull(message = "fakeRewBase不能为空")
  13 |     private BigDecimal fakeRewBase;
  14 | 
  15 |     @NotNull(message = "realDecBase不能为空")
  16 |     private BigDecimal realDecBase;
  17 | 
  18 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/param/ClaimCheckRequest.java ======

   1 | package com.astrosea.richer.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class ClaimCheckRequest {
   7 | 
   8 |     private Long orderId;
   9 | 
  10 |     private String address;
  11 | 
  12 |     private String reward;
  13 | 
  14 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/param/GetCoinsParam.java ======

   1 | package com.astrosea.richer.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class GetCoinsParam {
   7 | 
   8 |     private String address;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/param/RewardParam.java ======

   1 | package com.astrosea.richer.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class RewardParam {
   7 | 
   8 |     private String address;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/param/ClaimParam.java ======

   1 | package com.astrosea.richer.param;
   2 | import lombok.Data;
   3 | 
   4 | import java.math.BigDecimal;
   5 | 
   6 | @Data
   7 | public class ClaimParam {
   8 | 
   9 |     // 钱包地址
  10 |     private String address;
  11 | 
  12 |     // 能领取的收益
  13 |     private BigDecimal amount;
  14 | 
  15 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/param/ClaimCheckParam.java ======

   1 | package com.astrosea.richer.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.math.BigDecimal;
   6 | 
   7 | @Data
   8 | public class ClaimCheckParam {
   9 | 
  10 |     private Long orderId;
  11 | 
  12 |     private String address;
  13 | 
  14 |     private BigDecimal reward;
  15 | 
  16 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/param/FillBaseParam.java ======

   1 | package com.astrosea.richer.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class FillBaseParam {
   7 | 
   8 |     private Integer base;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/param/QueryOrderInfoParam.java ======

   1 | package com.astrosea.richer.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class QueryOrderInfoParam {
   7 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/param/AddOgWLParam.java ======

   1 | package com.astrosea.richer.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.util.List;
   6 | 
   7 | @Data
   8 | public class AddOgWLParam {
   9 | 
  10 |     List<String> addressList;
  11 | 
  12 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/param/NftResenderParam.java ======

   1 | package com.astrosea.richer.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class NftResenderParam {
   7 | 
   8 |     /**
   9 |      * 补发的 nftId
  10 |      */
  11 |     private Integer nftId;
  12 | 
  13 |     private String address;
  14 | 
  15 |     private Integer cost;
  16 | 
  17 |     private String key;
  18 | 
  19 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/param/BaseRewParam.java ======

   1 | package com.astrosea.richer.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class BaseRewParam {
   7 | 
   8 |     private String address;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/param/ClaimScriptParam.java ======

   1 | package com.astrosea.richer.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class ClaimScriptParam {
   7 | 
   8 |     private String address;
   9 | 
  10 |     private String reward;
  11 | 
  12 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/param/RicherParam.java ======

   1 | package com.astrosea.richer.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class RicherParam {
   7 | 
   8 |     private String address;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/param/QueryCoinsParam.java ======

   1 | package com.astrosea.richer.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class QueryCoinsParam {
   7 | 
   8 |     private String address;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/param/ClaimJudgerParam.java ======

   1 | package com.astrosea.richer.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class ClaimJudgerParam {
   7 | 
   8 |     String address;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/controller/RichController.java ======

   1 | package com.astrosea.richer.controller;
   2 | 
   3 | import com.astrosea.richer.mapper.RewardBaseMapper;
   4 | import com.astrosea.richer.param.ClaimCheckParam;
   5 | import com.astrosea.richer.param.QueryCoinsParam;
   6 | import com.astrosea.richer.pojo.RichBaseDo;
   7 | import com.astrosea.richer.response.Response;
   8 | import com.astrosea.richer.service.ClaimService;
   9 | import com.astrosea.richer.service.RichService;
  10 | import com.astrosea.richer.service.TimeTaskService;
  11 | import com.astrosea.richer.vo.BaseRewVo;
  12 | import com.astrosea.richer.vo.QueryCoinsVo;
  13 | import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
  14 | import lombok.extern.slf4j.Slf4j;
  15 | import org.slf4j.Logger;
  16 | import org.slf4j.LoggerFactory;
  17 | import org.springframework.beans.factory.annotation.Autowired;
  18 | import org.springframework.web.bind.annotation.*;
  19 | 
  20 | import javax.servlet.http.HttpServletRequest;
  21 | import java.math.BigDecimal;
  22 | import java.time.LocalDate;
  23 | import java.time.LocalDateTime;
  24 | 
  25 | @Slf4j
  26 | @RestController
  27 | @RequestMapping("/rich")
  28 | //@CrossOrigin(origins = "192.168.2.52:5500", methods = {RequestMethod.GET, RequestMethod.POST})
  29 | //@CrossOrigin(origins = "http://192.168.2.65:5173/")
  30 | public class RichController {
  31 | 
  32 |     @Autowired
  33 |     RewardBaseMapper rewardBaseMapper;
  34 | 
  35 |     @Autowired
  36 |     RichService richService;
  37 | 
  38 |     @Autowired
  39 |     ClaimService claimService;
  40 | 
  41 |     @Autowired
  42 |     TimeTaskService timeTaskService;
  43 | 
  44 |     private static final Logger logger = LoggerFactory.getLogger(RichController.class);
  45 | 
  46 | 
  47 |     /**
  48 |      * 查询当天的矿场产出
  49 |      * @param request
  50 |      * @return
  51 |      */
  52 |     @GetMapping("/queryBase")
  53 |     public Response<BaseRewVo> baseRew(HttpServletRequest request){
  54 |         BaseRewVo vo = new BaseRewVo();
  55 | 
  56 |         // 获取当前日期和时间
  57 |         LocalDateTime now = LocalDateTime.now();
  58 |         // 转换为精确到天的日期数据
  59 |         LocalDate today = now.toLocalDate();
  60 | 
  61 | 
  62 |         QueryWrapper<RichBaseDo> queryWrapper = new QueryWrapper<>();
  63 |         queryWrapper.select("rew_base")
  64 |                 .eq("is_deleted", false)
  65 |                 .orderByDesc("rew_data")
  66 |                 .last("LIMIT 1");
  67 | 
  68 |         RichBaseDo baseDo = rewardBaseMapper.selectOne(queryWrapper);
  69 | 
  70 |         if (baseDo == null) {
  71 |             vo.setRewBase(new BigDecimal(1888));
  72 |            return Response.successMsg(vo,"OMG!");
  73 |         }
  74 | 
  75 | 
  76 |         vo.setRewBase(baseDo.getRewBase());
  77 | 
  78 |         return Response.success(vo);
  79 |     }
  80 | 
  81 | 
  82 |     /**
  83 |      * 查询当前用户的个人收益
  84 |      * @param address
  85 |      * @return
  86 |      */
  87 |     @GetMapping("/queryCoins")
  88 |     public Response<QueryCoinsVo> queryCoins(@RequestParam String address) {
  89 |         QueryCoinsParam param = new QueryCoinsParam();
  90 |         param.setAddress(address);
  91 |         log.info("queryCoins入参{}", param);
  92 |         // 在接口请求开始处记录时间戳
  93 |         long startTime = System.currentTimeMillis();
  94 |         Response<QueryCoinsVo> vo = richService.query(param);
  95 |         // 在接口请求结束处记录时间戳
  96 |         long endTime = System.currentTimeMillis();
  97 |         // 计算请求的执行时间
  98 |         long executionTime = endTime - startTime;
  99 |         // 将执行时间记录到日志中
 100 |         logger.info("queryCoins 接口响应速度：{} 毫秒", executionTime);
 101 |         log.info("queryCoins出参{}", vo);
 102 |         return vo;
 103 |     }
 104 | 
 105 |     /**
 106 |      * 领取个人收益
 107 |      * @param address
 108 |      * @return
 109 |      */
 110 |     @GetMapping("/claim")
 111 |     public Response claim(@RequestParam String address) {
 112 | 
 113 |         Response response = claimService.claim(address);
 114 | 
 115 |         return response;
 116 |     }
 117 | 
 118 |     /**
 119 |      * 此接口只做收益校验
 120 |      * @param
 121 |      * @return
 122 |      */
 123 |     @PostMapping("/claimCheck")
 124 |     public Response claimCheck(@RequestBody ClaimCheckParam param) {
 125 | 
 126 |         log.info("claimCheck param{}", param);
 127 |         log.info("claimCheck order{}", param.getOrderId());
 128 | 
 129 | 
 130 |         Response response = claimService.claimCheck(param);
 131 | 
 132 |         return response;
 133 |     }
 134 | 
 135 | 
 136 | 
 137 | 
 138 | 
 139 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/controller/SpiderController.java ======

   1 | package com.astrosea.richer.controller;
   2 | 
   3 | import com.astrosea.richer.schedule.GainsUpdaterTimeTask;
   4 | import lombok.extern.slf4j.Slf4j;
   5 | import org.springframework.beans.factory.annotation.Autowired;
   6 | import org.springframework.web.bind.annotation.PostMapping;
   7 | import org.springframework.web.bind.annotation.RequestMapping;
   8 | import org.springframework.web.bind.annotation.RestController;
   9 | 
  10 | import javax.servlet.http.HttpServletRequest;
  11 | 
  12 | @Slf4j
  13 | @RestController
  14 | @RequestMapping("/spider")
  15 | public class SpiderController {
  16 | 
  17 |     @Autowired
  18 |     GainsUpdaterTimeTask timeTask;
  19 | 
  20 | 
  21 | 
  22 | 
  23 |     @PostMapping("/email")
  24 |     public String email(HttpServletRequest request) {
  25 | 
  26 | 
  27 | 
  28 | 
  29 |         return "floor:";
  30 |     }
  31 | 
  32 | 
  33 | 
  34 | 
  35 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/controller/ScriptController.java ======

   1 | package com.astrosea.richer.controller;
   2 | 
   3 | 
   4 | import com.astrosea.richer.param.*;
   5 | import com.astrosea.richer.response.Response;
   6 | import com.astrosea.richer.service.ClaimService;
   7 | import com.astrosea.richer.service.ScriptService;
   8 | import com.astrosea.richer.service.TimeTaskService;
   9 | import com.astrosea.richer.vo.UpdateGainsVo;
  10 | import lombok.extern.slf4j.Slf4j;
  11 | import org.slf4j.Logger;
  12 | import org.slf4j.LoggerFactory;
  13 | import org.springframework.beans.factory.annotation.Autowired;
  14 | import org.springframework.web.bind.annotation.*;
  15 | 
  16 | import javax.servlet.http.HttpServletRequest;
  17 | import java.math.BigDecimal;
  18 | import java.math.RoundingMode;
  19 | import java.sql.SQLException;
  20 | import java.time.LocalDateTime;
  21 | import java.time.ZoneId;
  22 | 
  23 | @Slf4j
  24 | @RestController
  25 | @RequestMapping("/script")
  26 | public class ScriptController {
  27 | 
  28 |     private static final Logger logger = LoggerFactory.getLogger(ScriptController.class);
  29 | 
  30 | 
  31 |     @Autowired
  32 |     ScriptService scriptService;
  33 | 
  34 |     @Autowired
  35 |     ClaimService claimService;
  36 | 
  37 |     @Autowired
  38 |     TimeTaskService timeTaskService;
  39 | 
  40 | 
  41 |     /**
  42 |      * 1.填写当天矿场收益
  43 |      * 2.添加收益的同时累加所有当时 nft 持有者的收益
  44 |      * @param param
  45 |      * @return
  46 |      */
  47 |     @PostMapping("/updateGains")
  48 |     public Response<UpdateGainsVo> updateGains(@RequestBody CreatGainParam param) throws SQLException {
  49 | 
  50 |         if (param.getFakeRewBase() == null ) {
  51 |                return Response.successMsg("参数不能为空");
  52 |         }
  53 | 
  54 |         if (param.getRealDecBase() == null) {
  55 |             return Response.successMsg("参数不能为空");
  56 |         }
  57 | 
  58 | 
  59 |         log.info("填写当天矿场收益入参{}", param);
  60 |         Response<UpdateGainsVo> response = timeTaskService.updateGains(param);
  61 |         log.info("填写当天矿场收益出参{}", response);
  62 |         return response;
  63 |     }
  64 | 
  65 | 
  66 | 
  67 |     /**
  68 |      *
  69 |      * @param param
  70 |      * @return
  71 |      */
  72 |     @PostMapping("/claimScript")
  73 |     public Response claimScript(@RequestBody ClaimScriptParam param) {
  74 | 
  75 |         String address = param.getAddress();
  76 | 
  77 |         BigDecimal reward = new BigDecimal(param.getReward()).setScale(1, RoundingMode.HALF_UP);
  78 | 
  79 |         Long orderId = claimService.creatOrder(address, reward);
  80 | 
  81 |         System.out.println(orderId);
  82 | 
  83 |         Response response = claimService.chainClaim(address, reward, orderId.toString());
  84 | 
  85 |         return response;
  86 |     }
  87 | 
  88 |     @PostMapping("/claimJudger")
  89 |     public Response claimJudger(@RequestBody ClaimJudgerParam param) {
  90 | 
  91 |         String address = param.getAddress();
  92 | 
  93 |         Boolean claimJudger = claimService.claimJudger(address);
  94 | 
  95 |         if (claimJudger) {
  96 |             return Response.success();
  97 |         }
  98 | 
  99 |         return Response.success(false);
 100 |     }
 101 | 
 102 |     /**
 103 |      * nft 补发接口
 104 |      * @param param
 105 |      * @return
 106 |      */
 107 |     @PostMapping("/nftResender")
 108 |     public Response nftResender(@RequestBody NftResenderParam param) {
 109 | 
 110 |         // key 为阿花第一次 mint 的 tx_id
 111 |         if (!param.getKey().equals("4ac019f9039f42593a9681b159015ee85fc7833990093e43dbcd3170c071a5e0")) {
 112 |             return Response.successMsg("not allow");
 113 |         }
 114 | 
 115 |         logger.info("{}", param);
 116 | 
 117 |         Response response = scriptService.nftResender(param);
 118 | 
 119 |         return response;
 120 |     }
 121 | 
 122 |     /**
 123 |      * 更新收益脚本接口
 124 |      * @param request
 125 |      * @return
 126 |      * @throws SQLException
 127 |      */
 128 |     @PostMapping("/timeTaskUpdateGains")
 129 |     public Response timeTask(HttpServletRequest request) throws SQLException {
 130 | 
 131 |         Response<UpdateGainsVo> response = timeTaskService.timeTaskUpdateGains();
 132 | 
 133 |         return response;
 134 |     }
 135 | 
 136 | 
 137 |     /**
 138 |      * 打印时间和时区脚本接口
 139 |      * @param request
 140 |      * @return
 141 |      */
 142 |     @PostMapping("/time")
 143 |     public Response time(HttpServletRequest request) {
 144 |         ZoneId zoneId = ZoneId.systemDefault();
 145 |         System.out.println("当前时区：" + zoneId);
 146 |         logger.info("{}", zoneId);
 147 |         LocalDateTime now = LocalDateTime.now();
 148 |         System.out.println("当前时间：" + now);
 149 |         logger.info("zoneId{}", now);
 150 |         return Response.successMsg("当前时区：" + zoneId + "当前时间：" + now);
 151 |     }
 152 | 
 153 |     /**
 154 |      * 修改矿场收益接口
 155 |      * @param
 156 |      * @return
 157 |      * @throws SQLException
 158 |      */
 159 |     @PostMapping("/updateBaseRew")
 160 |     public Response updateBaseRew(Integer newBaseRew) {
 161 | 
 162 |         Response response = timeTaskService.updateBaseRew(newBaseRew);
 163 | 
 164 |         return response;
 165 |     }
 166 | 
 167 |     @GetMapping("/orderInfo")
 168 |     public Response orderInfo(@RequestParam QueryOrderInfoParam param) {
 169 |         return null;
 170 |     }
 171 | 
 172 | 
 173 | 
 174 | 
 175 | 
 176 | 
 177 | 
 178 | 
 179 | 
 180 | 
 181 | 
 182 | 
 183 | 
 184 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/constant/PayConstant.java ======

   1 | package com.astrosea.richer.constant;
   2 | 
   3 | import java.math.BigDecimal;
   4 | 
   5 | public class PayConstant {
   6 | 
   7 |     /**
   8 |      * og 身份支付
   9 |      */
  10 |     public static final int OG_PAY = 0;
  11 | 
  12 |     /**
  13 |      * WL 身份支付
  14 |      */
  15 |     public static final int WL_PAY = 1;
  16 | 
  17 |     /**
  18 |      * PUL 身份支付
  19 |      */
  20 |     public static final int PUL_PAY = 2;
  21 | 
  22 |     /**
  23 |      * 补发 身份支付
  24 |      */
  25 |     public static final int RESENDER_PAY_3 = 3;
  26 | 
  27 | 
  28 | 
  29 |     /**
  30 |      * og、wl 权益未使用或未开始支付
  31 |      */
  32 |     public static final int RIGHT_UNUSED_0 = 0;
  33 | 
  34 | 
  35 |     /**
  36 |      * og、wl 权益正在使用或已经使用完毕
  37 |      */
  38 |     public static final int RIGHT_USED_1 = 1;
  39 | 
  40 |     /**
  41 |      * og、wl 能 mint 的次数
  42 |      */
  43 |     public static final int VIP_AMT_1 = 1;
  44 | 
  45 | 
  46 |     /**
  47 |      * 正在支付
  48 |      */
  49 |     public static final int Paying_1 = 1;
  50 | 
  51 |     /**
  52 |      * 已支付
  53 |      */
  54 |     public static final int Paid_2 = 2;
  55 | 
  56 |     /**
  57 |      * 狗🐶币已到钱包
  58 |      */
  59 |     public static final int Received_3 = 3;
  60 | 
  61 |     /**
  62 |      * 狗🐶币已到钱包
  63 |      */
  64 |     public static final int RESEND_DONE_4 = 4;
  65 | 
  66 |     /**
  67 |      * OG 需支付的🐶币
  68 |      */
  69 |     public static final  BigDecimal OG_COST_500 = new BigDecimal("500");
  70 | 
  71 |     /**
  72 |      * WL 需支付的🐶币
  73 |      */
  74 |     public static final BigDecimal WL_COST_800 = new BigDecimal("800");
  75 | 
  76 |     /**
  77 |      * PUL 需支付的🐶币 正式数据
  78 |      */
  79 |     public static final BigDecimal PUB_COST_1000 = new BigDecimal("1000");
  80 | 
  81 |     /**
  82 |      * PUL 需支付的🐶币 测试数据
  83 |      */
  84 |     public static final BigDecimal PUB_COST_1000_TEST = new BigDecimal("0.02");
  85 | 
  86 |     /**
  87 |      * mint 最小单位
  88 |      */
  89 |     public static final int MINT_1 = 1;
  90 | 
  91 |     /**
  92 |      * 每个用户公售可以 mint 的最多次数
  93 |      */
  94 |     public static final int PUB_MINT_10 = 10;
  95 | 
  96 |     /**
  97 |      * 每个用户公售可以 mint 的最多次数测试数据
  98 |      */
  99 |     public static final int PUB_MINT_10000_TEST = 10000;
 100 | 
 101 |     /**
 102 |      * 总体的NFT数量 9982
 103 |      */
 104 |     public static final Integer MAX_1W = 10000;
 105 |     public static final Integer MAX_9982 = 9982;
 106 | 
 107 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/constant/OrderConstant.java ======

   1 | package com.astrosea.richer.constant;
   2 | 
   3 | 
   4 | public class OrderConstant {
   5 | 
   6 | 
   7 |     /**
   8 |      * 分发正在确认
   9 |      */
  10 |     public static final Integer GIVING_1  = 1;
  11 | 
  12 |     /**
  13 |      * 分发正在确认合法
  14 |      */
  15 |     public static final Integer CHECKING_2  = 2;
  16 | 
  17 |     /**
  18 |      * 确认收益合法完毕
  19 |      */
  20 |     public static final Integer CHECKED_3  = 3;
  21 | 
  22 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/constant/JiaRuHttpCode.java ======

   1 | package com.astrosea.richer.constant;
   2 | 
   3 | 
   4 | public class JiaRuHttpCode {
   5 | 
   6 | 	public static final int SUCCESS = 200;
   7 | 
   8 | 
   9 | 	/**
  10 | 	 * token 状态码
  11 | 	 * 没有token、token 过期、token 不合法
  12 | 	 */
  13 | 	public static final int TOKEN_ERROR = 10003;
  14 | 
  15 | 
  16 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/constant/RedisKeyConstant.java ======

   1 | package com.astrosea.richer.constant;
   2 | 
   3 | public class RedisKeyConstant {
   4 | 
   5 | 
   6 |     public static final String EMAIL = "OKX:WARN:";
   7 |     public static final String BRC_TOKEN_ID = "OKX:TOKEN:ID:";
   8 | 
   9 | 
  10 | 
  11 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/constant/RichConstant.java ======

   1 | package com.astrosea.richer.constant;
   2 | 
   3 | import java.math.BigDecimal;
   4 | 
   5 | public class RichConstant {
   6 | 
   7 |     /**
   8 |      * 稀有度 lv1 数量占总比
   9 |      */
  10 |     public static final BigDecimal LV1 = new BigDecimal("0.50");
  11 | 
  12 |     /**
  13 |      * 稀有度 lv2 数量占总比
  14 |      */
  15 |     public static final BigDecimal LV2 = new BigDecimal("0.12");
  16 | 
  17 |     /**
  18 |      * 稀有度 lv3 数量占总比
  19 |      */
  20 |     public static final BigDecimal LV3 = new BigDecimal("0.09");
  21 | 
  22 |     /**
  23 |      * 稀有度 lv4 数量占总比
  24 |      */
  25 |     public static final BigDecimal LV4 = new BigDecimal("0.09");
  26 | 
  27 |     /**
  28 |      * 稀有度 lv5 数量占总比
  29 |      */
  30 |     public static final BigDecimal LV5 = new BigDecimal("0.11");
  31 | 
  32 |     /**
  33 |      * 稀有度 lv6 数量占总比
  34 |      */
  35 |     public static final BigDecimal LV6 = new BigDecimal("0.05");
  36 | 
  37 | 
  38 | 
  39 | 
  40 |     /**
  41 |      * 按照矿场产量 1.6w 狗狗币算
  42 |      */
  43 | 
  44 |     /**
  45 |      * 每张 lv1 nft 稀有度占百分比  1.0个狗狗币
  46 |      */
  47 |     public static final BigDecimal LV1P = new BigDecimal("0.0000625");
  48 | 
  49 |     /**
  50 |      * 每张 lv2 nft 稀有度占百分比 1.9个狗狗币
  51 |      */
  52 |     public static final BigDecimal LV2P = new BigDecimal("0.00012");
  53 | 
  54 |     /**
  55 |      * 每张 lv3 nft 稀有度占百分比 2.8 个狗狗币
  56 |      */
  57 |     public static final BigDecimal LV3P = new BigDecimal("0.00018");
  58 | 
  59 |     /**
  60 |      * 每张 lv4 nft 稀有度占百分比 4.8个狗狗币
  61 |      */
  62 |     public static final BigDecimal LV4P = new BigDecimal("0.0003");
  63 | 
  64 |     /**
  65 |      * 每张 lv5 nft 稀有度占百分比 9.6 个狗狗币
  66 |      */
  67 |     public static final BigDecimal LV5P = new BigDecimal("0.0006044");
  68 | 
  69 |     /**
  70 |      * 每张 lv6 nft 稀有度占百分比 44.4个狗狗币
  71 |      */
  72 |     public static final BigDecimal LV6P = new BigDecimal("0.00277778");
  73 | 
  74 |     /**
  75 |      * 按照矿场产量 1.6w 狗狗币算
  76 |      */
  77 |     /**
  78 |      * 每张 lv1 nft 稀有度占百分比  1.0个狗狗币
  79 |      */
  80 |     public static final BigDecimal LV1VALUE = new BigDecimal("1");
  81 | 
  82 |     /**
  83 |      * 每张 lv2 nft 稀有度占百分比 2个狗狗币
  84 |      */
  85 |     public static final BigDecimal LV2VALUE = new BigDecimal("2");
  86 | 
  87 |     /**
  88 |      * 每张 lv3 nft 稀有度占百分比 3 个狗狗币
  89 |      */
  90 |     public static final BigDecimal LV3VALUE = new BigDecimal("3");
  91 | 
  92 |     /**
  93 |      * 每张 lv4 nft 稀有度占百分比 5 个狗狗币
  94 |      */
  95 |     public static final BigDecimal LV4VALUE = new BigDecimal("5");
  96 | 
  97 |     /**
  98 |      * 每张 lv5 nft 稀有度占百分比 10 个狗狗币
  99 |      */
 100 |     public static final BigDecimal LV5VALUE = new BigDecimal("10");
 101 | 
 102 |     /**
 103 |      * 每张 lv6 nft 稀有度占百分比 50 个狗狗币
 104 |      */
 105 |     public static final BigDecimal LV6VALUE = new BigDecimal("50");
 106 | 
 107 | 
 108 |     /**
 109 |      * 每日基数 1.5
 110 |      */
 111 |     public static final BigDecimal DECBASE_1_5 = new BigDecimal("1.5");
 112 | 
 113 |     /**
 114 |      * 每日基数 1.5
 115 |      */
 116 |     public static final BigDecimal DECBASE_2_4 = new BigDecimal("2.4");
 117 | 
 118 |     /**
 119 |      * 假面板数据 1000
 120 |      */
 121 |     public static final BigDecimal FAKE_1000 = new BigDecimal("1000.0");
 122 | 
 123 | 
 124 | 
 125 | 
 126 | 
 127 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/constant/MailConst.java ======

   1 | package com.astrosea.richer.constant;
   2 | 
   3 | /**
   4 |  * @Description 邮件常量
   5 |  * @Author 林泽鸿
   6 |  * @Date 2020/4/3 21:13
   7 |  */
   8 | public class MailConst {
   9 |     //你的进行发送邮件的邮箱
  10 |     public static final String USER_NAME = "13750545017@163.com";
  11 |     //授权密码
  12 |     public static final String  PWD_CODE = "XSXKIICNQYXGVRBZ";
  13 |     public static final String MAIL_HOST = "smtp.163.com";
  14 |     public static final String MAIL_SMTP_AUTH = "true";
  15 | 
  16 |     //邮件主题
  17 |     public static final String NOTIFICATION_MAIL_TITLE = "新网易必胜邮件主题";
  18 | 
  19 |     //邮件内容
  20 |     public static final String NOTIFICATION_MAIL_CONTENT = "花西子你有一个新的通知，请前往李佳琪进行查看！";
  21 | 
  22 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/constant/HttpCode.java ======

   1 | package com.astrosea.richer.constant;
   2 | 
   3 | 
   4 | public class HttpCode {
   5 | 
   6 | 	public static final int SUCCESS = 200;
   7 | 
   8 | 	/**
   9 | 	 * 业务错误
  10 | 	 */
  11 | 	public static final int BIZ_ERROR = 1000;
  12 | 
  13 | 	/** 未登录 */
  14 | 	public static final int UN_LOGIN = 1001;
  15 | 
  16 | 	/** 登录过期 */
  17 | 	public static final int LOGIN_EXPIRED = 1002;
  18 | 
  19 | 	/**
  20 | 	 * RPC服务错误
  21 | 	 */
  22 | 	public static final int RPC_ERROR = 3000;
  23 | 
  24 | 	/**
  25 | 	 * 请求参数不合法
  26 | 	 */
  27 | 	public static final int BAD_REQUEST_4000 = 4000;
  28 | 
  29 | 	/**
  30 | 	 * 内部错误
  31 | 	 */
  32 | 	public static final int MYSQL_ERROR_5001 = 5001;
  33 | 
  34 | 	/**
  35 | 	 * 内部错误
  36 | 	 */
  37 | 	public static final int INNER_ERROR_5000 = 5000;
  38 | 
  39 | 	/**
  40 | 	 * claim 不合法
  41 | 	 */
  42 | 	public static final int CLAIM_NOT_ALLOW_5002 = 5002;
  43 | 
  44 | 
  45 | 
  46 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/constant/ShareConstant.java ======

   1 | package com.astrosea.richer.constant;
   2 | 
   3 | public class ShareConstant {
   4 | 
   5 |     /**
   6 |      * 邀请码未被分享
   7 |      */
   8 |     public static final int UN_SHARED_0 = 0;
   9 | 
  10 |     /**
  11 |      * 邀请码已被分享
  12 |      */
  13 |     public static final int SHARED_1 = 1;
  14 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/constant/UrlConstant.java ======

   1 | package com.astrosea.richer.constant;
   2 | 
   3 | public class UrlConstant {
   4 | 
   5 |     public static final String HTTPS_IPFS = "https://dogepower.xyz/ipfs/";
   6 |     public static final String HTTP_IPFS = "http://mint.astrosea.io/ipfs/";
   7 | 
   8 | 
   9 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/constant/RpcCode.java ======

   1 | package com.astrosea.richer.constant;
   2 | 
   3 | /**
   4 |  * 响应状态码
   5 |  *
   6 |  * @author hongmao.xi
   7 |  * @date 11/10/21
   8 |  */
   9 | public class RpcCode {
  10 | 
  11 | 	public static final int SUCCESS = 0;
  12 | 
  13 | 	public static final int BIZ_ERROR = 1000;
  14 | 
  15 | 	public static final int BAD_REQUEST = 4000;
  16 | 
  17 | 	public static final int INNER_ERROR = 5000;
  18 | 
  19 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/constant/NftConstant.java ======

   1 | package com.astrosea.richer.constant;
   2 | 
   3 | import java.util.ArrayList;
   4 | import java.util.Arrays;
   5 | import java.util.List;
   6 | 
   7 | public class NftConstant {
   8 |     public static final List<Integer> NFT_LV6_IDS = new ArrayList<>(Arrays.asList(
   9 |             9994, 7766, 6336, 6254, 5868, 4504, 4200, 3443, 3350, 2933, 2249, 2023, 1620, 970, 777, 555, 138, 3
  10 |     ));
  11 | 
  12 | 
  13 |     /**
  14 |      * 第一波发售
  15 |      */
  16 |     public static final String FIRST_RELEASE_1  = "1";
  17 | 
  18 | 
  19 | 
  20 |     /**
  21 |      * 分发状态
  22 |      */
  23 |     public static final int UNSEND_0 = 0;
  24 |     public static final int RECEIVED_1 = 1;
  25 | 
  26 | 
  27 |     /**
  28 |      * 售卖状态
  29 |      */
  30 |     public static final int UNSOLD = 0;// 未出售
  31 | 
  32 |     public static final int SOLD = 1;// 已出售
  33 | 
  34 |     /**
  35 |      * 缴税状态
  36 |      */
  37 |     public static final int UNTAXED = 0;// 未缴税
  38 |     public static final int TAX_PAID = 1;// 已缴税
  39 | 
  40 | 
  41 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/oss/Demo/GetImgDemo.java ======

   1 | package com.astrosea.richer.oss.Demo;
   2 | 
   3 | import com.aliyun.oss.ClientException;
   4 | import com.aliyun.oss.OSS;
   5 | import com.aliyun.oss.OSSClientBuilder;
   6 | import com.aliyun.oss.OSSException;
   7 | import com.aliyun.oss.common.auth.CredentialsProviderFactory;
   8 | import com.aliyun.oss.common.auth.EnvironmentVariableCredentialsProvider;
   9 | import com.aliyun.oss.model.OSSObject;
  10 | 
  11 | import java.io.BufferedReader;
  12 | import java.io.InputStream;
  13 | import java.io.InputStreamReader;
  14 | 
  15 | public class GetImgDemo {
  16 | 
  17 |     public static void main(String[] args) throws Exception {
  18 |         // Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。
  19 |         String endpoint = "https://oss-cn-hangzhou.aliyuncs.com";
  20 |         // 从环境变量中获取访问凭证。运行本代码示例之前，请确保已设置环境变量OSS_ACCESS_KEY_ID和OSS_ACCESS_KEY_SECRET。
  21 |         EnvironmentVariableCredentialsProvider credentialsProvider = CredentialsProviderFactory.newEnvironmentVariableCredentialsProvider();
  22 |         // 填写Bucket名称，例如examplebucket。
  23 |         String bucketName = "examplebucket";
  24 |         // 填写Object完整路径，例如exampledir/exampleobject.txt。Object完整路径中不能包含Bucket名称。
  25 |         String objectName = "exampledir/exampleobject.txt";
  26 | 
  27 |         // 创建OSSClient实例。
  28 |         OSS ossClient = new OSSClientBuilder().build(endpoint, credentialsProvider);
  29 | 
  30 |         try {
  31 |             // 调用ossClient.getObject返回一个OSSObject实例，该实例包含文件内容及文件元信息。
  32 |             OSSObject ossObject = ossClient.getObject(bucketName, objectName);
  33 |             // 调用ossObject.getObjectContent获取文件输入流，可读取此输入流获取其内容。
  34 |             InputStream content = ossObject.getObjectContent();
  35 |             if (content != null) {
  36 |                 BufferedReader reader = new BufferedReader(new InputStreamReader(content));
  37 |                 while (true) {
  38 |                     String line = reader.readLine();
  39 |                     if (line == null) break;
  40 |                     System.out.println("\n" + line);
  41 |                 }
  42 |                 // 数据读取完成后，获取的流必须关闭，否则会造成连接泄漏，导致请求无连接可用，程序无法正常工作。
  43 |                 content.close();
  44 |             }
  45 |         } catch (OSSException oe) {
  46 |             System.out.println("Caught an OSSException, which means your request made it to OSS, "
  47 |                     + "but was rejected with an error response for some reason.");
  48 |             System.out.println("Error Message:" + oe.getErrorMessage());
  49 |             System.out.println("Error Code:" + oe.getErrorCode());
  50 |             System.out.println("Request ID:" + oe.getRequestId());
  51 |             System.out.println("Host ID:" + oe.getHostId());
  52 |         } catch (ClientException ce) {
  53 |             System.out.println("Caught an ClientException, which means the client encountered "
  54 |                     + "a serious internal problem while trying to communicate with OSS, "
  55 |                     + "such as not being able to access the network.");
  56 |             System.out.println("Error Message:" + ce.getMessage());
  57 |         } finally {
  58 |             if (ossClient != null) {
  59 |                 ossClient.shutdown();
  60 |             }
  61 |         }
  62 |     }
  63 | 
  64 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/oss/Demo/Demo.java ======

   1 | package com.astrosea.richer.oss.Demo;
   2 | 
   3 | import com.aliyun.oss.ClientException;
   4 | import com.aliyun.oss.OSS;
   5 | import com.aliyun.oss.OSSClientBuilder;
   6 | import com.aliyun.oss.OSSException;
   7 | import com.aliyun.oss.common.auth.CredentialsProviderFactory;
   8 | import com.aliyun.oss.common.auth.EnvironmentVariableCredentialsProvider;
   9 | 
  10 | public class Demo {
  11 | 
  12 |     public static void main(String[] args) throws Exception {
  13 |          // Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。
  14 |         String endpoint = "https://oss-cn-hangzhou.aliyuncs.com";
  15 |         // 强烈建议不要把访问凭证保存到工程代码里，否则可能导致访问凭证泄露，威胁您账号下所有资源的安全。本代码示例以从环境变量中获取访问凭证为例。运行本代码示例之前，请先配置环境变量。
  16 |         EnvironmentVariableCredentialsProvider credentialsProvider = CredentialsProviderFactory.newEnvironmentVariableCredentialsProvider();
  17 |         // 填写Bucket名称，例如examplebucket。
  18 |         String bucketName = "examplebucket";
  19 | 
  20 |         // 创建OSSClient实例。
  21 |         OSS ossClient = new OSSClientBuilder().build(endpoint, credentialsProvider);
  22 | 
  23 |         try {
  24 |             // 创建存储空间。
  25 |             ossClient.createBucket(bucketName);
  26 | 
  27 |         } catch (OSSException oe) {
  28 |             System.out.println("Caught an OSSException, which means your request made it to OSS, "
  29 |                     + "but was rejected with an error response for some reason.");
  30 |             System.out.println("Error Message:" + oe.getErrorMessage());
  31 |             System.out.println("Error Code:" + oe.getErrorCode());
  32 |             System.out.println("Request ID:" + oe.getRequestId());
  33 |             System.out.println("Host ID:" + oe.getHostId());
  34 |         } catch (ClientException ce) {
  35 |             System.out.println("Caught an ClientException, which means the client encountered "
  36 |                     + "a serious internal problem while trying to communicate with OSS, "
  37 |                     + "such as not being able to access the network.");
  38 |             System.out.println("Error Message:" + ce.getMessage());
  39 |         } finally {
  40 |             if (ossClient != null) {
  41 |                 ossClient.shutdown();
  42 |             }
  43 |         }
  44 |     }
  45 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/oss/config/OssConfig.java ======

   1 | package com.astrosea.richer.oss.config;
   2 | 
   3 | import com.aliyun.oss.OSS;
   4 | import com.aliyun.oss.OSSClientBuilder;
   5 | import org.springframework.beans.factory.annotation.Value;
   6 | import org.springframework.boot.SpringBootConfiguration;
   7 | import org.springframework.context.annotation.Bean;
   8 | 
   9 | @SpringBootConfiguration
  10 | public class OssConfig {
  11 | 
  12 |     @Value("${oss.endpoint}")
  13 |     private String endpoint;
  14 | 
  15 |     @Value("${oss.accessKeyId}")
  16 |     private String accessKeyId;
  17 | 
  18 |     @Value("${oss.accessKeySecret}")
  19 |     private String accessKeySecret;
  20 | 
  21 |     @Value("${oss.bucketName}")
  22 |     private String bucketName;
  23 | 
  24 | 
  25 | 
  26 |     @Bean
  27 |     public OSS ossClient() {
  28 |         return new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);
  29 |     }
  30 | 
  31 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/oss/service/OssService.java ======

   1 | package com.astrosea.richer.oss.service;
   2 | 
   3 | public interface OssService {
   4 | 
   5 |     /**
   6 |      * 通过编号获取 nft  url
   7 |      * @param num
   8 |      * @return
   9 |      */
  10 |     String getUrlByNum(Integer num);
  11 | 
  12 |     /**
  13 |      * 通过编号获取 nft 带域名的 url
  14 |      * @param num
  15 |      * @return
  16 |      */
  17 |     String getEndpointUrlByNum(Integer num);
  18 | 
  19 |     String getUrlByName(String name);
  20 | 
  21 | 
  22 | 
  23 | 
  24 | 
  25 | 
  26 | 
  27 | 
  28 | 
  29 | 
  30 | 
  31 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/oss/service/impl/OssServiceImp.java ======

   1 | package com.astrosea.richer.oss.service.impl;
   2 | 
   3 | import com.aliyun.oss.OSS;
   4 | import com.astrosea.richer.oss.service.OssService;
   5 | import org.springframework.beans.factory.annotation.Autowired;
   6 | import org.springframework.beans.factory.annotation.Value;
   7 | import org.springframework.stereotype.Service;
   8 | 
   9 | import java.net.URL;
  10 | import java.util.Date;
  11 | 
  12 | @Service
  13 | public class OssServiceImp implements OssService {
  14 | 
  15 | 
  16 |     @Autowired
  17 |     OSS oss;
  18 | 
  19 |     @Value("${oss.bucketName}")
  20 |     private String bucketName;
  21 | 
  22 | 
  23 |     @Override
  24 |     public String getUrlByNum(Integer num) {
  25 |         // 将库中的 int 转为 Str
  26 |         String numStr = num.toString();
  27 | 
  28 |         // 填写Object完整路径，例如exampledir/exampleobject.txt。Object完整路径中不能包含Bucket名称。
  29 |         String objectName =  numStr + ".jpeg";
  30 | //        String objectName = "exampledir/exampleobject.txt";
  31 | 
  32 |         // 调用ossClient.getObject返回一个OSSObject实例，该实例包含文件内容及文件元信息。
  33 |         oss.getObject(bucketName, objectName);
  34 | 
  35 |         // 设置签名URL过期时间，单位为毫秒。
  36 |         Date expiration = new Date(new Date().getTime() + 3600 * 1000);
  37 | 
  38 |         // 生成以GET方法访问的签名URL，访客可以直接通过浏览器访问相关内容。
  39 |         URL url = oss.generatePresignedUrl(bucketName, objectName, expiration);
  40 | 
  41 |         // 转为 string
  42 |         String urlStr = url.toString();
  43 |         System.out.println(url);
  44 | 
  45 |         return urlStr;
  46 |     }
  47 | 
  48 |     @Override
  49 |     public String getEndpointUrlByNum(Integer num) {
  50 |         // 将数字转为字符串
  51 |         String numStr = num.toString();
  52 | 
  53 |         // 带域名的 url
  54 |         String urlStr = "www.astrosea.io/nft/"+ numStr +".jpeg ";
  55 | 
  56 |         return urlStr;
  57 |     }
  58 | 
  59 |     @Override
  60 |     public String getUrlByName(String name) {
  61 | 
  62 |         String objectName = name;
  63 | 
  64 |         // 调用ossClient.getObject返回一个OSSObject实例，该实例包含文件内容及文件元信息。
  65 |         oss.getObject(bucketName, objectName);
  66 | 
  67 |         // 设置签名URL过期时间，单位为毫秒。
  68 |         Date expiration = new Date(new Date().getTime() + 3600 * 1000);
  69 | 
  70 |         // 生成以GET方法访问的签名URL，访客可以直接通过浏览器访问相关内容。
  71 |         URL url = oss.generatePresignedUrl(bucketName, objectName, expiration);
  72 | 
  73 |         // 转为 string
  74 |         String urlStr = url.toString();
  75 |         System.out.println(urlStr);
  76 | 
  77 |         return urlStr;
  78 |     }
  79 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/aspect/RedissonLockAspect.java ======

   1 | package com.astrosea.richer.aspect;//package com.astrosea.richer.aspect;
   2 | //
   3 | //import cn.hutool.core.util.StrUtil;
   4 | //import cn.hutool.log.Log;
   5 | //import com.astrosea.richer.annotation.RedissonLock;
   6 | //import org.apache.ibatis.logging.LogFactory;
   7 | //import org.aspectj.lang.ProceedingJoinPoint;
   8 | //import org.aspectj.lang.annotation.Around;
   9 | //import org.aspectj.lang.annotation.Aspect;
  10 | //import org.redisson.api.RedissonClient;
  11 | //import org.redisson.client.RedisException;
  12 | //import org.springframework.beans.factory.annotation.Autowired;
  13 | //import org.springframework.stereotype.Component;
  14 | //import org.redisson.api.RLock;
  15 | //
  16 | //import java.util.concurrent.TimeUnit;
  17 | //
  18 | //
  19 | ///**
  20 | // * 基于 Redisson 分布式锁注解组件实现
  21 | // */
  22 | //@Aspect
  23 | //@Component
  24 | //public class RedissonLockAspect {
  25 | //
  26 | //	private static final Log log = (Log) LogFactory.getLog(RedissonLockAspect.class);
  27 | //
  28 | //	@Autowired
  29 | //	private RedissonClient redissonClient;
  30 | //
  31 | //	// 环绕通知注解，拦截使用了 @RedissonLock 注解的方法
  32 | //	@Around("@annotation(redissonLock)")
  33 | //	public Object around(ProceedingJoinPoint point, RedissonLock redissonLock) {
  34 | //		// 获取 @RedissonLock 注解中指定的锁定 key
  35 | //		String key = redissonLock.key();
  36 | //		if (StrUtil.isEmpty(key)) {
  37 | //			throw new RuntimeException("The key of a distributed lock cannot be empty！");
  38 | //		}
  39 | //
  40 | //		// 获取 @RedissonLock 注解中指定的等待时间，默认为 10 秒
  41 | //		long waitTime = redissonLock.waitTime();
  42 | //
  43 | //		// 获取 @RedissonLock 注解中指定的 key 存活时间，默认为 30 秒
  44 | //		long leaseTime = redissonLock.leaseTime();
  45 | //
  46 | //		// 获取 Redisson 分布式锁 RLock 的实例
  47 | //		RLock lock = redissonClient.getLock("lock_" + key);
  48 | //		try {
  49 | //			// 尝试获取锁，等待时间为 waitTime 秒，锁存活时间为 leaseTime 秒
  50 | //			boolean isLocked = lock.tryLock(waitTime, leaseTime, TimeUnit.SECONDS);
  51 | //
  52 | //			if (isLocked) {
  53 | //				// 执行业务逻辑方法
  54 | //				return point.proceed();
  55 | //			} else {
  56 | //				log.info("当前资源 " + key + " 被其他线程占用！");
  57 | //			}
  58 | //
  59 | //		} catch (RedisException | InterruptedException e) {
  60 | //			log.error("资源" + key + "加锁失败", e);
  61 | //			throw new RuntimeException("资源" + key + "加锁失败", e);
  62 | //		} catch (Throwable t) {
  63 | //			log.error("执行带有分布式锁 " + key + " 的业务逻辑时发生错误。", t);
  64 | //			throw new RuntimeException("执行带有分布式锁 " + key + " 的业务逻辑时发生错误。", t);
  65 | //		} finally {
  66 | //			// 无需判断当前线程是否持有锁，Redisson 已经集成了此功能
  67 | //			lock.unlock();
  68 | //			log.info("释放锁 + key");
  69 | //		}
  70 | //		//暂时先返回 null，根据后续的需求扩展
  71 | //		return null;
  72 | //	}
  73 | //}


// ====== FILE: ./src/main/java/com/astrosea/richer/service/ClaimService.java ======

   1 | package com.astrosea.richer.service;
   2 | 
   3 | import com.astrosea.richer.param.ClaimCheckParam;
   4 | import com.astrosea.richer.response.Response;
   5 | 
   6 | import java.math.BigDecimal;
   7 | 
   8 | public interface ClaimService {
   9 | 
  10 | 
  11 |     /**
  12 |      * 领取收益总接口
  13 |      * @return
  14 |      */
  15 |     Response claim(String address);
  16 | 
  17 |     Boolean claimJudger(String address);
  18 | 
  19 | 
  20 |     Long creatOrder(String address, BigDecimal gains);
  21 | 
  22 |     Response claimCheck(ClaimCheckParam param);
  23 | 
  24 |     Response chainClaim(String address, BigDecimal reward, String orderId);
  25 | 
  26 | 
  27 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/service/ScriptService.java ======

   1 | package com.astrosea.richer.service;
   2 | 
   3 | import com.astrosea.richer.param.ClaimParam;
   4 | import com.astrosea.richer.param.NftResenderParam;
   5 | import com.astrosea.richer.response.Response;
   6 | 
   7 | import java.math.BigDecimal;
   8 | 
   9 | public interface ScriptService {
  10 | 
  11 |     Response claim(ClaimParam param);
  12 | 
  13 |     Response nftResender(NftResenderParam param);
  14 | 
  15 |     /**
  16 |      * 创建订单数据并返回订单号
  17 |      *
  18 |      * @param nftId
  19 |      * @param address
  20 |      * @param cost
  21 |      * @param mintAmt
  22 |      * @param style
  23 |      * @param status
  24 |      * @return
  25 |      */
  26 |     Long creatResendOrder(Integer nftId, String address , BigDecimal cost , Integer mintAmt, Integer style, Integer status);
  27 | 
  28 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/service/SpiderService.java ======

   1 | package com.astrosea.richer.service;
   2 | 
   3 | public interface SpiderService {
   4 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/service/TimeTaskService.java ======

   1 | package com.astrosea.richer.service;
   2 | 
   3 | import com.astrosea.richer.param.CreatGainParam;
   4 | import com.astrosea.richer.response.Response;
   5 | import com.astrosea.richer.vo.UpdateGainsVo;
   6 | 
   7 | import java.math.BigDecimal;
   8 | import java.sql.SQLException;
   9 | import java.time.LocalDate;
  10 | 
  11 | public interface TimeTaskService {
  12 | 
  13 |     /**
  14 |      * 1.填入收益数据
  15 |      * 2.nft 总表扫描，获取所有的持有者数据
  16 |      * 3.再到 rich_reward_log 表中累加收益数据
  17 |      */
  18 |     Response<UpdateGainsVo> updateGains(CreatGainParam param) throws SQLException;
  19 | 
  20 |     /**
  21 |      * @param base
  22 |      * @param rewBase
  23 |      * @param realDecBase
  24 |      * @param today
  25 |      * @param curHolderNum
  26 |      * @return
  27 |      */
  28 |     Response updateBase(BigDecimal base, BigDecimal rewBase, BigDecimal realDecBase,LocalDate today, Long curHolderNum) throws SQLException;
  29 | 
  30 | 
  31 |     /**
  32 |      * 1.先校验今天是否已经更新，避免重复累加
  33 |      * 2.得出持有者数据
  34 |      * 3.根据持有者计算 base * decBase = 1.5 rewBase
  35 |      * 4.根据 1.5 rewBase 得出 2.4 rewBase
  36 |      */
  37 |     Response<UpdateGainsVo> timeTaskUpdateGains() throws SQLException;
  38 | 
  39 |     /**
  40 |      * @param base
  41 |      * @param decBase
  42 |      * @param now
  43 |      * @param curHolderNum
  44 |      * @param yesterdayBase
  45 |      * @return
  46 |      */
  47 |     Response timeTaskUpdateBase(BigDecimal base, BigDecimal decBase, LocalDate now, Long curHolderNum, BigDecimal yesterdayBase) throws SQLException;
  48 | 
  49 | 
  50 |     Response updateBaseRew(Integer newBaseRew);
  51 | 
  52 | 
  53 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/service/RichService.java ======

   1 | package com.astrosea.richer.service;
   2 | 
   3 | 
   4 | import com.astrosea.richer.param.QueryCoinsParam;
   5 | import com.astrosea.richer.response.Response;
   6 | import com.astrosea.richer.vo.QueryCoinsVo;
   7 | 
   8 | public interface RichService {
   9 | 
  10 | 
  11 | 
  12 |     Response<QueryCoinsVo> query(QueryCoinsParam param);
  13 | 
  14 | 
  15 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/service/impl/ScriptImp.java ======

   1 | package com.astrosea.richer.service.impl;
   2 | 
   3 | import cn.hutool.http.HttpException;
   4 | import cn.hutool.http.HttpResponse;
   5 | import cn.hutool.http.HttpUtil;
   6 | import cn.hutool.json.JSONObject;
   7 | import cn.hutool.json.JSONUtil;
   8 | import com.astrosea.richer.constant.HttpCode;
   9 | import com.astrosea.richer.mapper.AstroResenderMapper;
  10 | import com.astrosea.richer.mapper.OrderMapper;
  11 | import com.astrosea.richer.mapper.Tax1of1NftDoMapper;
  12 | import com.astrosea.richer.mapper.TaxAllNftDoMapper;
  13 | import com.astrosea.richer.param.ClaimParam;
  14 | import com.astrosea.richer.param.NftResenderParam;
  15 | import com.astrosea.richer.pojo.OrderDo;
  16 | import com.astrosea.richer.pojo.ResenderOrderDo;
  17 | import com.astrosea.richer.pojo.Tax1of1NftDo;
  18 | import com.astrosea.richer.pojo.TaxAllNftDo;
  19 | import com.astrosea.richer.response.Response;
  20 | import com.astrosea.richer.service.ScriptService;
  21 | import com.astrosea.richer.utils.RarityUtil;
  22 | import com.astrosea.richer.utils.SHA256Util;
  23 | import com.astrosea.richer.vo.GiveVo;
  24 | import com.astrosea.richer.vo.dto.NftResenderDto;
  25 | import com.baomidou.mybatisplus.core.toolkit.IdWorker;
  26 | import com.baomidou.mybatisplus.core.toolkit.Wrappers;
  27 | import lombok.extern.slf4j.Slf4j;
  28 | import org.slf4j.Logger;
  29 | import org.slf4j.LoggerFactory;
  30 | import org.springframework.beans.factory.annotation.Autowired;
  31 | import org.springframework.stereotype.Service;
  32 | import org.springframework.transaction.annotation.Transactional;
  33 | 
  34 | import java.math.BigDecimal;
  35 | import java.time.LocalDateTime;
  36 | import java.util.ArrayList;
  37 | 
  38 | import static com.astrosea.richer.constant.OrderConstant.CHECKING_2;
  39 | import static com.astrosea.richer.constant.OrderConstant.GIVING_1;
  40 | import static com.astrosea.richer.constant.PayConstant.*;
  41 | 
  42 | @Slf4j
  43 | 
  44 | @Service
  45 | public class ScriptImp implements ScriptService {
  46 | 
  47 |     private static final Logger logger = LoggerFactory.getLogger(ScriptService.class);
  48 | 
  49 | 
  50 |     @Autowired
  51 |     OrderMapper orderMapper;
  52 | 
  53 |     @Autowired
  54 |     TaxAllNftDoMapper nftMapper;
  55 | 
  56 |     @Autowired
  57 |     Tax1of1NftDoMapper of1NftDoMapper;
  58 | 
  59 |     @Autowired
  60 |     AstroResenderMapper resenderMapper;
  61 | 
  62 |     @Transactional
  63 |     @Override
  64 |     public Response claim(ClaimParam param) {
  65 | 
  66 |         String address = "DGJsyH8oEr5i3UpgyUHvmn331D8VJ3KCwe";
  67 |         log.info("claim address{}", address);
  68 |         BigDecimal reward = new BigDecimal("0.1");
  69 | 
  70 |         if (true) {
  71 | 
  72 |             // 订单 id
  73 |             Long orderId = creatOrder(address, reward);
  74 | 
  75 |             // 构建收益数据
  76 |             GiveVo giveVo = new GiveVo();
  77 |             giveVo.setAddress(address);// 收益接收人
  78 |             giveVo.setAmount(reward);// 收益数
  79 |             giveVo.setOrderId(orderId.toString());
  80 | 
  81 |             // 构建盐
  82 |             String json = JSONUtil.toJsonStr(giveVo);
  83 |             String salt = "CFIrxG7nDq4h2TofxTGlmm220E7UI2JBxf";
  84 | 
  85 |             // json 加盐
  86 |             String jsonSalt = json + salt;
  87 | 
  88 |             // 256 盐
  89 |             String sha = SHA256Util.encrypt(jsonSalt);
  90 | 
  91 |             // 构造请求体 jsonObj
  92 |             JSONObject requestBody = new JSONObject();
  93 |             requestBody.set("address", address);
  94 |             requestBody.set("amount", reward);
  95 |             requestBody.set("orderId", orderId);
  96 |             requestBody.set("sha", sha);
  97 | 
  98 | 
  99 | 
 100 |             // 构造链上 url
 101 |             String chainUrl = "http://61.224.66.40:3000/claim";
 102 | 
 103 |             try {
 104 |                 // 发送 http 请求给链上
 105 |                 HttpResponse response = HttpUtil.createPost(chainUrl)
 106 |                         .body(requestBody.toString())// 请求体
 107 |                         .timeout(30000)// 设置超时时间（单位：毫秒）
 108 |                         .execute();
 109 |                 // 打印返回结果日志
 110 |                 log.info("请求链上接口响应结果 : {}", response);
 111 | 
 112 |                 // 响应结果判断
 113 |                 int status = response.getStatus();
 114 | 
 115 | 
 116 | 
 117 |                 if (status == 200) {
 118 | 
 119 |                     Long responseOrderId = Long.valueOf(requestBody.get("orderId").toString());
 120 | 
 121 |                     int update = orderMapper.update(null, Wrappers.lambdaUpdate(OrderDo.class)
 122 |                             .eq(OrderDo::getOrderId, responseOrderId)
 123 |                             .set(OrderDo::getStatus, CHECKING_2));
 124 | 
 125 |                     // 返回领取成功的响应
 126 |                     return Response.success();
 127 | 
 128 |                 } else {
 129 |                     switch (status) {
 130 |                         case 400:
 131 |                             // 传参错误
 132 |                             log.info("传参错误");
 133 |                         case 401:
 134 |                             // 认证不通过
 135 |                             log.info("认证不通过");
 136 |                         case 403:
 137 |                             // ip 不在白名单
 138 |                             log.info("ip 不在白名单");
 139 |                         case 500:
 140 |                             // 服务器无法处理
 141 |                             log.info("服务器无法处理");
 142 |                             break;
 143 |                         default:
 144 |                             // 收益领取未知错误
 145 |                             log.info("收益领取未知错误");
 146 |                     }
 147 |                     log.info("收益领取错误:{}" ,response);
 148 |                     return Response.error(1000, "claim error" + status);
 149 |                 }
 150 | 
 151 |             } catch (HttpException e) {
 152 |                 // 处理 Http 请求发生异常的情况
 153 |                 e.printStackTrace();
 154 |                 log.info("请求链上接口响应结果异常 : {}", e);
 155 |                 return Response.error(HttpCode.BIZ_ERROR, e.toString());
 156 |             }
 157 | 
 158 |         } else {
 159 |             return Response.successMsg(null, "Received earnings or ineligible for earnings");
 160 |         }
 161 | 
 162 |     }
 163 | 
 164 |     @Override
 165 |     public Response nftResender(NftResenderParam param) {
 166 | 
 167 |         // 获取 nft 信息和创建重发订单
 168 |         NftResenderDto dto = getNftResendInfo(param.getNftId(), param.getAddress(),  new BigDecimal(param.getCost()));
 169 | 
 170 |         String responseStr = "";
 171 |         int statusCode = 0;
 172 | 
 173 |         // 构建盐
 174 |         String json = JSONUtil.toJsonStr(dto);
 175 |         String salt = "CFIrxG7nDq4h2TofxTGlmm220E7UI2JBxf";
 176 |         // json 加盐
 177 |         String jsonSalt = json + salt;
 178 |         // 256 盐
 179 |         String sha = SHA256Util.encrypt(jsonSalt);
 180 |         // 构造请求体 jsonObj
 181 |         JSONObject requestBody = new JSONObject();
 182 | 
 183 |         requestBody.set("orderId", dto.getOrderId());
 184 |         requestBody.set("from", dto.getFrom());
 185 |         requestBody.set("nftUtxo", dto.getNftUtxo());
 186 |         requestBody.set("toAddress", dto.getToAddress());
 187 |         requestBody.set("sha", sha);
 188 | 
 189 |         System.out.println("requestBody:"+requestBody);
 190 |         System.out.println("json:" + json);
 191 |         System.out.println("orderId:"+ dto.getOrderId());
 192 |         System.out.println("from:"+ dto.getFrom());
 193 |         System.out.println("nftUtxo:"+ dto.getNftUtxo());
 194 |         System.out.println("sha:"+ sha);
 195 | 
 196 |         // 构造 http 请求 url
 197 |         String chainUrl = "http://94.130.49.158:3000/resendNft";// 线上
 198 | //            String chainUrl = "http://192.168.2.51:3000/claim";// 本地
 199 | 
 200 |         // 发送 http 请求给链上
 201 |         HttpResponse response = HttpUtil.createPost(chainUrl)
 202 |                 .body(requestBody.toString())// 请求体
 203 |                 .timeout(100000)// 设置超时时间（单位：毫秒）
 204 |                 .execute();
 205 |         logger.info("补发响应 response:{}", response);
 206 | 
 207 |         System.out.println("response" + response.toString());
 208 | 
 209 | 
 210 |         /**
 211 |          * 根据状态码返回响应信息 msg 和 状态码 statusCode 给前端
 212 |          */
 213 |         // 打印信息
 214 |         statusCode = response.getStatus();
 215 |         log.info("statusCode:{}", statusCode);
 216 |         responseStr = response.toString();
 217 |         String bodyStr = response.body().toString();
 218 |         log.info("responseStr:{}", responseStr);
 219 | 
 220 |         /**
 221 |          * 补发订单回调，失败也别影响正常流程
 222 |          */
 223 |         resenderMapper.update(null, Wrappers.lambdaUpdate(ResenderOrderDo.class)
 224 |                 .eq(ResenderOrderDo::getOrderId, dto.getOrderId())
 225 |                 .set(ResenderOrderDo::getResponseLog, bodyStr)
 226 |                 .set(ResenderOrderDo::getPayStatus, RESEND_DONE_4));// 存储响应
 227 | 
 228 | 
 229 |         return Response.successMsg("responseStr:"+responseStr+"statusCode:"+statusCode);
 230 |     }
 231 | 
 232 |     public static void main(String[] args) {
 233 | 
 234 | 
 235 | 
 236 |         JSONObject requestBody = new JSONObject();
 237 | 
 238 |     }
 239 | 
 240 |     public NftResenderDto getNftResendInfo(Integer nftId, String address , BigDecimal cost) {
 241 | 
 242 |         NftResenderDto dto = new NftResenderDto();
 243 | 
 244 |         /***
 245 |          * 获取 nft 链上数据
 246 |          */
 247 |         // 稀有 nft 补发
 248 |         if (RarityUtil.isLV1(nftId)) {
 249 |             Tax1of1NftDo of1NftDo = of1NftDoMapper.selectOne(Wrappers.lambdaQuery(Tax1of1NftDo.class)
 250 |                     .select(Tax1of1NftDo::getNftUtxo, Tax1of1NftDo::getAddress)
 251 |                     .eq(Tax1of1NftDo::getNftId, nftId));
 252 |             dto.setNftUtxo(of1NftDo.getNftUtxo());
 253 |             dto.setToAddress(address);
 254 |             dto.setFrom(of1NftDo.getAddress());
 255 |         } else {
 256 |             // 普通 nft 补发
 257 |             TaxAllNftDo nftDo = nftMapper.selectOne(Wrappers.lambdaQuery(TaxAllNftDo.class)
 258 |                     .select(TaxAllNftDo::getNftUtxo, TaxAllNftDo::getAddress)
 259 |                     .eq(TaxAllNftDo::getNftId, nftId));
 260 |             dto.setNftUtxo(nftDo.getNftUtxo());
 261 |             dto.setToAddress(address);
 262 |             dto.setFrom(nftDo.getAddress());
 263 |         }
 264 |         /**
 265 |          * 创建创建派发订单
 266 |          */
 267 |         Long order = creatResendOrder(nftId, address, cost, 1, RESENDER_PAY_3, Received_3);
 268 | 
 269 |         dto.setOrderId(order.toString());
 270 | 
 271 |         return dto;
 272 |     }
 273 | 
 274 |     /**
 275 |      * 创建补发订单
 276 |      * @param address
 277 |      * @param cost
 278 |      * @param mintAmt
 279 |      * @param style
 280 |      * @param status
 281 |      * @return
 282 |      */
 283 |     @Override
 284 |     public Long creatResendOrder(Integer nftId, String address , BigDecimal cost , Integer mintAmt, Integer style, Integer status) {
 285 |         ResenderOrderDo orderDo = new ResenderOrderDo();
 286 |         Long orderId = IdWorker.getId();// 生成订单id，并返回给前端
 287 | 
 288 |         orderDo.setUserUrl(address);// 订单的用户地址
 289 |         orderDo.setPayAmount(cost);// 订单的金额
 290 |         orderDo.setMintAmount(mintAmt);// 订单 mint 的数量
 291 |         orderDo.setStyle(style);// 设置支付身份
 292 |         orderDo.setPayStatus(status);// 设置支付状态
 293 |         orderDo.setOrderId(orderId);// 设置订单号
 294 | 
 295 |         ArrayList<Integer> nftList = new ArrayList<>();
 296 |         nftList.add(nftId);
 297 |         orderDo.setNftList(nftList.toString());// 设置nftId
 298 | 
 299 |         int insert = resenderMapper.insert(orderDo);
 300 |         if (insert == 0) {
 301 |             log.info("Order creation failed, please try again");
 302 |             orderId = -1L;
 303 |             return orderId;
 304 |         }
 305 | 
 306 |         log.info("订单信息 {}", orderDo);
 307 |         return orderId;
 308 |     }
 309 | 
 310 |     public Long creatOrder(String address, BigDecimal gains) {
 311 | 
 312 |         OrderDo orderDo = new OrderDo();
 313 |         Long orderId = IdWorker.getId();
 314 |         // 获取最新领取时间
 315 |         // 获取当前日期和时间
 316 |         LocalDateTime current = LocalDateTime.now();
 317 | 
 318 |         orderDo.setOrderId(orderId);
 319 |         orderDo.setAddress(address);
 320 |         orderDo.setOrderTime(current);
 321 |         orderDo.setRewardAmt(gains);
 322 |         orderDo.setStatus(GIVING_1);
 323 | 
 324 |         int insert = orderMapper.insert(orderDo);
 325 | 
 326 |         if (insert == 0) {
 327 |             return -1L;
 328 |         }
 329 | 
 330 |         return orderId;
 331 |     }
 332 | 
 333 | }
 334 | 



// ====== FILE: ./src/main/java/com/astrosea/richer/service/impl/ClaimImp.java ======

   1 | package com.astrosea.richer.service.impl;
   2 | 
   3 | import cn.hutool.http.HttpException;
   4 | import cn.hutool.http.HttpResponse;
   5 | import cn.hutool.http.HttpUtil;
   6 | import cn.hutool.json.JSONObject;
   7 | import cn.hutool.json.JSONUtil;
   8 | import com.astrosea.richer.mapper.*;
   9 | import com.astrosea.richer.param.ClaimCheckParam;
  10 | import com.astrosea.richer.pojo.OrderDo;
  11 | import com.astrosea.richer.pojo.RichRewardLogDo;
  12 | import com.astrosea.richer.response.Response;
  13 | import com.astrosea.richer.service.ClaimService;
  14 | import com.astrosea.richer.utils.SHA256Util;
  15 | import com.astrosea.richer.vo.GiveVo;
  16 | import com.astrosea.richer.vo.dto.ClaimStatusDto;
  17 | import com.baomidou.mybatisplus.core.toolkit.IdWorker;
  18 | import com.baomidou.mybatisplus.core.toolkit.Wrappers;
  19 | import lombok.extern.slf4j.Slf4j;
  20 | import org.springframework.beans.factory.annotation.Autowired;
  21 | import org.springframework.stereotype.Service;
  22 | import org.springframework.transaction.annotation.Transactional;
  23 | 
  24 | import java.math.BigDecimal;
  25 | import java.time.LocalDate;
  26 | import java.time.LocalDateTime;
  27 | import java.util.Objects;
  28 | 
  29 | import static com.astrosea.richer.constant.HttpCode.BIZ_ERROR;
  30 | import static com.astrosea.richer.constant.HttpCode.CLAIM_NOT_ALLOW_5002;
  31 | import static com.astrosea.richer.constant.OrderConstant.CHECKED_3;
  32 | import static com.astrosea.richer.constant.OrderConstant.GIVING_1;
  33 | 
  34 | 
  35 | @Slf4j
  36 | @Service
  37 | public class ClaimImp implements ClaimService {
  38 | 
  39 |     @Autowired
  40 |     TaxAllNftDoMapper nftMapper;
  41 | 
  42 |     @Autowired
  43 |     RewardBaseMapper rewardBaseMapper;
  44 | 
  45 |     @Autowired
  46 |     OrderMapper orderMapper;
  47 | 
  48 |     @Autowired
  49 |     RichHolderMapper holderMapper;
  50 | 
  51 |     @Autowired
  52 |     RichRewardLogMapper logMapper;
  53 | 
  54 |     /**
  55 |      * 领取收益接口
  56 |      * 1.判断有无资格，无则直接返回 msg
  57 |      * 2.有资格则计算收益有多少
  58 |      * 3.请求链上接口
  59 |      * 4.根据状态码返回响应信息 msg 和 状态码 statusCode
  60 |      *
  61 |      * @param address
  62 |      * @return
  63 |      */
  64 |     @Transactional
  65 |     @Override
  66 |     public Response claim(String address) {
  67 | 
  68 |         /**
  69 |          * 1.判断有无资格，无则直接返回 msg
  70 |          */
  71 |         Boolean couldClaim = claimJudger(address);
  72 | 
  73 |         BigDecimal reward = BigDecimal.ZERO;// 初始化收益值
  74 | 
  75 |         if (!couldClaim) {
  76 |             return Response.successMsg(null, "received earnings or no rights for earnings");
  77 |         } else {
  78 |              reward = reward(address);// 获取收益数据
  79 |         }
  80 | 
  81 |         /**
  82 |          * 3.请求链上接口
  83 |          * 4.根据状态码返回响应信息 msg 和 状态码 statusCode
  84 |          */
  85 |         String orderIdStr = creatOrder(address, reward).toString();// 创建订单id , 订单状态为
  86 |         try {
  87 |             Thread.sleep(1000);
  88 |         } catch (InterruptedException e) {
  89 |             throw new RuntimeException(e);
  90 |         }
  91 |         Response response = chainClaim(address, reward, orderIdStr);// 请求链上获取收益
  92 | 
  93 |         return response;
  94 |     }
  95 | 
  96 |     /**
  97 |      * 1.判断当前用户能不能领取收益
  98 |      *
  99 |      * @param address
 100 |      * @return
 101 |      */
 102 |     @Override
 103 |     public Boolean claimJudger(String address) {
 104 |         if (address == null) {
 105 |             Response.error(BIZ_ERROR, "address cannot be null");
 106 |         }
 107 | 
 108 |         Boolean couldClaim = false;
 109 | 
 110 |         // 获取累加表实体数据
 111 |         RichRewardLogDo logDo = logMapper.selectOne(Wrappers.lambdaQuery(RichRewardLogDo.class)
 112 |                 .eq(RichRewardLogDo::getAddress, address));
 113 |         // 累加收益数据为空
 114 |         if (logDo == null) {
 115 |             return false;
 116 |         }
 117 | 
 118 |         // 获取当前日期和时间
 119 |         LocalDate today = LocalDateTime.now().toLocalDate();
 120 |         // 获取累加收益
 121 |         BigDecimal totalReward = logDo.getTotalReward();
 122 | 
 123 |         // 获取累加收益日期是昨天
 124 |         LocalDate latestUpdateReward = logDo.getUpdateReward();
 125 | 
 126 |         // 累加收益为 0
 127 |         if (totalReward.equals(BigDecimal.ZERO)) {
 128 |             return false;
 129 |         }
 130 | 
 131 |         // 之前从没有没有领取过的情况
 132 |         LocalDate latest = logDo.getLatest();
 133 |         if (logDo != null && latest == null) {
 134 |             return true;
 135 |         }
 136 | 
 137 |         // 获取最新领取时间是今天则不能再领取了
 138 |         if (latest.isEqual(today)) {
 139 |             return false;
 140 |         }
 141 | 
 142 |         // 持有 nft && 当前的收益不为 0 && 最新的领取时间 && 不是今天
 143 |         if (!totalReward.equals(BigDecimal.ZERO) && latest.isBefore(today)) {
 144 |             couldClaim = true;
 145 |         }
 146 | 
 147 |         return couldClaim;
 148 |     }
 149 | 
 150 |     /**
 151 |      * 3.请求领取链接链上接口
 152 |      * 4.根据状态码返回响应信息 msg 和 状态码 statusCode
 153 |      * 5.若请求异常则返回报错堆栈 e 和  状态码 statusCode
 154 |      *
 155 |      * 整个请求都用 try 包上，链上报错也返回200，但会在 msg 中返回状态码中
 156 |      * @param address
 157 |      * @param reward
 158 |      * @param orderIdStr
 159 |      * @return
 160 |      */
 161 |     @Override
 162 |     public Response chainClaim(String address, BigDecimal reward, String orderIdStr) {
 163 | 
 164 |         String responseStr = "";
 165 |         int statusCode = 0;
 166 | 
 167 |         // 构建收益数据
 168 |         GiveVo giveVo = new GiveVo();
 169 |         giveVo.setAddress(address);// 地址
 170 |         giveVo.setAmount(reward);// 收益
 171 |         giveVo.setOrderId(orderIdStr);// 订单 idStr
 172 | 
 173 |         // 构建盐
 174 |         String json = JSONUtil.toJsonStr(giveVo);
 175 |         System.out.println("json:"+json);
 176 |         String salt = "CFIrxG7nDq4h2TofxTGlmm220E7UI2JBxf";
 177 |         // json 加盐
 178 |         String jsonSalt = json + salt;
 179 |         // 256 盐
 180 |         String sha = SHA256Util.encrypt(jsonSalt);
 181 | 
 182 |         try {
 183 |             // 构造请求体 jsonObj
 184 |             JSONObject requestBody = new JSONObject();
 185 |             requestBody.set("address", address);
 186 |             requestBody.set("amount", reward);
 187 |             requestBody.set("orderId", orderIdStr);
 188 |             requestBody.set("sha", sha);
 189 | 
 190 |             System.out.println("requestBody:"+requestBody);
 191 |             System.out.println("amount"+reward);
 192 |             System.out.println("请求体 orderId" + orderIdStr);
 193 |             System.out.println("sha"+sha);
 194 |             // 构造 http 请求 url
 195 |             String chainUrl = "http://94.130.49.158:3000/claim";// 线上
 196 | //            String chainUrl = "http://192.168.2.51:3000/claim";// 本地
 197 | 
 198 |             // 发送 http 请求给链上
 199 |             HttpResponse response = HttpUtil.createPost(chainUrl)
 200 |                     .body(requestBody.toString())// 请求体
 201 |                     .timeout(100000)// 设置超时时间（单位：毫秒）
 202 |                     .execute();
 203 |             System.out.println("response" + response.toString());
 204 | 
 205 |             /**
 206 |              * 4.根据状态码返回响应信息 msg 和 状态码 statusCode 给前端
 207 |              */
 208 |             // 打印信息
 209 |             statusCode = response.getStatus();
 210 |             log.info("statusCode:{}", statusCode);
 211 |             responseStr = response.toString();
 212 |             log.info("responseStr:{}", responseStr);
 213 | 
 214 |             ClaimStatusDto dto = claimStatusJudger(statusCode, responseStr, Long.valueOf(orderIdStr), address);
 215 |             log.warn("claim 服务的响应 {}", dto.getMsg());
 216 |             if (dto.getStatusCode() == 200) {
 217 |                 // 更改订单状态
 218 |                 int update = orderMapper.update(null, Wrappers.lambdaUpdate(OrderDo.class)
 219 |                         .eq(OrderDo::getOrderId, Long.valueOf(orderIdStr))
 220 |                         .set(OrderDo::getStatus, CHECKED_3  ));// 将分发订单更改为正在确认
 221 | 
 222 |                 // 成功:将当前用户的累计收益置 0 , 并且将最新领取时间置为今天
 223 |                 logMapper.update(null, Wrappers.lambdaUpdate(RichRewardLogDo.class)
 224 |                         .eq(RichRewardLogDo::getAddress, address)
 225 |                         .set(RichRewardLogDo::getTotalReward, BigDecimal.ZERO)// 收益数清零
 226 |                         .set(RichRewardLogDo::getLatest, LocalDateTime.now().toLocalDate()));// 最新领取时间更新为今天
 227 | 
 228 |                 // 领取收益成功 状态码200
 229 |                 log.info("{}", dto.getMsg());
 230 |                 return Response.successMsg("claim success");
 231 |             } else {
 232 |                 return Response.successMsg("msg:" +dto.getMsg() + ", code:" + statusCode);
 233 |             }
 234 | 
 235 |         } catch (HttpException e) {
 236 |             // 处理 Http 请求发生异常的情况
 237 |             e.printStackTrace();
 238 |             log.info("请求链上接 响应结果 http 异常 : {}", e);
 239 |             return Response.successMsg("httpException:"+e.getMessage(), "code:"+ statusCode);
 240 |         } catch (Exception e) {
 241 |             // 处理 Http 请求发生异常的情况
 242 |             e.printStackTrace();
 243 |             log.info("请求链上接口响应结果异常 : {}", e);
 244 |             return Response.successMsg("Exception:"+e.getMessage(), "code:"+ statusCode);
 245 |         }
 246 | 
 247 |     }
 248 | 
 249 | 
 250 | 
 251 | 
 252 |     /**
 253 |      * 1.成功 200
 254 |      * 2.其他 520
 255 |      * 3.未知错误 521
 256 |      * @param statusCode
 257 |      * @param chaimResponse
 258 |      * @param orderId
 259 |      * @param address
 260 |      * @return
 261 |      */
 262 |     public ClaimStatusDto claimStatusJudger(Integer statusCode, String chaimResponse, Long orderId , String address) {
 263 |         String msg = "chaimResponse：";
 264 | 
 265 |         if (statusCode == 200) {
 266 |             msg = msg + chaimResponse + ", claim success" + statusCode.toString();
 267 |         } else if (statusCode == 410) {
 268 |             msg = msg + chaimResponse + ", check not right:" + statusCode.toString();
 269 |             statusCode = 520;
 270 |         } else if (statusCode == 400) {
 271 |             msg = msg + chaimResponse + ", already collected within 24 hours:" + statusCode.toString();
 272 |             statusCode = 520;
 273 |         } else if (statusCode == 406){
 274 |             log.info("参数错误");
 275 |             msg = msg + chaimResponse + ", param not allow :" + statusCode.toString();
 276 |             statusCode = 520;
 277 |         } else if (statusCode == 405){
 278 |             log.info("method not allow");
 279 |             msg = msg + chaimResponse + ", method not allow :" + statusCode.toString();
 280 |             statusCode = 520;
 281 |         } else if (statusCode == 401){
 282 |             log.info("sha 错误");
 283 |             msg = msg + chaimResponse + ", sha error :" + statusCode.toString();
 284 |             statusCode = 520;
 285 |         } else if(statusCode == 502){
 286 |             msg = msg + chaimResponse + ", claim service is stop :" + statusCode.toString();
 287 |             statusCode = 520;
 288 |         } else if (statusCode == 403){
 289 |             log.info("ip 不在白名单");
 290 |             msg = msg + chaimResponse + ", not in wl :" + statusCode.toString();
 291 |             statusCode = 520;
 292 |         } else if (statusCode == 500){
 293 |             log.info("链上错误");
 294 |             msg = msg + chaimResponse + ", chain error :" + statusCode.toString();
 295 |             statusCode = 520;
 296 |         } else if (statusCode == 5000){
 297 |             log.info("校验");
 298 |             msg = msg + chaimResponse + ", check error :" + statusCode.toString();
 299 |             statusCode = 520;
 300 |         } else {
 301 |             log.info("收益领取错误:{}" , msg);
 302 |             msg = msg + chaimResponse + ", claim service unknown error :" + statusCode.toString();
 303 |             statusCode = 521;
 304 |         }
 305 | 
 306 |         ClaimStatusDto dto = new ClaimStatusDto();
 307 |         dto.setMsg(msg);
 308 |         dto.setStatusCode(statusCode);
 309 | 
 310 |         return dto;
 311 |     }
 312 | 
 313 |     @Override
 314 |     public Long creatOrder(String address, BigDecimal reward) {
 315 | 
 316 |         OrderDo orderDo = new OrderDo();
 317 |         Long orderId = IdWorker.getId();
 318 |         // 获取最新领取时间
 319 |         // 获取当前日期和时间
 320 |         LocalDateTime current = LocalDateTime.now();
 321 | 
 322 |         orderDo.setOrderId(orderId);
 323 |         orderDo.setAddress(address);
 324 |         orderDo.setOrderTime(current);
 325 |         orderDo.setStatus(GIVING_1);
 326 |         orderDo.setRewardAmt(reward);
 327 | 
 328 |         int insert = orderMapper.insert(orderDo);
 329 | 
 330 |         if (insert == 0) {
 331 |             return -1L;
 332 |         }
 333 | 
 334 |         return orderId;
 335 |     }
 336 | 
 337 |     /**
 338 |      * 此接口只做收益合法性校验
 339 |      * @param param
 340 |      * @return
 341 |      */
 342 |     @Override
 343 |     public Response claimCheck(ClaimCheckParam param) {
 344 | 
 345 |         OrderDo orderDo = orderMapper.selectOneOrder(param.getOrderId());
 346 | 
 347 |         System.out.println("Long orderId:" + param.getOrderId().toString());
 348 | 
 349 |         if (orderDo == null) {
 350 |             return Response.error(CLAIM_NOT_ALLOW_5002, "order not exist");
 351 |         }
 352 | 
 353 |         BigDecimal rewardAmt = orderDo.getRewardAmt();// 订单中的收益数据
 354 | 
 355 |         int orderRes = 0;
 356 |         if (orderDo != null && orderDo.getAddress().equals(param.getAddress()) && Objects.equals(new BigDecimal(String.valueOf(param.getReward())), rewardAmt)){
 357 |             orderRes = orderMapper.update(null, Wrappers.lambdaUpdate(OrderDo.class)
 358 |                     .eq(OrderDo::getOrderId, param.getOrderId())
 359 |                     .set(OrderDo::getStatus, CHECKED_3));
 360 |             return Response.success("allow");
 361 |         } else {
 362 |             return Response.error(CLAIM_NOT_ALLOW_5002, "当前收益发放不合法");
 363 |         }
 364 | 
 365 |     }
 366 | 
 367 | 
 368 | 
 369 | 
 370 |     /**
 371 |      * 有资格的情况查询个人累加收益
 372 |      * @param address
 373 |      * @return
 374 |      */
 375 |     public BigDecimal reward(String address) {
 376 |         RichRewardLogDo logDo = logMapper.selectOne(Wrappers.lambdaQuery(RichRewardLogDo.class)
 377 |                 .eq(RichRewardLogDo::getAddress, address));
 378 | 
 379 |         if (logDo == null) {
 380 |             return BigDecimal.ZERO;
 381 |         }
 382 | 
 383 |         BigDecimal totalReward = logDo.getTotalReward();
 384 |         return totalReward;
 385 |     }
 386 | 
 387 | 
 388 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/service/impl/TimeTaskImp.java ======

   1 | package com.astrosea.richer.service.impl;
   2 | 
   3 | import com.astrosea.richer.mapper.*;
   4 | import com.astrosea.richer.param.CreatGainParam;
   5 | import com.astrosea.richer.pojo.RichBaseDo;
   6 | import com.astrosea.richer.pojo.RichRewardLogDo;
   7 | import com.astrosea.richer.response.Response;
   8 | import com.astrosea.richer.service.TimeTaskService;
   9 | import com.astrosea.richer.utils.RandomUtil;
  10 | import com.astrosea.richer.vo.BaseRewVo;
  11 | import com.astrosea.richer.vo.UpdateGainsVo;
  12 | import com.astrosea.richer.vo.dto.HolderDto;
  13 | import com.astrosea.richer.vo.dto.TodayRewDto;
  14 | import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
  15 | import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
  16 | import com.baomidou.mybatisplus.core.toolkit.Wrappers;
  17 | import lombok.extern.slf4j.Slf4j;
  18 | import org.springframework.beans.factory.annotation.Autowired;
  19 | import org.springframework.stereotype.Service;
  20 | import org.springframework.transaction.annotation.Transactional;
  21 | 
  22 | import java.math.BigDecimal;
  23 | import java.math.RoundingMode;
  24 | import java.sql.SQLException;
  25 | import java.time.LocalDate;
  26 | import java.time.LocalDateTime;
  27 | import java.util.List;
  28 | 
  29 | import static com.astrosea.richer.constant.HttpCode.MYSQL_ERROR_5001;
  30 | import static com.astrosea.richer.constant.RichConstant.*;
  31 | 
  32 | @Slf4j
  33 | @Service
  34 | public class TimeTaskImp implements TimeTaskService {
  35 | 
  36 |     @Autowired
  37 |     TaxAllNftDoMapper nftMapper;
  38 | 
  39 |     @Autowired
  40 |     RichHolderMapper holderMapper;
  41 | 
  42 |     @Autowired
  43 |     RewardBaseMapper rewardBaseMapper;
  44 | 
  45 |     @Autowired
  46 |     OrderMapper orderMapper;
  47 | 
  48 |     @Autowired
  49 |     RichRewardLogMapper logMapper;
  50 | 
  51 |     @Autowired
  52 |     Tax1of1NftDoMapper of1NftDoMapper;
  53 | 
  54 |     @Autowired
  55 |     OperatorLogMapper operatorMapper;
  56 | 
  57 |     /**
  58 |      * 1.填写当前的矿场收益
  59 |      * 2.计算当前所有用户的持有情况
  60 |      * 3.根据持有情况累加今天的收益
  61 |      * @param param
  62 |      * @return
  63 |      * @throws SQLException
  64 |      */
  65 |     @Transactional
  66 |     @Override
  67 |     public Response<UpdateGainsVo> updateGains(CreatGainParam param) throws SQLException {
  68 | 
  69 | 
  70 |         // 获取精确到天的日期数据（今天
  71 |         LocalDate todayData = LocalDateTime.now().toLocalDate();
  72 | 
  73 |         // 获取 base
  74 |         BigDecimal fakeRewBase = param.getFakeRewBase();
  75 | 
  76 |         // 关系到今天收益的真实基数
  77 |         BigDecimal realDecBase = param.getRealDecBase();
  78 | 
  79 |         BigDecimal base = BigDecimal.ZERO;
  80 | 
  81 |         /**
  82 |          * 校验今天有无更新过矿场产出数据
  83 |          */
  84 |         RichBaseDo baseDo = rewardBaseMapper.selectOne(Wrappers.lambdaQuery(RichBaseDo.class)
  85 |                 .eq(RichBaseDo::getRewData, todayData));
  86 |         if (baseDo != null) {
  87 |             return Response.successMsg(null, "already fill today");
  88 |         }
  89 | 
  90 | 
  91 |         /**
  92 |          * 1.计算当前所有交了税用户的持有情况
  93 |          */
  94 |         List<HolderDto> holderList = nftMapper.getNftCountByRarity();
  95 | 
  96 |         for (HolderDto nftHolderDto : holderList) {
  97 | 
  98 |             // 计算单个持有者的收益(按照接口的参数填写
  99 |             TodayRewDto dto = count(nftHolderDto, realDecBase);
 100 | 
 101 |             // 累加 base
 102 |             base = base.add(dto.getPersonalBase());
 103 | 
 104 |             // update 单个持有者收益数据 log
 105 |             Response response = personalClaimUpdate(nftHolderDto.getAddress(), dto.getPersonalRewBase(), todayData);
 106 |         }
 107 | 
 108 |         /**
 109 |          * 3.填写当前的矿场收益
 110 |          */
 111 |         Response response = updateBase(base , fakeRewBase, realDecBase, todayData, Long.valueOf(holderList.size()));
 112 |         if (response.getCode() == MYSQL_ERROR_5001) {
 113 |             return response;
 114 |         }
 115 | 
 116 | 
 117 |         /**
 118 |          * 构建当天的持有返回数据
 119 |          */
 120 |         UpdateGainsVo vo = new UpdateGainsVo();
 121 |         vo.setBase(base);
 122 |         vo.setFakeDecBase(param.getFakeRewBase());
 123 |         vo.setRealRewBase(base.multiply(realDecBase));
 124 |         vo.setRealDecBase(realDecBase);
 125 |         vo.setFakeDecBase(realDecBase);
 126 |         vo.setToday(todayData);
 127 |         vo.setHolderList(holderList);
 128 |         vo.setCurHolderNum(holderList.size());
 129 | 
 130 |         return Response.success(vo);
 131 |     }
 132 | 
 133 |     /**
 134 |      * 计算单个持有者的收益
 135 |      * @param nftHolderDto
 136 |      * @param realDecBase
 137 |      * @return
 138 |      */
 139 |     public TodayRewDto count(HolderDto nftHolderDto, BigDecimal realDecBase) {
 140 | 
 141 |         // 获取当前持有者的 nft 持有数据, 转为 BigDecimal
 142 |         BigDecimal lv1amt = BigDecimal.valueOf(nftHolderDto.getLv1amt());
 143 |         BigDecimal lv2amt = BigDecimal.valueOf(nftHolderDto.getLv2amt());
 144 |         BigDecimal lv3amt = BigDecimal.valueOf(nftHolderDto.getLv3amt());
 145 |         BigDecimal lv4amt = BigDecimal.valueOf(nftHolderDto.getLv4amt());
 146 |         BigDecimal lv5amt = BigDecimal.valueOf(nftHolderDto.getLv5amt());
 147 |         BigDecimal lv6amt = BigDecimal.valueOf(nftHolderDto.getLv6amt());
 148 | 
 149 |         // 计算当天的收益
 150 |         BigDecimal todayBase = lv1amt.multiply(LV1VALUE)
 151 |                 .add(lv2amt.multiply(LV2VALUE))
 152 |                 .add(lv3amt.multiply(LV3VALUE))
 153 |                 .add(lv4amt.multiply(LV4VALUE))
 154 |                 .add(lv5amt.multiply(LV5VALUE))
 155 |                 .add(lv6amt.multiply(LV6VALUE))
 156 |                 .setScale(1, RoundingMode.HALF_UP);// 将收益制约为1位小数
 157 | 
 158 |         BigDecimal todayRealBase = todayBase.multiply(realDecBase)
 159 |                 .setScale(1, RoundingMode.HALF_UP);// 将收益制约为1位小数
 160 | 
 161 |         TodayRewDto dto = new TodayRewDto();
 162 | 
 163 |         dto.setPersonalBase(todayBase);
 164 |         dto.setPersonalRewBase(todayRealBase);
 165 | 
 166 |         return dto;
 167 |     }
 168 | 
 169 |     /**
 170 |      * 填写当天的收益基数
 171 |      *
 172 |      * @param base
 173 |      * @param rewBase
 174 |      * @param now
 175 |      * @param curHolderNum
 176 |      * @return
 177 |      * @throws SQLException
 178 |      */
 179 |     @Override
 180 |     public Response updateBase(BigDecimal base, BigDecimal rewBase, BigDecimal realDecBase, LocalDate now, Long curHolderNum) throws SQLException {
 181 |         RichBaseDo baseDo = new RichBaseDo();
 182 | 
 183 |         // 构建用户总收益数据
 184 |         baseDo.setBase(base);
 185 | 
 186 |         // 构建真实收益发放数据
 187 |         baseDo.setRewBase(rewBase);
 188 | 
 189 |         // 填写倍数基数
 190 |         baseDo.setDecBase(realDecBase);
 191 | 
 192 |         // 当前持有者数量
 193 |         baseDo.setCurHolderNum(curHolderNum);
 194 | 
 195 |         // 构建基数时间
 196 |         baseDo.setRewData(now);
 197 | 
 198 |         // 记录 base 数据
 199 |         int baseRes = rewardBaseMapper.insert(baseDo);
 200 | 
 201 |         if (baseRes == 0) {
 202 |             return Response.error(MYSQL_ERROR_5001, "base update error");
 203 |         }
 204 | 
 205 |         return Response.success();
 206 |     }
 207 | 
 208 |     /**
 209 |      *  定时任务全自动化更新收益
 210 |      * 1.计算当前所有用户的持有情况
 211 |      * 2.根据持有情况累加得到总收益 rewBase（总收益base当作矿场收益） ， base  * decBase = rewBase
 212 |      * 3.更新当天的矿场收益
 213 |      * @return
 214 |      * @throws SQLException
 215 |      */
 216 |     @Transactional
 217 |     @Override
 218 |     public Response<UpdateGainsVo> timeTaskUpdateGains() throws SQLException {
 219 | 
 220 |         // 获取精确到天的日期数据（今天
 221 |         LocalDate todayData = LocalDateTime.now().toLocalDate();
 222 | 
 223 |         // 初始化总收益
 224 |         BigDecimal rewBase = BigDecimal.ZERO;
 225 | 
 226 |         // 初始化总收益
 227 |         BigDecimal base = BigDecimal.ZERO;
 228 | 
 229 |         // 初始化倍数基数
 230 |         BigDecimal realDecBase = DECBASE_1_5;// 真实收益基数 1.5
 231 |         BigDecimal fakeDecBase = DECBASE_2_4;// 用于展示的假基数 2.4
 232 | 
 233 | 
 234 |         /**
 235 |          * 1.计算当前所有交了税用户的持有情况
 236 |          */
 237 |         List<HolderDto> holderList = nftMapper.getNftCountByRarity();
 238 | 
 239 |         /**
 240 |          * 2.遍历所有持有者，根据持有情况累加今天的收益
 241 |          * 先查看是否已有 holder 数据
 242 |          * 无则 insert，有则 update
 243 |          * 并且避免重复累加
 244 |          */
 245 | 
 246 |         for (HolderDto nftHolderDto : holderList) {
 247 | 
 248 |             // 得到个人当天能获得的收益
 249 |             TodayRewDto dto = timeTaskCount(nftHolderDto, DECBASE_1_5);// 定时任务计算真实收益
 250 | 
 251 |             // 累加最初收益
 252 |             base = base.add(dto.getPersonalBase());
 253 | 
 254 |             // 累加总收益
 255 |             rewBase = rewBase.add(dto.getPersonalRewBase());
 256 | 
 257 |             // update 单个持有者收益数据 log
 258 |             Response response = personalClaimUpdate(nftHolderDto.getAddress(), dto.getPersonalRewBase(), todayData);
 259 | 
 260 |         }
 261 | 
 262 | 
 263 |         /**
 264 |          * 3.填写当前的矿场收益
 265 |          */
 266 |         // 校验今天有无更新过矿场产出数据
 267 |         RichBaseDo baseDo = rewardBaseMapper.selectOne(Wrappers.lambdaQuery(RichBaseDo.class)
 268 |                 .eq(RichBaseDo::getRewData, todayData));
 269 |         if (baseDo != null) {
 270 |             return Response.successMsg(null, "already fill today");
 271 |         }
 272 | 
 273 |         BigDecimal lastBaseRew = getLastBaseRew();// 获取最新的一条收益
 274 | 
 275 |         Response response = timeTaskUpdateBase(base , DECBASE_2_4 , todayData, Long.valueOf(holderList.size()), lastBaseRew);
 276 |         if (response.getCode() == MYSQL_ERROR_5001) {
 277 |             return response;
 278 |         }
 279 | 
 280 | 
 281 |         /**
 282 |          * 构建当天的持有返回数据
 283 |          */
 284 |         UpdateGainsVo vo = new UpdateGainsVo();
 285 |         vo.setBase(base);
 286 |         vo.setFakeRewBase(base.multiply(DECBASE_2_4));
 287 |         vo.setRealRewBase(rewBase);
 288 |         vo.setFakeDecBase(fakeDecBase);
 289 |         vo.setRealDecBase(realDecBase);
 290 |         vo.setToday(todayData);
 291 |         vo.setHolderList(holderList);
 292 |         vo.setCurHolderNum(holderList.size());
 293 | 
 294 |         return Response.success(vo);
 295 |     }
 296 | 
 297 |     public BigDecimal getLastBaseRew() {
 298 | 
 299 | 
 300 |         // 获取当前日期和时间
 301 |         LocalDateTime now = LocalDateTime.now();
 302 |         // 转换为精确到天的日期数据
 303 |         LocalDate today = now.toLocalDate();
 304 | 
 305 | 
 306 |         QueryWrapper<RichBaseDo> queryWrapper = new QueryWrapper<>();
 307 |         queryWrapper.select("rew_base")
 308 |                 .eq("is_deleted", false)
 309 |                 .orderByDesc("rew_data")
 310 |                 .last("LIMIT 1");
 311 | 
 312 |         RichBaseDo baseDo = rewardBaseMapper.selectOne(queryWrapper);
 313 | 
 314 |         if (baseDo == null) {
 315 | 
 316 |             return new BigDecimal(1888);
 317 |         }
 318 | 
 319 | 
 320 |         return baseDo.getRewBase();
 321 |     }
 322 | 
 323 |     /**
 324 |      * 计算单个持有者的收益
 325 |      *
 326 |      * @param nftHolderDto
 327 |      * @param decBase
 328 |      * @return
 329 |      */
 330 |     public TodayRewDto timeTaskCount(HolderDto nftHolderDto, BigDecimal decBase) {
 331 | 
 332 |         TodayRewDto dto = new TodayRewDto();
 333 | 
 334 |         // 获取当前持有者的 nft 持有数据, 转为 BigDecimal
 335 |         BigDecimal lv1amt = BigDecimal.valueOf(nftHolderDto.getLv1amt());
 336 |         BigDecimal lv2amt = BigDecimal.valueOf(nftHolderDto.getLv2amt());
 337 |         BigDecimal lv3amt = BigDecimal.valueOf(nftHolderDto.getLv3amt());
 338 |         BigDecimal lv4amt = BigDecimal.valueOf(nftHolderDto.getLv4amt());
 339 |         BigDecimal lv5amt = BigDecimal.valueOf(nftHolderDto.getLv5amt());
 340 |         BigDecimal lv6amt = BigDecimal.valueOf(nftHolderDto.getLv6amt());
 341 | 
 342 | 
 343 |         // 计算当天展示基础收益 base （无基数
 344 |         BigDecimal todayPersonalBase = lv1amt.multiply(LV1VALUE)
 345 |                 .add(lv2amt.multiply(LV2VALUE))
 346 |                 .add(lv3amt.multiply(LV3VALUE))
 347 |                 .add(lv4amt.multiply(LV4VALUE))
 348 |                 .add(lv5amt.multiply(LV5VALUE))
 349 |                 .add(lv6amt.multiply(LV6VALUE))
 350 |                 .setScale(1, RoundingMode.HALF_UP);// 将收益制约为1位小数
 351 | 
 352 |         // 个人真实收益 rewBase （加基数
 353 |         BigDecimal todayPersonalRewBase = todayPersonalBase.multiply(decBase)
 354 |                 .setScale(1, RoundingMode.HALF_UP);// 将收益制约为1位小数
 355 | 
 356 | 
 357 |         dto.setPersonalBase(todayPersonalBase);
 358 |         dto.setPersonalRewBase(todayPersonalRewBase);
 359 | 
 360 |         return dto;
 361 |     }
 362 | 
 363 |     /**
 364 |      * 填写当天的收益基数
 365 |      *
 366 |      * @param base
 367 |      * @param decBase
 368 |      * @param now
 369 |      * @param curHolderNum
 370 |      * @param yesterdayBase
 371 |      * @return
 372 |      * @throws SQLException
 373 |      */
 374 |     @Override
 375 |     public Response timeTaskUpdateBase(BigDecimal base, BigDecimal decBase, LocalDate now, Long curHolderNum, BigDecimal yesterdayBase) throws SQLException {
 376 |         RichBaseDo baseDo = new RichBaseDo();
 377 | 
 378 |         // 构建用户总收益数据
 379 |         baseDo.setBase(base);
 380 | 
 381 |         // 构建实际收益发放数据（若填的是 fakeDecBase 则是飘高的
 382 | //        BigDecimal FAKE_1000 = new BigDecimal("1000.0");
 383 | 
 384 |         BigDecimal bigDecimal_10 = new BigDecimal("10.0");
 385 |         int randomNum = RandomUtil.getRandomNum();// 个位数
 386 |         log.warn("randomNum ：{}", randomNum);
 387 | 
 388 |         BigDecimal newBaseRew = yesterdayBase.add(bigDecimal_10).add(BigDecimal.valueOf(randomNum));// 最新的一条收益加十几
 389 |         baseDo.setRewBase(newBaseRew);
 390 | 
 391 |         // 填写倍数基数
 392 |         baseDo.setDecBase(decBase);
 393 | 
 394 |         // 当前持有者数量
 395 |         baseDo.setCurHolderNum(curHolderNum);
 396 | 
 397 |         // 构建基数时间
 398 |         baseDo.setRewData(now);
 399 | 
 400 |         // 记录 base 数据
 401 |         int baseRes = rewardBaseMapper.insert(baseDo);
 402 | 
 403 |         if (baseRes == 0) {
 404 |             return Response.error(MYSQL_ERROR_5001, "base update error");
 405 |         }
 406 | 
 407 |         return Response.success();
 408 |     }
 409 | 
 410 |     /**
 411 |      * 2.根据持有情况累加今天的收益
 412 |      * 先查看是否已有 holder 数据
 413 |      * 无则 insert，有则 update
 414 |      */
 415 |     public Response personalClaimUpdate(String address, BigDecimal curHolderReward, LocalDate todayData) {
 416 | 
 417 |         // 根据当前领取人的地址直接搜寻持有者的奖励累加实体
 418 |         RichRewardLogDo logDo = logMapper.selectOne(Wrappers.lambdaQuery(RichRewardLogDo.class)
 419 |                 .eq(RichRewardLogDo::getAddress, address));
 420 | 
 421 |         // 数据更新
 422 |         int res = 0;
 423 |         if (logDo == null) {
 424 |             /**
 425 |              * insert
 426 |              */
 427 |             logDo = new RichRewardLogDo();
 428 | 
 429 |             // 构造收益数据
 430 |             logDo.setTotalReward(curHolderReward);
 431 | 
 432 |             // 添加收益更新时间数据
 433 |             logDo.setUpdateReward(todayData);
 434 |             logDo.setLatest(null);// 因为没有领取过所以没有最新领取地址
 435 |             // 添加钱包地址
 436 |             logDo.setAddress(address);
 437 |             // 插入新收益日志
 438 |             res = logMapper.insert(logDo);
 439 |         } else {
 440 | 
 441 |             if (logDo.getUpdateReward().isEqual(todayData)) {// 避免重复累加, 什么都不做
 442 | 
 443 |                 log.info("此用户今天的收益数据已经更新完毕，请勿反复累加");
 444 |             } else if (!logDo.getUpdateReward().isEqual(todayData)){
 445 |                 /**
 446 |                  * update
 447 |                  */
 448 |                 // 不为空，但收益数据更新的最新时间不是今天，则进行更新
 449 |                 log.info("不为空，但收益数据更新的最新时间不是今天，则进行更新");
 450 |                 res = logMapper.update(null, Wrappers.lambdaUpdate(RichRewardLogDo.class)
 451 |                         .set(RichRewardLogDo::getTotalReward, logDo.getTotalReward().add(curHolderReward))// 累加收益
 452 |                         .set(RichRewardLogDo::getUpdateReward, todayData)// 将收益累加时间更新为当前最新具体日期
 453 |                         .eq(RichRewardLogDo::getAddress, address));
 454 |             }
 455 |         }
 456 | 
 457 |         return Response.success();
 458 |     }
 459 | 
 460 |     @Override
 461 |     public Response updateBaseRew(Integer newBaseRew) {
 462 | 
 463 |         BaseRewVo vo = new BaseRewVo();
 464 | 
 465 |         UpdateWrapper<RichBaseDo> wrapper = new UpdateWrapper<>();
 466 |         wrapper.set("rew_base", newBaseRew)
 467 |                 .eq("is_deleted", false)
 468 |                 .orderByDesc("rew_data")
 469 |                 .last("LIMIT 1");
 470 | 
 471 | 
 472 |         int update = rewardBaseMapper.update(null, wrapper);
 473 | 
 474 |         if (update == 0) {
 475 |             return Response.successMsg("update fail!");
 476 |         }
 477 | 
 478 | 
 479 |         return Response.success();
 480 |     }
 481 | 
 482 | 
 483 | 
 484 | 
 485 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/service/impl/RichServiceImpl.java ======

   1 | package com.astrosea.richer.service.impl;
   2 | 
   3 | import com.astrosea.richer.mapper.*;
   4 | import com.astrosea.richer.param.QueryCoinsParam;
   5 | import com.astrosea.richer.pojo.RichRewardLogDo;
   6 | import com.astrosea.richer.response.Response;
   7 | import com.astrosea.richer.service.RichService;
   8 | import com.astrosea.richer.vo.QueryCoinsVo;
   9 | import com.baomidou.mybatisplus.core.toolkit.Wrappers;
  10 | import lombok.extern.slf4j.Slf4j;
  11 | import org.springframework.beans.factory.annotation.Autowired;
  12 | import org.springframework.stereotype.Service;
  13 | 
  14 | import java.math.BigDecimal;
  15 | 
  16 | @Slf4j
  17 | @Service
  18 | public class RichServiceImpl implements RichService {
  19 | 
  20 |     @Autowired
  21 |     TaxAllNftDoMapper nftMapper;
  22 | 
  23 |     @Autowired
  24 |     RewardBaseMapper rewardBaseMapper;
  25 | 
  26 |     @Autowired
  27 |     OrderMapper orderMapper;
  28 | 
  29 |     @Autowired
  30 |     RichHolderMapper holderMapper;
  31 | 
  32 |     @Autowired
  33 |     RichRewardLogMapper logMapper;
  34 | 
  35 | 
  36 | 
  37 |     /**
  38 |      * 有资格的情况查询个人累加收益
  39 |      * @param address
  40 |      * @return
  41 |      */
  42 |     public BigDecimal reward(String address) {
  43 |         RichRewardLogDo logDo = logMapper.selectOne(Wrappers.lambdaQuery(RichRewardLogDo.class)
  44 |                 .eq(RichRewardLogDo::getAddress, address));
  45 | 
  46 |         if (logDo == null) {
  47 |             return BigDecimal.ZERO;
  48 |         }
  49 | 
  50 |         BigDecimal totalReward = logDo.getTotalReward();
  51 |         return totalReward;
  52 |     }
  53 | 
  54 |     /**
  55 |      * 用户查询收益
  56 |      * @param param
  57 |      * @return
  58 |      */
  59 |     @Override
  60 |     public Response<QueryCoinsVo> query(QueryCoinsParam param) {
  61 | 
  62 |         RichRewardLogDo logDo = logMapper.selectOne(Wrappers.lambdaQuery(RichRewardLogDo.class)
  63 |                 .eq(RichRewardLogDo::getAddress, param.getAddress()));
  64 | 
  65 |         /**
  66 |          * 当前用户不在收益领取范围内
  67 |           */
  68 |         if (logDo == null) {
  69 |             return Response.error(403, "No current user");
  70 |         }
  71 | 
  72 |         BigDecimal rew = logDo.getTotalReward();
  73 |         QueryCoinsVo vo = new QueryCoinsVo();
  74 |         vo.setCoins(rew.toString());
  75 |         return Response.success(vo);
  76 |     }
  77 | 
  78 | 
  79 | 
  80 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/service/impl/SpiderImp.java ======

   1 | package com.astrosea.richer.service.impl;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class SpiderImp {
   7 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/exception/ProcessException.java ======

   1 | package com.astrosea.richer.exception;
   2 | 
   3 | import com.astrosea.richer.constant.RpcCode;
   4 | 
   5 | /**
   6 |  * 流程处理异常 Exception
   7 |  */
   8 | public final class ProcessException extends RuntimeException {
   9 | 
  10 |     private static final long serialVersionUID = 3771622198365372253L;
  11 | 
  12 |     /**
  13 |      * 业务错误码
  14 |      *
  15 |      */
  16 |     private Integer code;
  17 |     /**
  18 |      * 错误提示
  19 |      */
  20 |     private String message;
  21 | 
  22 |     /**
  23 |      * 空构造方法，避免反序列化问题
  24 |      */
  25 |     public ProcessException() {
  26 |     }
  27 | 
  28 |     public ProcessException(Integer code, String message) {
  29 |         this.code = code;
  30 |         this.message = message;
  31 |     }
  32 | 
  33 | 	public ProcessException(String message) {
  34 |         super(message);
  35 |         this.code = RpcCode.BIZ_ERROR;
  36 | 		this.message = message;
  37 | 	}
  38 | 
  39 |     public Integer getCode() {
  40 |         return code;
  41 |     }
  42 | 
  43 |     public ProcessException setCode(Integer code) {
  44 |         this.code = code;
  45 |         return this;
  46 |     }
  47 | 
  48 | 	public ProcessException setMessage(String message) {
  49 | 		this.message = message;
  50 | 		return this;
  51 | 	}
  52 | 
  53 | 	public String getMessage() {
  54 |         return message;
  55 |     }
  56 | 
  57 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/exception/RpcException.java ======

   1 | package com.astrosea.richer.exception;
   2 | 
   3 | 
   4 | import com.astrosea.richer.constant.RpcCode;
   5 | 
   6 | /**
   7 |  * 业务逻辑异常 Exception
   8 |  */
   9 | public final class RpcException extends RuntimeException {
  10 | 
  11 |     private static final long serialVersionUID = 5641293727370683250L;
  12 | 
  13 |     /**
  14 |      * 业务错误码
  15 |      *
  16 |      */
  17 |     private Integer code;
  18 |     /**
  19 |      * 错误提示
  20 |      */
  21 |     private String message;
  22 |     /**
  23 |      * 错误明细，内部调试错误
  24 |      *
  25 |      */
  26 |     private String detailMessage;
  27 | 
  28 |     /**
  29 |      * 空构造方法，避免反序列化问题
  30 |      */
  31 |     public RpcException() {
  32 |     }
  33 | 
  34 |     public RpcException(Integer code, String message) {
  35 |         this.code = code;
  36 |         this.message = message;
  37 |     }
  38 | 
  39 | 	public RpcException(String message) {
  40 | 		this.code = RpcCode.BIZ_ERROR;
  41 | 		this.message = message;
  42 | 	}
  43 | 
  44 |     public Integer getCode() {
  45 |         return code;
  46 |     }
  47 | 
  48 |     public String getDetailMessage() {
  49 |         return detailMessage;
  50 |     }
  51 | 
  52 |     public RpcException setDetailMessage(String detailMessage) {
  53 |         this.detailMessage = detailMessage;
  54 |         return this;
  55 |     }
  56 | 
  57 |     public RpcException setCode(Integer code) {
  58 |         this.code = code;
  59 |         return this;
  60 |     }
  61 | 
  62 | 	public RpcException setMessage(String message) {
  63 | 		this.message = message;
  64 | 		return this;
  65 | 	}
  66 | 
  67 |     @Override
  68 | 	public String getMessage() {
  69 |         return message;
  70 |     }
  71 | 
  72 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/exception/TokenException.java ======

   1 | package com.astrosea.richer.exception;
   2 | 
   3 | 
   4 | import com.astrosea.richer.constant.JiaRuHttpCode;
   5 | 
   6 | /**
   7 |  * 业务逻辑异常 Exception
   8 |  */
   9 | public final class TokenException extends RuntimeException {
  10 | 
  11 |     private static final long serialVersionUID = 4462646530730074145L;
  12 | 
  13 |     /**
  14 |      * 业务错误码
  15 |      *
  16 |      */
  17 |     private Integer code;
  18 |     /**
  19 |      * 错误提示
  20 |      */
  21 |     private String message;
  22 | 
  23 |     /**
  24 |      * 空构造方法，避免反序列化问题
  25 |      */
  26 |     public TokenException() {
  27 |     }
  28 | 
  29 |     public TokenException(Integer code, String message) {
  30 |         this.code = code;
  31 |         this.message = message;
  32 |     }
  33 | 
  34 | 	public TokenException(String message) {
  35 |         super(message);
  36 | 		this.code = JiaRuHttpCode.TOKEN_ERROR;
  37 | 		this.message = message;
  38 | 	}
  39 | 
  40 |     public Integer getCode() {
  41 |         return code;
  42 |     }
  43 | 
  44 |     public TokenException setCode(Integer code) {
  45 |         this.code = code;
  46 |         return this;
  47 |     }
  48 | 
  49 | 	public TokenException setMessage(String message) {
  50 | 		this.message = message;
  51 | 		return this;
  52 | 	}
  53 | 
  54 |     @Override
  55 | 	public String getMessage() {
  56 |         return message;
  57 |     }
  58 | 
  59 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/exception/PubPayException.java ======

   1 | package com.astrosea.richer.exception;
   2 | 
   3 | 
   4 | import com.astrosea.richer.constant.RpcCode;
   5 | 
   6 | /**
   7 |  * 流程处理异常 Exception
   8 |  */
   9 | public final class PubPayException extends RuntimeException {
  10 | 
  11 |     private static final long serialVersionUID = 3771622198365372253L;
  12 | 
  13 |     /**
  14 |      * 业务错误码
  15 |      *
  16 |      */
  17 |     private Integer code;
  18 |     /**
  19 |      * 错误提示
  20 |      */
  21 |     private String message;
  22 | 
  23 |     /**
  24 |      * 空构造方法，避免反序列化问题
  25 |      */
  26 |     public PubPayException() {
  27 |     }
  28 | 
  29 |     public PubPayException(Integer code, String message) {
  30 |         this.code = code;
  31 |         this.message = message;
  32 |     }
  33 | 
  34 | 	public PubPayException(String message) {
  35 |         super(message);
  36 | 		this.code = RpcCode.BIZ_ERROR;
  37 | 		this.message = message;
  38 | 	}
  39 | 
  40 |     public Integer getCode() {
  41 |         return code;
  42 |     }
  43 | 
  44 |     public PubPayException setCode(Integer code) {
  45 |         this.code = code;
  46 |         return this;
  47 |     }
  48 | 
  49 | 	public PubPayException setMessage(String message) {
  50 | 		this.message = message;
  51 | 		return this;
  52 | 	}
  53 | 
  54 | 	public String getMessage() {
  55 |         return message;
  56 |     }
  57 | 
  58 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/exception/BizException.java ======

   1 | package com.astrosea.richer.exception;
   2 | 
   3 | 
   4 | import com.astrosea.richer.constant.RpcCode;
   5 | 
   6 | /**
   7 |  * 业务逻辑异常 Exception
   8 |  */
   9 | public final class BizException extends RuntimeException {
  10 | 
  11 |     private static final long serialVersionUID = 4462646530730074145L;
  12 | 
  13 |     /**
  14 |      * 业务错误码
  15 |      *
  16 |      */
  17 |     private Integer code;
  18 |     /**
  19 |      * 错误提示
  20 |      */
  21 |     private String message;
  22 | 
  23 |     /**
  24 |      * 空构造方法，避免反序列化问题
  25 |      */
  26 |     public BizException() {
  27 |     }
  28 | 
  29 |     public BizException(Integer code, String message) {
  30 |         this.code = code;
  31 |         this.message = message;
  32 |     }
  33 | 
  34 | 	public BizException(String message) {
  35 |         super(message);
  36 | 		this.code = RpcCode.BIZ_ERROR;
  37 | 		this.message = message;
  38 | 	}
  39 | 
  40 |     public Integer getCode() {
  41 |         return code;
  42 |     }
  43 | 
  44 |     public BizException setCode(Integer code) {
  45 |         this.code = code;
  46 |         return this;
  47 |     }
  48 | 
  49 | 	public BizException setMessage(String message) {
  50 | 		this.message = message;
  51 | 		return this;
  52 | 	}
  53 | 
  54 |     @Override
  55 | 	public String getMessage() {
  56 |         return message;
  57 |     }
  58 | 
  59 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/pojo/AstroOrderDo.java ======

   1 | package com.astrosea.richer.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.*;
   4 | import lombok.Data;
   5 | 
   6 | import java.math.BigDecimal;
   7 | import java.time.LocalDateTime;
   8 | 
   9 | @Data
  10 | @TableName("astro_order")
  11 | public class AstroOrderDo {
  12 |     
  13 |     /**
  14 |      * 主键id
  15 |      */
  16 |     private Long id;
  17 |     
  18 |     /**
  19 |      * 订单id
  20 |      */
  21 |     @TableId(value = "order_id", type = IdType.ASSIGN_ID)
  22 |     private Long orderId;
  23 |     
  24 |     /**
  25 |      * 用户地址
  26 |      */
  27 |     private String userUrl;
  28 |     
  29 |     /**
  30 |      * 支付金额
  31 |      */
  32 |     private BigDecimal payAmount;
  33 | 
  34 |     /**
  35 |      * mint 数量
  36 |      */
  37 |     private Integer mintAmount;
  38 |     
  39 |     /**
  40 |      * 支付状态{1、paying为正在支付、2、success（paid）为成功、3 received 为已到账}
  41 |      */
  42 |     private Integer payStatus;
  43 |     
  44 |     /**
  45 |      * 区块链交易id
  46 |      */
  47 |     private String txId;
  48 | 
  49 |     /**
  50 |      * nft 编号列表
  51 |      */
  52 |     private String nftList;
  53 | 
  54 |     /**
  55 |      * utxo hash 列表
  56 |      */
  57 |     private String utxoList;
  58 | 
  59 |     /**
  60 |      * 支付身份 0 OG、1 WL、2 PUB
  61 |      */
  62 |     private Integer style;
  63 | 
  64 |     /**
  65 |      * 支付源 origin
  66 |      */
  67 |     private String payOrigin;
  68 | 
  69 |     /**
  70 |      * 创建时间
  71 |      */
  72 |     @TableField(fill = FieldFill.INSERT)
  73 |     private LocalDateTime insertTime = LocalDateTime.now();
  74 | 
  75 |     /**
  76 |      * 更新时间
  77 |      */
  78 |     @TableField(fill = FieldFill.INSERT_UPDATE)
  79 |     private LocalDateTime updateTime = LocalDateTime.now();
  80 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/pojo/RichBaseDo.java ======

   1 | package com.astrosea.richer.pojo;
   2 | 
   3 | import com.astrosea.richer.utils.BaseEntity;
   4 | import com.baomidou.mybatisplus.annotation.TableName;
   5 | import lombok.AllArgsConstructor;
   6 | import lombok.Data;
   7 | import lombok.NoArgsConstructor;
   8 | 
   9 | import java.math.BigDecimal;
  10 | import java.time.LocalDate;
  11 | 
  12 | @Data
  13 | @AllArgsConstructor
  14 | @NoArgsConstructor
  15 | @TableName("rich_reward_base")
  16 | public class RichBaseDo extends BaseEntity {
  17 | 
  18 |     /**
  19 |      * 当天矿场收益
  20 |      */
  21 |     private BigDecimal base;
  22 | 
  23 |     /**
  24 |      * 当天矿场收益（实际是 base * decBase
  25 |      */
  26 |     private BigDecimal rewBase;
  27 | 
  28 |     /**
  29 |      * 当天收益基数
  30 |      */
  31 |     private BigDecimal decBase;
  32 | 
  33 |     /**
  34 |      * 当天持有者数量
  35 |      */
  36 |     private Long curHolderNum;
  37 | 
  38 |     /**
  39 |      * 收益日期
  40 |      */
  41 |     private LocalDate rewData;
  42 | 
  43 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/pojo/TaxAllNftDo.java ======

   1 | package com.astrosea.richer.pojo;
   2 | 
   3 | import com.astrosea.richer.utils.BaseEntity;
   4 | import com.baomidou.mybatisplus.annotation.TableName;
   5 | import lombok.AllArgsConstructor;
   6 | import lombok.Data;
   7 | import lombok.NoArgsConstructor;
   8 | 
   9 | @Data
  10 | @AllArgsConstructor
  11 | @NoArgsConstructor
  12 | @TableName("tax_all_nft")
  13 | public class TaxAllNftDo extends BaseEntity {
  14 | 
  15 |     /**
  16 |      * nft 内部 id
  17 |      */
  18 |     private Long astroseaId;
  19 | 
  20 |     /**
  21 |      * 数字编号
  22 |      */
  23 |     private Integer nftId;
  24 | 
  25 |     /**
  26 |      * 名称
  27 |      */
  28 |     private String name;
  29 | 
  30 |     /**
  31 |      * 创世文本
  32 |      */
  33 |     private String gtId;
  34 | 
  35 | 
  36 |     /**
  37 |      * utxo数组
  38 |      */
  39 |     private String nftUtxo;
  40 | 
  41 |     /**
  42 |      * 稀有度
  43 |      */
  44 |     private String rarity;
  45 | 
  46 |     /**
  47 |      * OSS url
  48 |      */
  49 |     private String imgUrl;
  50 | 
  51 |     /**
  52 |      * 星际文件存储 url
  53 |      */
  54 |     private String ipfsUrl;
  55 | 
  56 |     /**
  57 |      * 所属钱包地址
  58 |      */
  59 |     private String address;
  60 | 
  61 |     /**
  62 |      * 缴税状态
  63 |      */
  64 |     private Integer taxStatus;
  65 | 
  66 |     /**
  67 |      * 售卖状态
  68 |      */
  69 |     private Integer sellStatus;
  70 | 
  71 |     private String otherJson;
  72 | 
  73 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/pojo/BaseEntity.java ======

   1 | package com.astrosea.richer.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.TableField;
   4 | import com.baomidou.mybatisplus.annotation.TableLogic;
   5 | 
   6 | import java.time.LocalDateTime;
   7 | 
   8 | /**
   9 |  * 基础POJO类
  10 |  *
  11 |  **/
  12 | public class BaseEntity {
  13 | 
  14 |     private Long id;
  15 | 
  16 |     private LocalDateTime insertTime;
  17 | 
  18 |     private LocalDateTime updateTime;
  19 | 
  20 |     @TableField("is_deleted")
  21 |     @TableLogic
  22 |     private Boolean deleted;
  23 | 
  24 |     public Long getId() {
  25 |         return id;
  26 |     }
  27 | 
  28 |     public void setId(Long id) {
  29 |         this.id = id;
  30 |     }
  31 | 
  32 |     public LocalDateTime getInsertTime() {
  33 |         return insertTime;
  34 |     }
  35 | 
  36 |     public void setInsertTime(LocalDateTime insertTime) {
  37 |         this.insertTime = insertTime;
  38 |     }
  39 | 
  40 |     public LocalDateTime getUpdateTime() {
  41 |         return updateTime;
  42 |     }
  43 | 
  44 |     public void setUpdateTime(LocalDateTime updateTime) {
  45 |         this.updateTime = updateTime;
  46 |     }
  47 | 
  48 |     public Boolean getDeleted() {
  49 |         return deleted;
  50 |     }
  51 | 
  52 |     public void setDeleted(Boolean deleted) {
  53 |         this.deleted = deleted;
  54 |     }
  55 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/pojo/RichHolderDo.java ======

   1 | package com.astrosea.richer.pojo;
   2 | 
   3 | import com.astrosea.richer.utils.BaseEntity;
   4 | import com.baomidou.mybatisplus.annotation.TableName;
   5 | import lombok.AllArgsConstructor;
   6 | import lombok.Data;
   7 | import lombok.NoArgsConstructor;
   8 | 
   9 | @Data
  10 | @AllArgsConstructor
  11 | @NoArgsConstructor
  12 | @TableName("rich_holder")
  13 | public class RichHolderDo extends BaseEntity {
  14 | 
  15 |     /**
  16 |      * 钱包地址
  17 |      */
  18 |     private String address;
  19 | 
  20 |     /**
  21 |      * 稀有度1
  22 |      */
  23 |     private Integer lv1amt;
  24 | 
  25 |     /**
  26 |      * 稀有度2
  27 |      */
  28 |     private Integer lv2amt;
  29 | 
  30 |     /**
  31 |      * 稀有度3
  32 |      */
  33 |     private Integer lv3amt;
  34 | 
  35 |     /**
  36 |      * 稀有度4
  37 |      */
  38 |     private Integer lv4amt;
  39 | 
  40 |     /**
  41 |      * 稀有度5
  42 |      */
  43 |     private Integer lv5amt;
  44 | 
  45 |     /**
  46 |      * 稀有度6
  47 |      */
  48 |     private Integer lv6amt;
  49 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/pojo/OperatorLogDo.java ======

   1 | package com.astrosea.richer.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.TableName;
   4 | import lombok.AllArgsConstructor;
   5 | import lombok.Data;
   6 | import lombok.NoArgsConstructor;
   7 | 
   8 | import java.time.LocalDateTime;
   9 | 
  10 | @Data
  11 | @AllArgsConstructor
  12 | @NoArgsConstructor
  13 | @TableName("claim_operator_log")
  14 | public class OperatorLogDo extends BaseEntity {
  15 | 
  16 |     /**
  17 |      * 主键 id
  18 |      */
  19 |     private Long id;
  20 | 
  21 |     /**
  22 |      * 操作者
  23 |      */
  24 |     private String operator;
  25 | 
  26 |     /**
  27 |      * 当天操作情况的 JSON
  28 |      */
  29 |     private String logJson;
  30 | 
  31 |     /**
  32 |      * 日志状态
  33 |      */
  34 |     private Integer status;
  35 | 
  36 |     /**
  37 |      * 创建时间
  38 |      */
  39 |     private LocalDateTime insertTime;
  40 | 
  41 |     /**
  42 |      * 更新时间
  43 |      */
  44 |     private LocalDateTime updateTime;
  45 | 
  46 |     /**
  47 |      * 是否删除，0：正常，1：删除
  48 |      */
  49 |     private Boolean deleted;
  50 |     
  51 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/pojo/Tax1of1NftDo.java ======

   1 | package com.astrosea.richer.pojo;
   2 | 
   3 | 
   4 | import com.baomidou.mybatisplus.annotation.TableName;
   5 | import lombok.AllArgsConstructor;
   6 | import lombok.Data;
   7 | import lombok.NoArgsConstructor;
   8 | 
   9 | 
  10 | @Data
  11 | @AllArgsConstructor
  12 | @NoArgsConstructor
  13 | @TableName("tax_1of1_nft")
  14 | public class Tax1of1NftDo extends BaseEntity {
  15 | 
  16 |     /**
  17 |      * nft 内部 id
  18 |      */
  19 |     private Long astroseaId;
  20 | 
  21 |     /**
  22 |      * 数字编号
  23 |      */
  24 |     private Integer nftId;
  25 | 
  26 |     /**
  27 |      * 名称
  28 |      */
  29 |     private String name;
  30 | 
  31 |     /**
  32 |      * 创世文本
  33 |      */
  34 |     private String gtId;
  35 | 
  36 | 
  37 |     /**
  38 |      * utxo数组
  39 |      */
  40 |     private String nftUtxo;
  41 | 
  42 |     /**
  43 |      * 稀有度
  44 |      */
  45 |     private String rarity;
  46 | 
  47 |     /**
  48 |      * url
  49 |      */
  50 |     private String imgUrl;
  51 | 
  52 |     /**
  53 |      * 星际文件存储 url
  54 |      */
  55 |     private String ipfsUrl;
  56 | 
  57 |     /**
  58 |      * 所属钱包地址
  59 |      */
  60 |     private String address;
  61 | 
  62 |     /**
  63 |      * 缴税状态
  64 |      */
  65 |     private Integer taxStatus;
  66 | 
  67 |     /**
  68 |      * 售卖状态
  69 |      */
  70 |     private Integer sellStatus;
  71 | 
  72 |     /**
  73 |      * 发售标记
  74 |      */
  75 |     private String otherJson;
  76 | 
  77 | }
  78 | 



// ====== FILE: ./src/main/java/com/astrosea/richer/pojo/OrderDo.java ======

   1 | package com.astrosea.richer.pojo;
   2 | 
   3 | import com.astrosea.richer.utils.BaseEntity;
   4 | import com.baomidou.mybatisplus.annotation.TableName;
   5 | import lombok.AllArgsConstructor;
   6 | import lombok.Data;
   7 | import lombok.NoArgsConstructor;
   8 | 
   9 | import java.math.BigDecimal;
  10 | import java.time.LocalDateTime;
  11 | 
  12 | @Data
  13 | @AllArgsConstructor
  14 | @NoArgsConstructor
  15 | @TableName("rich_order")
  16 | public class OrderDo extends BaseEntity {
  17 | 
  18 |     /**
  19 |      * 订单ID
  20 |      */
  21 |     private Long orderId;
  22 | 
  23 |     /**
  24 |      * 钱包地址
  25 |      */
  26 |     private String address;
  27 | 
  28 |     /**
  29 |      * 订单时间
  30 |      */
  31 |     private LocalDateTime orderTime;
  32 | 
  33 |     /**
  34 |      * 奖励数量
  35 |      */
  36 |     private BigDecimal rewardAmt;
  37 | 
  38 |     /**
  39 |      * 状态
  40 |      */
  41 |     private Integer status;
  42 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/pojo/ResenderOrderDo.java ======

   1 | package com.astrosea.richer.pojo;
   2 | 
   3 | 
   4 | import com.baomidou.mybatisplus.annotation.*;
   5 | import lombok.Data;
   6 | 
   7 | import java.math.BigDecimal;
   8 | import java.time.LocalDateTime;
   9 | 
  10 | @Data
  11 | @TableName("astro_resender_order")
  12 | public class ResenderOrderDo {
  13 | 
  14 |     /**
  15 |      * 主键id
  16 |      */
  17 |     private Long id;
  18 | 
  19 |     /**
  20 |      * 订单id
  21 |      */
  22 |     @TableId(value = "order_id", type = IdType.ASSIGN_ID)
  23 |     private Long orderId;
  24 | 
  25 |     /**
  26 |      * 用户地址
  27 |      */
  28 |     private String userUrl;
  29 | 
  30 |     /**
  31 |      * 支付金额
  32 |      */
  33 |     private BigDecimal payAmount;
  34 | 
  35 |     /**
  36 |      * mint 数量
  37 |      */
  38 |     private Integer mintAmount;
  39 | 
  40 |     /**
  41 |      * 支付状态{1、paying为正在支付、2、success（paid）为成功、3 received 为已到账}
  42 |      */
  43 |     private Integer payStatus;
  44 | 
  45 |     /**
  46 |      * 区块链交易id
  47 |      */
  48 |     private String txId;
  49 | 
  50 |     /**
  51 |      * nft 编号列表
  52 |      */
  53 |     private String nftList;
  54 | 
  55 |     /**
  56 |      * 响应记录
  57 |      */
  58 |     private String responseLog;
  59 | 
  60 |     /**
  61 |      * 支付身份 0 OG、1 WL、2 PUB
  62 |      */
  63 |     private Integer style;
  64 | 
  65 |     /**
  66 |      * 支付源 origin
  67 |      */
  68 |     private String payOrigin;
  69 | 
  70 |     /**
  71 |      * 创建时间
  72 |      */
  73 |     @TableField(fill = FieldFill.INSERT)
  74 |     private LocalDateTime insertTime = LocalDateTime.now();
  75 | 
  76 |     /**
  77 |      * 更新时间
  78 |      */
  79 |     @TableField(fill = FieldFill.INSERT_UPDATE)
  80 |     private LocalDateTime updateTime = LocalDateTime.now();
  81 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/pojo/TimeTaskLogDo.java ======

   1 | package com.astrosea.richer.pojo;
   2 | 
   3 | import com.astrosea.richer.utils.BaseEntity;
   4 | import com.baomidou.mybatisplus.annotation.TableName;
   5 | import lombok.AllArgsConstructor;
   6 | import lombok.Data;
   7 | import lombok.NoArgsConstructor;
   8 | 
   9 | @Data
  10 | @AllArgsConstructor
  11 | @NoArgsConstructor
  12 | @TableName("time_task_log")
  13 | public class TimeTaskLogDo extends BaseEntity {
  14 | 
  15 |     private Long orderId;
  16 | 
  17 |     private String resLog;
  18 | 
  19 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/pojo/RichRewardLogDo.java ======

   1 | package com.astrosea.richer.pojo;
   2 | 
   3 | import com.astrosea.richer.utils.BaseEntity;
   4 | import com.baomidou.mybatisplus.annotation.TableName;
   5 | import lombok.AllArgsConstructor;
   6 | import lombok.Data;
   7 | import lombok.NoArgsConstructor;
   8 | 
   9 | import java.math.BigDecimal;
  10 | import java.time.LocalDate;
  11 | import java.time.LocalDateTime;
  12 | 
  13 | @Data
  14 | @AllArgsConstructor
  15 | @NoArgsConstructor
  16 | @TableName("rich_reward_log")
  17 | public class RichRewardLogDo extends BaseEntity {
  18 | 
  19 |     /**
  20 |      * 用户钱包地址
  21 |      */
  22 |     private String address;
  23 | 
  24 |     /**
  25 |      * 累加收益，领取后置 0
  26 |      */
  27 |     private BigDecimal totalReward;
  28 | 
  29 |     /**
  30 |      * 收益最后累加时间
  31 |      */
  32 |     private LocalDate updateReward;
  33 | 
  34 |     /**
  35 |      * 最后领取日期
  36 |      */
  37 |     private LocalDate latest;
  38 | 
  39 |     /**
  40 |      * 最后领取具体时间
  41 |      */
  42 |     private LocalDateTime latestDetail;
  43 | 
  44 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/interceptor/ShareInterceptor.java ======

   1 | package com.astrosea.richer.interceptor;
   2 | 
   3 | import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
   4 | 
   5 | import javax.servlet.http.HttpServletRequest;
   6 | import javax.servlet.http.HttpServletResponse;
   7 | 
   8 | public class ShareInterceptor extends HandlerInterceptorAdapter {
   9 | 
  10 |     @Override
  11 |     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception
  12 |     {
  13 |         //先从请求头(K-V)里拿 token
  14 |         String shareHash = request.getHeader("invite_code");
  15 | 
  16 |         //具体分享校验的逻辑
  17 | 
  18 | 
  19 |         //返回 true 放行
  20 |         return true;
  21 |     }
  22 | }



// ====== FILE: ./src/main/java/com/astrosea/richer/interceptor/JiaRuExceptionHandler.java ======

   1 | package com.astrosea.richer.interceptor;
   2 | 
   3 | 
   4 | import com.astrosea.richer.constant.HttpCode;
   5 | import com.astrosea.richer.exception.BizException;
   6 | import com.astrosea.richer.exception.PubPayException;
   7 | import com.astrosea.richer.exception.RpcException;
   8 | import com.astrosea.richer.exception.TokenException;
   9 | import com.astrosea.richer.response.Response;
  10 | import lombok.extern.slf4j.Slf4j;
  11 | import org.slf4j.Logger;
  12 | import org.slf4j.LoggerFactory;
  13 | import org.springframework.web.bind.annotation.ExceptionHandler;
  14 | import org.springframework.web.bind.annotation.RestControllerAdvice;
  15 | 
  16 | import java.sql.SQLException;
  17 | 
  18 | @Slf4j
  19 | @RestControllerAdvice(basePackages = {"com.astrosea.controller"})
  20 | public class JiaRuExceptionHandler {
  21 | 
  22 |     private static final Logger logger = LoggerFactory.getLogger(JiaRuExceptionHandler.class);
  23 | 
  24 | 
  25 |     /**
  26 |      * 登陆异常处理
  27 |      *
  28 |      * 没有token、token 过期、token 不合法
  29 |      *
  30 |      * @param e 未知异常
  31 |      * @return Response
  32 |      */
  33 |     @ExceptionHandler(TokenException.class)
  34 |     public Response<?> tokenException(TokenException e) {
  35 |         return Response.error(e.getCode(), e.getMessage());
  36 |     }
  37 | 
  38 | 
  39 |     /**
  40 |      * 业务逻辑异常处理
  41 |      *
  42 |      * @param e 业务逻辑异常
  43 |      * @return Response
  44 |      */
  45 |     @ExceptionHandler(BizException.class)
  46 |     public Response<?> handleBizException(BizException e) {
  47 |         return Response.error(e.getCode(), e.getMessage());
  48 |     }
  49 | 
  50 |     /**
  51 |      * 公售处理异常处理
  52 |      *
  53 |      * @param e 流程处理异常
  54 |      * @return Response
  55 |      */
  56 |     @ExceptionHandler(PubPayException.class)
  57 |     public Response<?> handleProcessException(PubPayException e) {
  58 |         return Response.error(e.getCode(), e.getMessage());
  59 |     }
  60 | 
  61 |     /**
  62 |      * RPC服务异常处理
  63 |      *
  64 |      * @param e RPC服务异常
  65 |      * @return Response
  66 |      */
  67 |     @ExceptionHandler(RpcException.class)
  68 |     public Response<?> handleRpcException(RpcException e) {
  69 |         return Response.error(e.getCode(), e.getMessage());
  70 |     }
  71 | 
  72 | 
  73 |     /**
  74 |      * 处理SQL异常
  75 |      *
  76 |      * @param e SQL异常
  77 |      * @return Response
  78 |      */
  79 |     @ExceptionHandler(SQLException.class)
  80 |     public Response<?> handleSQLException(SQLException e) {
  81 |         log.error("SQL异常：", e);
  82 |         return Response.error(HttpCode.MYSQL_ERROR_5001, "数据库操作异常：" + e.getMessage());
  83 |     }
  84 | 
  85 | 
  86 |     /**
  87 |      * 未知异常处理
  88 |      *
  89 |      * @param e 未知异常
  90 |      * @return Response
  91 |      */
  92 |     @ExceptionHandler(Exception.class)
  93 |     public Response<?> handleUnknownException(Exception e) {
  94 |         log.info("系统异常日志：{}", e);
  95 |         return Response.error(HttpCode.INNER_ERROR_5000 , "系统异常"+e);
  96 |     }
  97 | 
  98 | 
  99 | 
 100 | }


// ====== FILE: ./src/main/java/com/astrosea/richer/interceptor/RefreshTokenInterceptor.java ======

   1 | package com.astrosea.richer.interceptor;
   2 | 
   3 | 
   4 | import cn.hutool.core.util.StrUtil;
   5 | import com.astrosea.richer.constant.HttpCode;
   6 | import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
   7 | 
   8 | import javax.servlet.http.HttpServletResponse;
   9 | import javax.servlet.http.HttpServletRequest;
  10 | 
  11 | public class RefreshTokenInterceptor extends HandlerInterceptorAdapter {
  12 | 
  13 | 
  14 | 
  15 |     @Override
  16 |     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception
  17 |     {
  18 |         //先从请求头(K-V)里拿 token
  19 |         String token = request.getHeader("token");
  20 | 
  21 | 
  22 | 
  23 |         //返回 true 放行
  24 |         return true;
  25 |     }
  26 | 
  27 |     @Override
  28 |     public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception
  29 |     {
  30 | 
  31 |     }
  32 | 
  33 | }

