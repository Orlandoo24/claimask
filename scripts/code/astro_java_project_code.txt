=== JAVA PROJECT STRUCTURE ===
.
├── README.md
├── java_collect.py
├── java_project_code.txt
├── pom.xml
├── script
│   └── load.py
├── sql
│   └── ddl.sql
├── src
│   ├── main
│   │   ├── java
│   │   └── resources
│   └── test
│       └── java
└── ssl249.jks

9 directories, 7 files



// ====== FILE: ./src/test/java/com/astro/ExcelToMySQL.java ======

   1 | package com.astro;
   2 | 
   3 | import java.io.File;
   4 | import java.io.FileInputStream;
   5 | import java.io.IOException;
   6 | import java.sql.Connection;
   7 | import java.sql.DriverManager;
   8 | import java.sql.PreparedStatement;
   9 | import java.sql.SQLException;
  10 | 
  11 | import com.astro.mapper.TaxAllNftDoMapper;
  12 | import com.astro.pojo.TaxAllNftDo;
  13 | import org.apache.poi.ss.usermodel.*;
  14 | import org.springframework.beans.factory.annotation.Autowired;
  15 | import org.springframework.stereotype.Component;
  16 | 
  17 | @Component
  18 | public class ExcelToMySQL {
  19 | 
  20 | 
  21 | 
  22 |     public static void main(String[] args) {
  23 | 
  24 | 
  25 | 
  26 |     }
  27 | }



// ====== FILE: ./src/test/java/com/astro/RedissonLockTestHttp.java ======

   1 | package com.astro;
   2 | 
   3 | import com.astro.annotation.RedissonLock;
   4 | import com.astro.mapper.TestGoodMapper;
   5 | import com.astro.pojo.TestGood;
   6 | import com.astro.response.Response;
   7 | import org.junit.runner.RunWith;
   8 | import org.redisson.api.RedissonClient;
   9 | import org.springframework.beans.factory.annotation.Autowired;
  10 | import org.springframework.boot.test.context.SpringBootTest;
  11 | import org.springframework.test.context.junit4.SpringRunner;
  12 | import org.springframework.web.bind.annotation.RequestMapping;
  13 | import org.springframework.web.bind.annotation.RestController;
  14 | 
  15 | @RunWith(SpringRunner.class)
  16 | @SpringBootTest
  17 | @RestController
  18 | public class RedissonLockTestHttp {
  19 | 
  20 |     @Autowired
  21 |     private RedissonClient redissonClient;
  22 | 
  23 |     @Autowired
  24 |     static TestGoodMapper testGoodMapper;
  25 | 
  26 |     // 请求的入口
  27 |     @RequestMapping("/lock")
  28 |     public Response decGoodHttp(){
  29 |         
  30 | 
  31 |         return Response.success();
  32 |     }
  33 | 
  34 | 
  35 |     // 减少商品库存的方法
  36 |     @RedissonLock(key = "test_lock_key", waitTime = 5, leaseTime = 10)
  37 |     public static void decGood(){
  38 |         // 实际的减少商品库存逻辑
  39 |         TestGood testGood = testGoodMapper.selectById(1L); // 假设商品ID为1
  40 |         if (testGood.getAmount() > 0) {
  41 |             testGood.setAmount(testGood.getAmount() - 1);
  42 |             testGoodMapper.updateById(testGood);
  43 |         }
  44 |     }
  45 | 
  46 | 
  47 | 
  48 | 
  49 | 
  50 | 
  51 | 
  52 | }



// ====== FILE: ./src/test/java/com/astro/RedissonLockTest.java ======

   1 | package com.astro;
   2 | 
   3 | import com.astro.annotation.RedissonLock;
   4 | import org.junit.Test;
   5 | import org.junit.runner.RunWith;
   6 | import org.redisson.api.RedissonClient;
   7 | import org.springframework.beans.factory.annotation.Autowired;
   8 | import org.springframework.boot.test.context.SpringBootTest;
   9 | import org.springframework.test.context.ActiveProfiles;
  10 | import org.springframework.test.context.junit4.SpringRunner;
  11 | 
  12 | @RunWith(SpringRunner.class)
  13 | @SpringBootTest
  14 | public class RedissonLockTest {
  15 | 
  16 |     @Autowired
  17 |     private RedissonClient redissonClient;
  18 | 
  19 |     @Test
  20 |     @RedissonLock(key = "testLock", waitTime = 5, leaseTime = 10)
  21 |     public void testRedissonLockAnnotation() {
  22 |         System.out.println("Locked method executed successfully.");
  23 |     }
  24 | }



// ====== FILE: ./src/test/java/com/astro/RedissonTest.java ======

   1 | package com.astro;
   2 | 
   3 | import com.astro.annotation.RedissonLock;
   4 | import org.junit.After;
   5 | import org.junit.Before;
   6 | import org.junit.Test;
   7 | import org.junit.runner.RunWith;
   8 | import org.redisson.api.RBucket;
   9 | import org.redisson.api.RedissonClient;
  10 | import org.springframework.beans.factory.annotation.Autowired;
  11 | import org.springframework.boot.test.context.SpringBootTest;
  12 | import org.springframework.test.context.junit4.SpringRunner;
  13 | 
  14 | import static org.junit.Assert.assertEquals;
  15 | 
  16 | @RunWith(SpringRunner.class)
  17 | @SpringBootTest
  18 | public class RedissonTest {
  19 | 
  20 |     @Autowired
  21 |     private RedissonClient redissonClient;
  22 | 
  23 | 
  24 |     @Test
  25 |     public void redisTest() {
  26 |         RBucket<Object> bucket = redissonClient.getBucket("name");
  27 |         if (bucket.get() == null) {
  28 |             bucket.set("bucket");
  29 |         }
  30 |         System.out.println(bucket.get().toString());
  31 |     }
  32 | 
  33 |     // 测试分布式锁功能
  34 |     @Test
  35 |     public void testDistributedLock() throws InterruptedException {
  36 |         // 启动多个线程同时执行需要加锁的业务方法
  37 |         Thread thread1 = new Thread(() -> performBusinessLogicWithLock("1"));
  38 |         Thread thread2 = new Thread(() -> performBusinessLogicWithLock("2"));
  39 |         Thread thread3 = new Thread(() -> performBusinessLogicWithLock("3"));
  40 | 
  41 |         thread1.start();
  42 |         thread2.start();
  43 |         thread3.start();
  44 | 
  45 |         // 等待线程执行完成
  46 |         thread1.join();
  47 |         thread2.join();
  48 |         thread3.join();
  49 |     }
  50 | 
  51 |     @RedissonLock(key = "test_lock_key", waitTime = 5, leaseTime = 10)
  52 |     private void performBusinessLogicWithLock(String s) {
  53 |         // 在这里编写需要加锁的业务逻辑代码
  54 |         System.out.println("lock..."+s);
  55 |         try {
  56 |             // 模拟业务逻辑执行时间
  57 |             Thread.sleep(3000);
  58 |         } catch (InterruptedException e) {
  59 |             e.printStackTrace();
  60 |         }
  61 |     }
  62 | 
  63 | 
  64 | 
  65 | }



// ====== FILE: ./src/test/java/com/astro/RarityTest.java ======

   1 | package com.astro;
   2 | 
   3 | import cn.hutool.core.text.CharSequenceUtil;
   4 | import cn.hutool.json.JSONUtil;
   5 | import com.astro.mapper.*;
   6 | import com.astro.param.*;
   7 | import com.astro.param.request.PayCallBackRequest;
   8 | import com.astro.pojo.AstroOrderDo;
   9 | import com.astro.pojo.AstroPubPayLogDo;
  10 | import com.astro.pojo.OrderDo;
  11 | import com.astro.pojo.TaxAllNftDo;
  12 | import com.astro.response.Response;
  13 | import com.astro.service.MintService;
  14 | import com.astro.utils.RarityUtil;
  15 | import com.astro.vo.IpfsImgVo;
  16 | import com.astro.vo.dto.HolderDto;
  17 | import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
  18 | import com.baomidou.mybatisplus.core.toolkit.Wrappers;
  19 | import lombok.extern.slf4j.Slf4j;
  20 | import org.apache.poi.ss.usermodel.Row;
  21 | import org.apache.poi.ss.usermodel.Sheet;
  22 | import org.apache.poi.ss.usermodel.Workbook;
  23 | import org.apache.poi.ss.usermodel.WorkbookFactory;
  24 | import org.junit.jupiter.api.Test;
  25 | import org.springframework.beans.factory.annotation.Autowired;
  26 | import org.springframework.beans.factory.annotation.Value;
  27 | import org.springframework.boot.test.context.SpringBootTest;
  28 | import org.springframework.mail.SimpleMailMessage;
  29 | import org.springframework.mail.javamail.JavaMailSender;
  30 | 
  31 | import java.io.*;
  32 | import java.math.BigDecimal;
  33 | import java.math.RoundingMode;
  34 | import java.net.InetAddress;
  35 | import java.net.ServerSocket;
  36 | import java.util.ArrayList;
  37 | import java.util.List;
  38 | 
  39 | 
  40 | @SpringBootTest
  41 | @Slf4j
  42 | public class RarityTest {
  43 | 
  44 |     @Autowired
  45 |     TaxAllNftDoMapper nftMapper;
  46 | 
  47 |     @Test
  48 |     void contextLoads() {
  49 |     }
  50 | 
  51 | 
  52 |     @Test
  53 |     void testRarity() {
  54 |         String inputFile = "/Users/hc-101/Documents/rarity/lv6/lv6num.txt";
  55 |         String outputFile = "/Users/hc-101/Documents/rarity/lv6/lv6_updateNum.txt";
  56 |         int count = extractNumbers(inputFile, outputFile);
  57 |         System.out.println("共提取出 " + count + " 个数字");
  58 |     }
  59 | 
  60 |     @Test
  61 |     void testRarityLv1() {
  62 | 
  63 |         nftMapper.update(null, Wrappers.lambdaUpdate(TaxAllNftDo.class)
  64 |                 .eq(TaxAllNftDo::getRarity, "Common")
  65 |                 .set(TaxAllNftDo::getRarity, "lv1"));
  66 | 
  67 |     }
  68 | 
  69 |     @Test
  70 |     void testRarityLv1Count() {
  71 | 
  72 |         Integer lv1 = nftMapper.countByRarity("lv1");
  73 |         System.out.println(lv1);
  74 | 
  75 |     }
  76 | 
  77 |     // 将 nft_id 为 nftId 的数据的稀有值字段改为 lv{X}
  78 |     private void update(Integer nftId) {
  79 |         int update = nftMapper.update(null, Wrappers.lambdaUpdate(TaxAllNftDo.class)
  80 |                 .eq(TaxAllNftDo::getNftId, nftId)
  81 |                 .set(TaxAllNftDo::getRarity, "lv6"));
  82 |         if (update != 0) {
  83 |             log.info("更新完成，nft_id: {}", nftId);
  84 |             System.out.println("更新完成，nft_id: " + nftId);
  85 |         }
  86 |     }
  87 | 
  88 |     public int extractNumbers(String inputFile, String outputFile) {
  89 | 
  90 |         int count = 0;
  91 |         try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
  92 |              BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {
  93 | 
  94 |             String line;
  95 |             while ((line = reader.readLine()) != null) {
  96 |                 String number = extractNumber(line);
  97 |                 if (CharSequenceUtil.isNotBlank(number)) {
  98 |                     writer.write(number);
  99 |                     writer.newLine();
 100 |                     count++;
 101 | 
 102 |                     // 更新数据库字段
 103 |                     update(Integer.parseInt(number));
 104 |                 }
 105 |             }
 106 | 
 107 |             System.out.println("数字提取完成，已输出到文件：" + outputFile);
 108 | 
 109 |         } catch (IOException e) {
 110 |             e.printStackTrace();
 111 |         }
 112 |         return count;
 113 |     }
 114 | 
 115 |     private static String extractNumber(String line) {
 116 |         int startIndex = line.lastIndexOf("#");
 117 |         if (startIndex >= 0) {
 118 |             return line.substring(startIndex + 1).trim();
 119 |         } else {
 120 |             return "";
 121 |         }
 122 |     }
 123 | 
 124 |     @Autowired
 125 |     Tax1of1NftDoMapper of1NftDoMapper;
 126 | 
 127 |     @Test
 128 |     void Lv6() {
 129 |         CreatorParam param = new CreatorParam();
 130 |         param.setNftId(3);
 131 | 
 132 | 
 133 |         boolean b = RarityUtil.isLV1(param.getNftId());
 134 | 
 135 |         System.out.println(b);
 136 | 
 137 |     }
 138 | 
 139 |     @Test
 140 |     void select() {
 141 |         List<Integer> list = new ArrayList();
 142 |         list.add(1);
 143 |         list.add(2);
 144 | 
 145 |         LambdaUpdateWrapper<TaxAllNftDo> updateWrapper = new LambdaUpdateWrapper<>();
 146 |         updateWrapper.set(TaxAllNftDo::getTaxStatus, 1)
 147 |                 .in(TaxAllNftDo::getNftId, list);
 148 | 
 149 |         int update = nftMapper.update(null, updateWrapper);
 150 | 
 151 |         System.out.println(update);
 152 |     }
 153 | 
 154 |     @Autowired
 155 |     TaxAllNftDoMapper nftDoMapper;
 156 | 
 157 |     @Test
 158 |     void insert() {
 159 |         try  {
 160 |             // 加载Excel文件
 161 |             FileInputStream file = new FileInputStream(new File("/Users/hc-101/Desktop/project/work/NFT_UTXO/nft_mint_msg.xlsx"));
 162 | 
 163 |             // 创建工作簿对象
 164 |             Workbook workbook = WorkbookFactory.create(file);
 165 | 
 166 |             // 获取第一个工作表
 167 |             Sheet sheet = workbook.getSheetAt(0);
 168 | 
 169 |             // 遍历数据行，忽略标题行
 170 |             for (int i = 1; i <= sheet.getLastRowNum(); i++) {
 171 |                 Row row = sheet.getRow(i);
 172 | 
 173 |                 // 从每一行获取对应的单元格数据
 174 |                 Integer nftId = (int) row.getCell(0).getNumericCellValue();
 175 |                 String gtId = row.getCell(1).getStringCellValue();
 176 |                 String address = row.getCell(2).getStringCellValue();
 177 |                 String nftUtxo = row.getCell(3).getStringCellValue();
 178 | 
 179 |                 TaxAllNftDo nftDo = new TaxAllNftDo();
 180 |                 nftDo.setNftId(nftId);
 181 |                 nftDo.setGtId(gtId);
 182 |                 nftDo.setAddress(address);
 183 |                 nftDo.setNftUtxo(nftUtxo);
 184 | 
 185 |                 System.out.println(nftDo);
 186 |                 System.out.println("第"+i+"行数据");
 187 | 
 188 |                 // 执行插入操作
 189 |                 nftDoMapper.update(nftDo, Wrappers.lambdaUpdate(TaxAllNftDo.class)
 190 |                         .eq(TaxAllNftDo::getNftId, nftId));
 191 |             }
 192 | 
 193 |             // 关闭工作簿和文件流
 194 |             workbook.close();
 195 |             file.close();
 196 |         } catch (IOException e) {
 197 |             e.printStackTrace();
 198 |         }
 199 |     }
 200 | 
 201 |     @Autowired
 202 |     MintService mintService;
 203 | 
 204 |     @Test
 205 |     public void test() {
 206 |         List<Integer> list = new ArrayList<>();
 207 |         list.add(8);
 208 |         list.add(1);
 209 |         list.add(4);
 210 | 
 211 |         List<AddressUtxo> nftUtxos = mintService.getNftUtxos(list);
 212 |         System.out.println(nftUtxos);
 213 |     }
 214 | 
 215 | 
 216 |     @Autowired
 217 |     AstroOrderDoMapper doMapper;
 218 | 
 219 | 
 220 |     @Test
 221 |     void Big() {
 222 | 
 223 |         PayCallBackRequest request = new PayCallBackRequest();
 224 |         request.setPayAmt("0.20000000");
 225 | 
 226 |         BigDecimal payAmt = new BigDecimal(request.getPayAmt()).setScale(2, RoundingMode.HALF_UP);
 227 |         log.info("payAmt param:{}",payAmt);
 228 | 
 229 | 
 230 |         AstroOrderDo orderDo = doMapper.selectOne(Wrappers.lambdaQuery(AstroOrderDo.class)
 231 |                 .eq(AstroOrderDo::getTxId, "ab9d452f2a7247c9134f9112f0a313f06b7194e59f5e812b943e057d6722da91"));
 232 | 
 233 |         BigDecimal payAmount = orderDo.getPayAmount();
 234 | 
 235 | 
 236 |         boolean equals = payAmt.equals(payAmount);
 237 | 
 238 |         System.out.println(equals);
 239 | 
 240 |     }
 241 | 
 242 |     @Autowired
 243 |     AstroPubPayLogDoMapper pubPayLogDoMapper;
 244 | 
 245 |     @Test
 246 |     void updateTest() {
 247 | 
 248 |         String address = "DGJsyH8oEr5i3UpgyUHvmn331D8VJ3KCwe";
 249 | 
 250 |         AstroPubPayLogDo pubDo = pubPayLogDoMapper.selectOne(Wrappers.lambdaQuery(AstroPubPayLogDo.class)
 251 |                 .eq(AstroPubPayLogDo::getUserUrl, address));
 252 | 
 253 | 
 254 |         pubDo.setMintAmount(pubDo.getMintAmount() + 5);
 255 |         pubDo.setOtherJson(null);
 256 |         pubDo.setOtherJson(JSONUtil.toJsonStr(pubDo)); // payAmt 最后一次更新的全量数据
 257 |         int res = pubPayLogDoMapper.update(pubDo, Wrappers.lambdaUpdate(AstroPubPayLogDo.class)
 258 |                 .eq(AstroPubPayLogDo::getUserUrl, address));
 259 | 
 260 |         System.out.println(JSONUtil.toJsonStr(pubDo));
 261 |     }
 262 | 
 263 | 
 264 |     @Autowired
 265 |     private JavaMailSender mailSender;
 266 | 
 267 |     @Value("13750545017@163.com")
 268 |     private String mailFrom;
 269 | 
 270 |     /**
 271 |      * 发送简单邮件
 272 |      * @param
 273 |      * @param
 274 |      * @param
 275 |      * @return
 276 |      */
 277 |     @Test
 278 |     public void sendSimpleMail(){
 279 |         try (ServerSocket serverSocket = new ServerSocket(0)){
 280 | 
 281 | 
 282 |             InetAddress localhost = InetAddress.getLocalHost();
 283 |             int portSocket = serverSocket.getLocalPort();
 284 | 
 285 |             String to = "13750545017@163.com";
 286 |             String subject =localhost.toString();
 287 |             String content = localhost.toString();
 288 | 
 289 |         SimpleMailMessage message = new SimpleMailMessage();
 290 |         message.setFrom(mailFrom);
 291 |         message.setTo(to);
 292 |         message.setSubject(subject);
 293 |         message.setText(content+localhost.toString()+portSocket);
 294 | 
 295 |         mailSender.send(message);
 296 |         System.out.println(Response.success());
 297 |         }catch (Exception e){
 298 |             log.error("发送邮件发生错误e={}","13750545017@163.com",e);
 299 |             System.out.println(Response.error(233,"发送邮件发生异常"));
 300 |         }
 301 | 
 302 |     }
 303 | 
 304 |     @Autowired
 305 |     TaxAllNftDoMapper taxAllNftDoMapper;
 306 | 
 307 |     @Test
 308 |     void sell() {
 309 | 
 310 |         Integer integer = taxAllNftDoMapper.firstUnSoldNum1();
 311 | 
 312 |         if (integer == null) {
 313 |             System.out.println("null");
 314 |         }
 315 | 
 316 | 
 317 |         System.out.println(integer);
 318 |         System.out.println("未出售长度"+integer);
 319 | 
 320 |     }
 321 | 
 322 |     @Autowired
 323 |     OrderMapper orderMapper;
 324 | 
 325 |     @Test
 326 |     void check() {
 327 | 
 328 |         OrderDo orderDo = orderMapper.selectOne(Wrappers.lambdaQuery(OrderDo.class)
 329 |                 .eq(OrderDo::getRichOrderId, 1719031276557651969L));
 330 | 
 331 | 
 332 |         System.out.println(orderDo);
 333 | 
 334 |         BigDecimal bigDecimal = new BigDecimal("0.1");
 335 | 
 336 |         String bigDecimalStr = "0.1";
 337 | 
 338 | 
 339 |         if (orderDo.getRewardAmt().equals(bigDecimal)) {
 340 |             System.out.println("truebigDecimal");
 341 |         }
 342 | 
 343 |         if (orderDo.getRewardAmt().equals(bigDecimalStr)) {
 344 |             System.out.println("truebigDecimalStr");
 345 |         }
 346 | 
 347 | 
 348 |     }
 349 | 
 350 | 
 351 |     @Test
 352 |     void check1() {
 353 | 
 354 |         String address = "DGJsyH8oEr5i3UpgyUHvmn331D8VJ3KCwe";
 355 |         List<IpfsImgVo> nftList = nftMapper.getNftList(address);
 356 | 
 357 |         for (IpfsImgVo vo : nftList) {
 358 |             System.out.println(vo);
 359 |         }
 360 | 
 361 |         System.out.println(nftList.size());
 362 | 
 363 |         System.out.println(nftList);
 364 | 
 365 | 
 366 |     }
 367 | 
 368 | 
 369 | 
 370 | 
 371 | 
 372 | 
 373 | 
 374 | 
 375 | 
 376 | 
 377 | 
 378 | 
 379 | }
 380 | 
 381 | 
 382 | 
 383 | 



// ====== FILE: ./src/test/java/com/astro/CompletableFutureDemo.java ======

   1 | package com.astro;
   2 | 
   3 | import java.util.concurrent.CompletableFuture;
   4 | import java.util.concurrent.ExecutorService;
   5 | import java.util.concurrent.Executors;
   6 | 
   7 | public class CompletableFutureDemo {
   8 | 
   9 |     public static void main(String[] args) {
  10 |         ExecutorService executor = Executors.newFixedThreadPool(3);
  11 | 
  12 |         // 异步执行三个方法
  13 |         CompletableFuture<Boolean> future1 = CompletableFuture.supplyAsync(() -> {
  14 |             try {
  15 |                 Thread.sleep(1000);
  16 |             } catch (InterruptedException e) {
  17 |                 e.printStackTrace();
  18 |             }
  19 |             System.out.println("Method 1");
  20 |             return true;
  21 |         }, executor);
  22 | 
  23 |         CompletableFuture<Boolean> future2 = CompletableFuture.supplyAsync(() -> {
  24 |             try {
  25 |                 Thread.sleep(500);
  26 |             } catch (InterruptedException e) {
  27 |                 e.printStackTrace();
  28 |             }
  29 |             System.out.println("Method 2");
  30 |             return true;
  31 |         }, executor);
  32 | 
  33 |         CompletableFuture<Boolean> future3 = CompletableFuture.supplyAsync(() -> {
  34 |             try {
  35 |                 Thread.sleep(2000);
  36 |             } catch (InterruptedException e) {
  37 |                 e.printStackTrace();
  38 |             }
  39 |             System.out.println("Method 3");
  40 |             return true;
  41 |         }, executor);
  42 | 
  43 |         // 等待所有 CompletableFuture 执行完成
  44 |         CompletableFuture.allOf(future1, future2, future3).join();
  45 | 
  46 |         System.out.println("All methods completed");
  47 | 
  48 |         executor.shutdown();
  49 |     }
  50 | }



// ====== FILE: ./src/test/java/com/astro/lc/Sol.java ======

   1 | package com.astro.lc;
   2 | 
   3 | public class Sol {
   4 | 
   5 |     class ListNode {
   6 | 
   7 |         int val;
   8 | 
   9 |         ListNode next;
  10 | 
  11 |         ListNode(int val) {
  12 | 
  13 |         }
  14 | 
  15 |     }
  16 | 
  17 |     public ListNode add(ListNode list1, ListNode list2) {
  18 | 
  19 |         ListNode head = null;
  20 |         if (list1 == null && list2 == null) {
  21 |             return head;
  22 |         }
  23 | 
  24 |         ListNode dum = new ListNode(0);
  25 |         ListNode p1 = list1;
  26 |         ListNode p2 = list2;
  27 |         ListNode cur = dum;
  28 | 
  29 |         int a = 0;
  30 |         while (p1 != null && p2 != null) {
  31 |             ListNode nowCur;
  32 | 
  33 |             if (p1.val + p2.val <  10) {
  34 |                 nowCur = new ListNode(p1.val + p2.val + a);
  35 |             } else {
  36 |                 nowCur = new ListNode((p1.val + p2.val) % 10);
  37 |                 a = p1.val + p2.val - 10;
  38 |             }
  39 | 
  40 |             p1 = p1.next;
  41 |             p2 = p2.next;
  42 |         }
  43 | 
  44 | 
  45 |         return dum.next;
  46 |     }
  47 | 
  48 | }



// ====== FILE: ./src/test/java/com/astro/lc/Sol163.java ======

   1 | package com.astro.lc;
   2 | 
   3 | import java.util.ArrayList;
   4 | import java.util.List;
   5 | 
   6 | public class Sol163 {
   7 | 
   8 | 
   9 | 
  10 |     public static void main(String[] args) {
  11 |         int[] nums = {3, 4 , 6, 50, 75};
  12 | 
  13 |         int low = 0;
  14 |         int up = 99;
  15 |         List<String> sol = sol(nums, 0, 99);
  16 | 
  17 |         System.out.println(sol);
  18 |     }
  19 | 
  20 |     public static List<String> sol(int[] nums, int low, int up) {
  21 | 
  22 |         List<String> res = new ArrayList<>();
  23 | 
  24 |         if (nums[0] != low) {
  25 |             if (nums[0] - low == 2) {
  26 |                 res.add(Integer.toString(low-1));
  27 |             } else if (up - nums[nums.length-1] > 2) {
  28 |                 StringBuilder sb = new StringBuilder();
  29 |                 sb.append(Integer.toString(low)).append("->").append(Integer.toString(nums[1]-1));
  30 |                 res.add(sb.toString());
  31 |             }
  32 |         }
  33 | 
  34 |         for (int i = 0; i < nums.length; i++) {
  35 |             if (i != 0 && nums[i] - nums[i-1] == 2) {
  36 |                 String s = Integer.toString(nums[i] - 1);
  37 |                 res.add(s);
  38 |             } else if (i != 0 && nums[i] - nums[i-1] > 2){
  39 |                 StringBuilder sb = new StringBuilder();
  40 |                 sb.append(Integer.toString(nums[i-1] + 1)).append("->").append(Integer.toString(nums[i] -1));
  41 |                 res.add(sb.toString());
  42 |             }
  43 |         }
  44 | 
  45 |         if (nums[nums.length-1] != up) {
  46 |             if (up - nums[nums.length-1] == 2) {
  47 |                 res.add(Integer.toString(up-1));
  48 |             } else if (up - nums[nums.length-1] > 2) {
  49 |                 StringBuilder sb = new StringBuilder();
  50 |                 sb.append(Integer.toString(nums[nums.length-1] + 1)).append("->").append(Integer.toString(up));
  51 |                 res.add(sb.toString());
  52 |             }
  53 |         }
  54 | 
  55 |         return res;
  56 |     }
  57 | 
  58 | 
  59 | 
  60 | }



// ====== FILE: ./src/test/java/com/astro/lc/MissingRanges.java ======

   1 | package com.astro.lc;
   2 | 
   3 | import java.util.ArrayList;
   4 | import java.util.List;
   5 | 
   6 | public class MissingRanges {
   7 |     public List<String> findMissingRanges(int[] nums, int lower, int upper) {
   8 |         List<String> result = new ArrayList<>();
   9 | 
  10 |         // 处理 lower 到第一个元素之间的缺失区间
  11 |         if (lower < nums[0]) {
  12 |             result.add(getRange(lower, nums[0] - 1));
  13 |         }
  14 | 
  15 |         // 处理数组中间的缺失区间
  16 |         for (int i = 1; i < nums.length; i++) {
  17 |             if (nums[i] > nums[i - 1] + 1) {
  18 |                 result.add(getRange(nums[i - 1] + 1, nums[i] - 1));
  19 |             }
  20 |         }
  21 | 
  22 |         // 处理最后一个元素到 upper 之间的缺失区间
  23 |         if (upper > nums[nums.length - 1]) {
  24 |             result.add(getRange(nums[nums.length - 1] + 1, upper));
  25 |         }
  26 | 
  27 |         return result;
  28 |     }
  29 | 
  30 |     // 辅助方法，用于生成缺失区间字符串
  31 |     private String getRange(int start, int end) {
  32 |         return start == end ? String.valueOf(start) : start + "->" + end;
  33 |     }
  34 | 
  35 |     public static void main(String[] args) {
  36 |         int[] nums = {0, 1, 3, 50, 75};
  37 |         int lower = 0;
  38 |         int upper = 99;
  39 |         MissingRanges solution = new MissingRanges();
  40 |         List<String> result = solution.findMissingRanges(nums, lower, upper);
  41 |         System.out.println(result);
  42 |     }
  43 | }



// ====== FILE: ./src/main/java/com/astro/AstroApplication.java ======

   1 | package com.astro;
   2 | 
   3 | import org.apache.ibatis.logging.LogFactory;
   4 | import org.apache.ibatis.logging.stdout.StdOutImpl;
   5 | import org.springframework.boot.SpringApplication;
   6 | import org.springframework.boot.autoconfigure.SpringBootApplication;
   7 | 
   8 | @SpringBootApplication
   9 | public class AstroApplication {
  10 | 
  11 | 	public static void main(String[] args) {
  12 | 		LogFactory.useCustomLogging(StdOutImpl.class);
  13 | 		SpringApplication.run(AstroApplication.class, args);
  14 | 	}
  15 | 
  16 | }



// ====== FILE: ./src/main/java/com/astro/vo/ValidUtxoVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class ValidUtxoVo {
   7 | 
   8 | 
   9 |     /**
  10 |      * nft utxo
  11 |      */
  12 |     private String utxo;
  13 | 
  14 |     /**
  15 |      * nft index
  16 |      */
  17 |     private Integer index;
  18 | 
  19 | 
  20 |     /**
  21 |      * nft价格
  22 |      */
  23 |     private String value;
  24 | 
  25 |     /**
  26 |      *
  27 |      */
  28 |     private String jsonString;
  29 | 
  30 | }



// ====== FILE: ./src/main/java/com/astro/vo/MintQueryVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.io.Serializable;
   6 | 
   7 | @Data
   8 | public class MintQueryVo implements Serializable {
   9 | 
  10 |     /**
  11 |      * 可以 mint 的数量
  12 |      */
  13 |     private Integer mintAmount;
  14 | 
  15 | }



// ====== FILE: ./src/main/java/com/astro/vo/GetCoinsVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.math.BigDecimal;
   6 | 
   7 | @Data
   8 | public class GetCoinsVo {
   9 | 
  10 |     private BigDecimal coins;
  11 | 
  12 | }



// ====== FILE: ./src/main/java/com/astro/vo/UpdateRewVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class UpdateRewVo {
   7 | 
   8 | }



// ====== FILE: ./src/main/java/com/astro/vo/TokenParam.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class TokenParam {
   7 | 
   8 |     private String address;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/vo/QueryCoinsVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class QueryCoinsVo {
   7 | 
   8 |     private String coins;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/vo/BaseRewVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class BaseRewVo {
   7 | 
   8 |     private Long rewBase;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/vo/UtxoVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class UtxoVo {
   7 | 
   8 |     /**
   9 |      * nft 编号
  10 |      */
  11 |     private Integer nftId;
  12 | 
  13 |     /**
  14 |      * 创世铭文
  15 |      */
  16 |     private String  gtId;
  17 | 
  18 |     /**
  19 |      * 获取 nft utxo
  20 |      */
  21 |     private String  nftUtxo;
  22 | 
  23 | 
  24 |     /**
  25 |      * 钱包地址
  26 |      */
  27 |     private String  address;
  28 | 
  29 | }



// ====== FILE: ./src/main/java/com/astro/vo/IpfsImgVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class IpfsImgVo {
   7 | 
   8 |     /**
   9 |      * 图片url
  10 |      */
  11 |     private String ipfsUrl;
  12 | 
  13 | 
  14 |     /**
  15 |      * 编号名称
  16 |      */
  17 |     private String name;
  18 | 
  19 |     /**
  20 |      * nft_id
  21 |      */
  22 |     private Integer nftId;
  23 | 
  24 | 
  25 |     /**
  26 |      * 创世铭文
  27 |      */
  28 |     private String gtId;
  29 | 
  30 |     /**
  31 |      * nft Utxo
  32 |      */
  33 |     private String nftUtxo;
  34 | 
  35 |     /**
  36 |      * 稀有度
  37 |      */
  38 |     private String rarity;
  39 | 
  40 | }



// ====== FILE: ./src/main/java/com/astro/vo/ConfigVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class ConfigVo {
   7 | 
   8 | 
   9 |      String config;
  10 | 
  11 | }



// ====== FILE: ./src/main/java/com/astro/vo/InviteCodeVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.io.Serializable;
   6 | 
   7 | @Data
   8 | public class InviteCodeVo implements Serializable {
   9 | 
  10 |     private Long inviteCode;
  11 | 
  12 | }



// ====== FILE: ./src/main/java/com/astro/vo/GiveVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.math.BigDecimal;
   6 | 
   7 | @Data
   8 | public class GiveVo {
   9 | 
  10 |     // 钱包地址
  11 |     private String address;
  12 | 
  13 |     // 能领取的收益
  14 |     private BigDecimal amount;
  15 | 
  16 |     private String orderId;
  17 | 
  18 | }



// ====== FILE: ./src/main/java/com/astro/vo/MintPayVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.io.Serializable;
   6 | import java.math.BigDecimal;
   7 | 
   8 | @Data
   9 | public class MintPayVo implements Serializable {
  10 | 
  11 |     /**
  12 |      * mint 支付金额
  13 |      */
  14 |     private BigDecimal payAmount;
  15 | 
  16 |     /**
  17 |      * 可以 mint 的数量
  18 |      */
  19 |     private Integer curMintAmount;
  20 | 
  21 |     /**
  22 |      * 支付订单 id
  23 |      */
  24 |     private String orderId;
  25 | 
  26 | }



// ====== FILE: ./src/main/java/com/astro/vo/UpdateGainsVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import com.astro.vo.dto.HolderDto;
   4 | import lombok.Data;
   5 | 
   6 | import java.time.LocalDate;
   7 | import java.util.List;
   8 | 
   9 | @Data
  10 | public class UpdateGainsVo {
  11 | 
  12 |     /**
  13 |      * 收益数据
  14 |      */
  15 |     private Long base;
  16 | 
  17 |     /***
  18 |      * 矿厂产出日期
  19 |      */
  20 |     private LocalDate today;
  21 | 
  22 |     private List<HolderDto> holderList;
  23 | 
  24 | }



// ====== FILE: ./src/main/java/com/astro/vo/TxCheckVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | public class TxCheckVo {
   4 | }



// ====== FILE: ./src/main/java/com/astro/vo/ImgVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.util.List;
   6 | 
   7 | @Data
   8 | public class ImgVo {
   9 | 
  10 |     /**
  11 |      * 图片url
  12 |      */
  13 |     private String imgUrl;
  14 | 
  15 | 
  16 |     /**
  17 |      * 编号名称
  18 |      */
  19 |     private String name;
  20 | 
  21 | }



// ====== FILE: ./src/main/java/com/astro/vo/ChainMsgVo.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class ChainMsgVo {
   7 | 
   8 | 
   9 | }



// ====== FILE: ./src/main/java/com/astro/vo/UtxoString.java ======

   1 | package com.astro.vo;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class UtxoString {
   7 | 
   8 |     private String nft_utxo;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/vo/dto/ClaimStatusDto.java ======

   1 | package com.astro.vo.dto;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class ClaimStatusDto {
   7 | 
   8 |     private Integer statusCode;
   9 | 
  10 |     private String msg;
  11 | 
  12 | }



// ====== FILE: ./src/main/java/com/astro/vo/dto/HolderDto.java ======

   1 | package com.astro.vo.dto;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class HolderDto {
   7 | 
   8 |     /**
   9 |      * 钱包地址
  10 |      */
  11 |     private String address;
  12 | 
  13 |     /**
  14 |      * 稀有度1
  15 |      */
  16 |     private Integer lv1amt;
  17 | 
  18 |     /**
  19 |      * 稀有度2
  20 |      */
  21 |     private Integer lv2amt;
  22 | 
  23 |     /**
  24 |      * 稀有度3
  25 |      */
  26 |     private Integer lv3amt;
  27 | 
  28 |     /**
  29 |      * 稀有度4
  30 |      */
  31 |     private Integer lv4amt;
  32 | 
  33 |     /**
  34 |      * 稀有度5
  35 |      */
  36 |     private Integer lv5amt;
  37 | 
  38 |     /**
  39 |      * 稀有度6
  40 |      */
  41 |     private Integer lv6amt;
  42 | 
  43 | }


// ====== FILE: ./src/main/java/com/astro/vo/dto/NftResenderDto.java ======

   1 | package com.astro.vo.dto;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | /**
   6 |  * 补发实体
   7 |  */
   8 | @Data
   9 | public class NftResenderDto {
  10 | 
  11 |     private String orderId;
  12 | 
  13 |     private String from;
  14 | 
  15 |     private String nftUtxo;
  16 | 
  17 |     private String toAddress;
  18 | 
  19 | }



// ====== FILE: ./src/main/java/com/astro/vo/result/EachPalRes.java ======

   1 | package com.astro.vo.result;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class EachPalRes {
   7 | 
   8 |     /**
   9 |      * 各自表更改信息
  10 |      */
  11 |     private String msg;
  12 | 
  13 |     /**
  14 |      * 各自表更改结果
  15 |      */
  16 |     private Boolean success;
  17 | 
  18 | }



// ====== FILE: ./src/main/java/com/astro/vo/result/SenderRes.java ======

   1 | package com.astro.vo.result;
   2 | 
   3 | import com.astro.param.AddressUtxo;
   4 | import lombok.Data;
   5 | import org.apache.commons.math3.analysis.function.Add;
   6 | 
   7 | import java.util.List;
   8 | @Data
   9 | public class SenderRes {
  10 | 
  11 |     /**
  12 |      * 验签字段（未启用）null
  13 |      */
  14 |     private String sign;
  15 | 
  16 |     /**
  17 |      * 分发前 nft 所属的钱包地址和对应utxo
  18 |      */
  19 |     private List<AddressUtxo>  addressUtxo;
  20 | 
  21 |     /**
  22 |      * nft 编号列表
  23 |      */
  24 |     private String nftList;
  25 | 
  26 |     /**
  27 |      *  买家的钱包地址
  28 |      */
  29 |     private String address;
  30 | 
  31 |     /**
  32 |      * 库存中还有无 nft
  33 |      */
  34 |     private Boolean senderSuccess;
  35 | 
  36 |     /**
  37 |      * 分发状态码
  38 |      */
  39 |     private Integer senderStatus;
  40 | 
  41 | 
  42 | }



// ====== FILE: ./src/main/java/com/astro/response/Response.java ======

   1 | package com.astro.response;
   2 | 
   3 | import com.astro.constant.HttpCode;
   4 | import lombok.Getter;
   5 | import lombok.NoArgsConstructor;
   6 | import lombok.Setter;
   7 | import lombok.ToString;
   8 | import org.slf4j.MDC;
   9 | 
  10 | import java.io.Serializable;
  11 | 
  12 | 
  13 | @Getter
  14 | @Setter
  15 | @NoArgsConstructor
  16 | @ToString
  17 | public class Response<T> implements Serializable {
  18 | 
  19 | 	private static final long serialVersionUID = 5771204995227939321L;
  20 | 
  21 | 	private String requestId;
  22 | 
  23 | 	private Integer code;
  24 | 
  25 | 	private String message;
  26 | 
  27 | 	private T data;
  28 | 
  29 | 	public Response(String requestId, Integer code, String message, T data) {
  30 | 		this.requestId = requestId;
  31 | 		this.code = code;
  32 | 		this.message = message;
  33 | 		this.data = data;
  34 | 	}
  35 | 
  36 | 	public static <T> Response<T> success(T data) {
  37 | 		Response<T> result = new Response<>();
  38 | 		result.requestId = MDC.get("REQUEST_ID");
  39 | 		result.code = HttpCode.SUCCESS;
  40 | 		result.data = data;
  41 | 		result.message = "success";
  42 | 		return result;
  43 | 	}
  44 | 
  45 | 	public static <T> Response<T> successMsg(T data, String message) {
  46 | 		Response<T> result = new Response<>();
  47 | 		result.requestId = MDC.get("REQUEST_ID");
  48 | 		result.code = HttpCode.SUCCESS;
  49 | 		result.data = data;
  50 | 		result.message = message;
  51 | 		return result;
  52 | 	}
  53 | 
  54 | 	public static <T> Response<T> successMsg(String message) {
  55 | 		Response<T> result = new Response<>();
  56 | 		result.requestId = MDC.get("REQUEST_ID");
  57 | 		result.code = HttpCode.SUCCESS;
  58 | 		result.message = message;
  59 | 		return result;
  60 | 	}
  61 | 
  62 | 	public static <T> Response<T> success() {
  63 | 		Response<T> result = new Response<>();
  64 | 		result.requestId = MDC.get("REQUEST_ID");
  65 | 		result.code = HttpCode.SUCCESS;
  66 | 		result.data = null;
  67 | 		result.message = "success";
  68 | 		return result;
  69 | 	}
  70 | 
  71 | 	public static <T> Response<T> error(Integer code, String message) {
  72 | 		Response<T> result = new Response<>();
  73 | 		result.requestId = MDC.get("REQUEST_ID");
  74 | 		result.code = code;
  75 | 		result.message = message;
  76 | 		return result;
  77 | 	}
  78 | 
  79 | 	public boolean isSuccess() {
  80 | 		return this.code == HttpCode.SUCCESS;
  81 | 	}
  82 | 
  83 | }



// ====== FILE: ./src/main/java/com/astro/config/ClusterProperties.java ======

   1 | package com.astro.config;
   2 | 
   3 | 
   4 | public class ClusterProperties {
   5 | 
   6 |     private String nodes;
   7 | 
   8 |     public String getNodes() {
   9 |         return nodes;
  10 |     }
  11 | 
  12 |     public void setNodes(String nodes) {
  13 |         this.nodes = nodes;
  14 |     }
  15 | }



// ====== FILE: ./src/main/java/com/astro/config/RedisConfig.java ======

   1 | package com.astro.config;
   2 | 
   3 | 
   4 | import com.fasterxml.jackson.annotation.JsonAutoDetect;
   5 | import com.fasterxml.jackson.annotation.JsonTypeInfo;
   6 | import com.fasterxml.jackson.annotation.PropertyAccessor;
   7 | import com.fasterxml.jackson.databind.ObjectMapper;
   8 | import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
   9 | import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
  10 | import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;
  11 | import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
  12 | import com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;
  13 | import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;
  14 | import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
  15 | import com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;
  16 | import org.springframework.boot.SpringBootConfiguration;
  17 | import org.springframework.context.annotation.Bean;
  18 | import org.springframework.data.redis.connection.RedisConnectionFactory;
  19 | import org.springframework.data.redis.core.RedisTemplate;
  20 | import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
  21 | import org.springframework.data.redis.serializer.RedisSerializer;
  22 | 
  23 | import java.time.LocalDate;
  24 | import java.time.LocalDateTime;
  25 | import java.time.LocalTime;
  26 | import java.time.format.DateTimeFormatter;
  27 | 
  28 | @SpringBootConfiguration
  29 | public class RedisConfig {
  30 | 
  31 |     @Bean
  32 |     public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory, Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer)
  33 |     {
  34 |         RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();
  35 |         redisTemplate.setConnectionFactory(connectionFactory);
  36 |         redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);
  37 |         redisTemplate.setKeySerializer(RedisSerializer.string());
  38 |         redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);
  39 |         redisTemplate.setHashKeySerializer(RedisSerializer.string());
  40 |         redisTemplate.afterPropertiesSet();
  41 |         return redisTemplate;
  42 |     }
  43 | 
  44 |     @Bean
  45 |     public Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer() {
  46 |         Jackson2JsonRedisSerializer<Object> serializer = new Jackson2JsonRedisSerializer<>(Object.class);
  47 |         ObjectMapper mapper = new ObjectMapper();
  48 |         mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
  49 |         mapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
  50 | 
  51 |         JavaTimeModule javaTimeModule = new JavaTimeModule();
  52 |         // redis序列化 localDateTime
  53 |         DateTimeFormatter localDateTime = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
  54 |         javaTimeModule.addSerializer(LocalDateTime.class, new LocalDateTimeSerializer(localDateTime));
  55 |         javaTimeModule.addDeserializer(LocalDateTime.class, new LocalDateTimeDeserializer(localDateTime));
  56 | 
  57 |         // redis序列化 localDate
  58 |         DateTimeFormatter localDate = DateTimeFormatter.ofPattern("yyyy-MM-dd");
  59 |         javaTimeModule.addSerializer(LocalDate.class, new LocalDateSerializer(localDate));
  60 |         javaTimeModule.addDeserializer(LocalDate.class, new LocalDateDeserializer(localDate));
  61 | 
  62 |         // redis序列化 localTime
  63 |         DateTimeFormatter localTime = DateTimeFormatter.ofPattern("HH:mm:ss");
  64 |         javaTimeModule.addSerializer(LocalTime.class, new LocalTimeSerializer(localTime));
  65 |         javaTimeModule.addDeserializer(LocalTime.class, new LocalTimeDeserializer(localTime));
  66 | 
  67 |         mapper.registerModule(javaTimeModule);
  68 |         serializer.setObjectMapper(mapper);
  69 |         return serializer;
  70 |     }
  71 | 
  72 | 
  73 | }


// ====== FILE: ./src/main/java/com/astro/config/TestConfig.java ======

   1 | package com.astro.config;
   2 | 
   3 | import org.springframework.boot.SpringBootConfiguration;
   4 | 
   5 | @SpringBootConfiguration
   6 | public class TestConfig {
   7 | 
   8 | 
   9 | 
  10 | 
  11 | }



// ====== FILE: ./src/main/java/com/astro/config/MybatisConfig.java ======

   1 | package com.astro.config;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.DbType;
   4 | import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
   5 | import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
   6 | import org.springframework.boot.SpringBootConfiguration;
   7 | import org.springframework.context.annotation.Bean;
   8 | 
   9 | @SpringBootConfiguration
  10 | public class MybatisConfig {
  11 | 
  12 |     @Bean
  13 |     public MybatisPlusInterceptor mybatisPlusInterceptor() {
  14 |         MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
  15 |         interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
  16 |         return interceptor;
  17 |     }
  18 | }



// ====== FILE: ./src/main/java/com/astro/config/RedissonConfig.java ======

   1 | package com.astro.config;
   2 | 
   3 | import org.redisson.Redisson;
   4 | import org.redisson.api.RedissonClient;
   5 | import org.springframework.context.annotation.Bean;
   6 | import org.springframework.context.annotation.Configuration;
   7 | import org.redisson.config.Config;
   8 | 
   9 | 
  10 | @Configuration
  11 | public class RedissonConfig {
  12 | 
  13 | //    @Value("${redis.address}")
  14 | //    private String redisAddress;
  15 | 
  16 |     @Bean
  17 |     public RedissonClient redissonClient() {
  18 |         Config config = new Config();
  19 |         config.useSingleServer().setAddress("redis://127.0.0.1:6379");
  20 |         return Redisson.create(config);
  21 |     }
  22 | 
  23 |     @Bean
  24 |     public Config getConfig() {
  25 |         Config config = new Config();
  26 |         config.useSingleServer().setAddress("redis://127.0.0.1:6379");
  27 |         return config;
  28 |     }
  29 | }


// ====== FILE: ./src/main/java/com/astro/config/RedissonProperties.java ======

   1 | package com.astro.config;
   2 | 
   3 | import lombok.Data;
   4 | import org.springframework.boot.context.properties.ConfigurationProperties;
   5 | 
   6 | 
   7 | @ConfigurationProperties(prefix = "redisson")
   8 | @Data
   9 | public class RedissonProperties {
  10 | 
  11 | 	/**
  12 | 	 * redis地址
  13 | 	 */
  14 | 	private String addresses;
  15 | 
  16 | 	private ClusterProperties cluster;
  17 | 
  18 | 	/**
  19 | 	 * 密码
  20 | 	 */
  21 | 	private String password;
  22 | 
  23 | 	/**
  24 | 	 * 发布和订阅连接的最小空闲连接数
  25 | 	 */
  26 | 	private int subscriptionConnectionMinimumIdleSize = 1;
  27 | 
  28 | 	/**
  29 | 	 * 发布和订阅连接池大小
  30 | 	 */
  31 | 	private int subscriptionConnectionPoolSize = 5;
  32 | 
  33 | 	/**
  34 | 	 * 最小空闲连接数
  35 | 	 */
  36 | 	private int connectionMinimumIdleSize = 32;
  37 | 
  38 | 	/**
  39 | 	 * 连接池大小
  40 | 	 */
  41 | 	private int connectionPoolSize = 64;
  42 | 
  43 | 	/**
  44 | 	 * 连接超时，单位：毫秒
  45 | 	 */
  46 | 	private int connectTimeout = 10000;
  47 | 
  48 | 	/**
  49 | 	 * 命令等待超时，单位：毫秒
  50 | 	 */
  51 | 	private int timeout = 3000;
  52 | 
  53 | 	/**
  54 | 	 * 命令失败重试次数
  55 | 	 */
  56 | 	private int retryAttempts = 3;
  57 | 
  58 | 	/**
  59 | 	 * 数据库编号
  60 | 	 */
  61 | 	private int database = 0;
  62 | 
  63 | 
  64 | }



// ====== FILE: ./src/main/java/com/astro/config/ThreadPoolConfig.java ======

   1 | package com.astro.config;
   2 | 
   3 | import com.google.common.util.concurrent.ThreadFactoryBuilder;
   4 | import org.springframework.boot.SpringBootConfiguration;
   5 | import org.springframework.context.annotation.Bean;
   6 | import org.springframework.context.annotation.Configuration;
   7 | 
   8 | import java.util.concurrent.*;
   9 | import java.util.concurrent.atomic.AtomicInteger;
  10 | 
  11 | @SpringBootConfiguration
  12 | public class ThreadPoolConfig {
  13 | 
  14 |     @Bean(value = "jobCallbackAfterHandleThreadPool")
  15 |     public ExecutorService jobCallbackAfterHandleThreadPool() {
  16 | 
  17 |         ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNameFormat("job-callback-after-handle-pool-%d").build();
  18 | 
  19 |         ThreadPoolExecutor pool = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,
  20 |                 new LinkedBlockingQueue<>(20480), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());
  21 | 
  22 |         return pool;
  23 |     }
  24 | 
  25 |     @Bean(value = "bizThreadPool")
  26 |     public ExecutorService bizThreadPool() {
  27 | 
  28 |         ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNameFormat("biz-thread-pool-%d").build();
  29 | 
  30 |         ThreadPoolExecutor pool = new ThreadPoolExecutor(2, 2, 0L, TimeUnit.MILLISECONDS,
  31 |                 new LinkedBlockingQueue<>(20480), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());
  32 | 
  33 |         return pool;
  34 |     }
  35 | 
  36 |     @Bean("queryProdPool")
  37 |     public ExecutorService queryProdPool(){
  38 |         return new ThreadPoolExecutor(10, 20, 0, TimeUnit.SECONDS, new LinkedBlockingDeque<>(1000), new ThreadFactory() {
  39 |             final AtomicInteger atomicInteger = new AtomicInteger(1);
  40 |             @Override
  41 |             public Thread newThread(Runnable r) {
  42 |                 String name = "prod-task-"+atomicInteger.getAndIncrement();
  43 |                 return new Thread(null,r,name,0);
  44 |             }
  45 |         });
  46 |     }
  47 | }


// ====== FILE: ./src/main/java/com/astro/config/CorsConfig.java ======

   1 | package com.astro.config;
   2 | 
   3 | import org.springframework.boot.SpringBootConfiguration;
   4 | import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;
   5 | import org.springframework.boot.web.server.WebServerFactoryCustomizer;
   6 | import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;
   7 | import org.springframework.context.annotation.Bean;
   8 | import org.springframework.context.annotation.Configuration;
   9 | 
  10 | import org.springframework.web.cors.CorsConfiguration;
  11 | import org.springframework.web.cors.reactive.CorsWebFilter;
  12 | import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;
  13 | import org.springframework.web.servlet.config.annotation.CorsRegistry;
  14 | import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
  15 | 
  16 | @SpringBootConfiguration
  17 | public class CorsConfig implements WebMvcConfigurer {
  18 | 
  19 | 
  20 | 
  21 | }



// ====== FILE: ./src/main/java/com/astro/mapper/RichRewardLogMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.RichRewardLogDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface RichRewardLogMapper extends BaseMapper<RichRewardLogDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astro/mapper/PayCallBackLogMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.PayCallBackLogDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface PayCallBackLogMapper extends BaseMapper<PayCallBackLogDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astro/mapper/AstroAllPayLogDoMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.AstroAllPayLogDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | import org.apache.ibatis.annotations.Select;
   7 | 
   8 | @Mapper
   9 | public interface AstroAllPayLogDoMapper extends BaseMapper<AstroAllPayLogDo> {
  10 | 
  11 |     /**
  12 |      * 已经 mint 的数量
  13 |      * @return
  14 |      */
  15 |     @Select("SELECT SUM(mint_amount) FROM astro_all_pay_log")
  16 |     Integer countAll();
  17 | }



// ====== FILE: ./src/main/java/com/astro/mapper/InviteCodeMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.InviteCodeDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface InviteCodeMapper extends BaseMapper<InviteCodeDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astro/mapper/TestGoodMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.TestGood;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface TestGoodMapper extends BaseMapper<TestGood> {
   9 | }



// ====== FILE: ./src/main/java/com/astro/mapper/MintCallBackLogMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.MintCallBackLogDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface MintCallBackLogMapper extends BaseMapper<MintCallBackLogDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astro/mapper/OrderMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | 
   4 | import com.astro.pojo.OrderDo;
   5 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   6 | import org.apache.ibatis.annotations.Mapper;
   7 | 
   8 | @Mapper
   9 | public interface OrderMapper extends BaseMapper<OrderDo> {
  10 | }



// ====== FILE: ./src/main/java/com/astro/mapper/TaxNftTxDoMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.TaxNftTx;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface TaxNftTxDoMapper extends BaseMapper<TaxNftTx> {
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/mapper/AstroPubPayLogDoMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.AstroPubPayLogDo;
   4 | import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
   5 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   6 | import org.apache.ibatis.annotations.Mapper;
   7 | 
   8 | @Mapper
   9 | public interface AstroPubPayLogDoMapper extends BaseMapper<AstroPubPayLogDo> {
  10 | 
  11 | }



// ====== FILE: ./src/main/java/com/astro/mapper/MintPayLogMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.MintPayLogDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface MintPayLogMapper extends BaseMapper<MintPayLogDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astro/mapper/NftIndexMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.NftIndexDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface NftIndexMapper extends BaseMapper<NftIndexDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astro/mapper/Tax1of1NftDoMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.Tax1of1NftDo;
   4 | import com.astro.pojo.TaxAllNftDo;
   5 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   6 | import org.apache.ibatis.annotations.Mapper;
   7 | import org.apache.ibatis.annotations.Select;
   8 | 
   9 | import java.util.List;
  10 | 
  11 | @Mapper
  12 | public interface Tax1of1NftDoMapper extends BaseMapper<Tax1of1NftDo> {
  13 | 
  14 | }



// ====== FILE: ./src/main/java/com/astro/mapper/RewardBaseMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.RichRewardBaseDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface RewardBaseMapper extends BaseMapper<RichRewardBaseDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astro/mapper/AstroOgPayLogDoMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.AstroOgPayLogDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface AstroOgPayLogDoMapper extends BaseMapper<AstroOgPayLogDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astro/mapper/TaxAllNftDoMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.TaxAllNftDo;
   4 | import com.astro.vo.ImgVo;
   5 | import com.astro.vo.IpfsImgVo;
   6 | import com.astro.vo.dto.HolderDto;
   7 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   8 | import org.apache.ibatis.annotations.*;
   9 | 
  10 | import java.util.List;
  11 | 
  12 | @Mapper
  13 | public interface TaxAllNftDoMapper extends BaseMapper<TaxAllNftDo> {
  14 | 
  15 |     @Select("SELECT COUNT(*) FROM tax_all_nft WHERE rarity = #{rarity}")
  16 |     Integer countByRarity(@Param("rarity") String rarity);
  17 | 
  18 |     /**
  19 |      * 查找所有未售卖的 nft_list
  20 |      * @return
  21 |      */
  22 |     @Select("SELECT nft_id FROM tax_all_nft WHERE sell_status = 0")
  23 |     List<Integer> getAllUnSold();
  24 | 
  25 |     /**
  26 |      * 查找第一波发售的 2k 个 nftId
  27 |      */
  28 |     @Select("SELECT nft_id FROM tax_all_nft WHERE sell_status = 0 AND other_json = '1'")
  29 |     List<Integer> get1thUnSold();
  30 | 
  31 | 
  32 | 
  33 |     /**
  34 |      * 批量获取 nft 的 utxo hash
  35 |      * @param nftIds
  36 |      * @return
  37 |      */
  38 |     @Select("SELECT nft_utxo FROM tax_all_nft WHERE nft_id IN (#{nftIds})")
  39 |     List<String> fetchList(@Param("nftIds") List<Integer> nftIds);
  40 | 
  41 |     /**
  42 |      * 将库中的 nft 标记为在 mint 中已经出售
  43 |      * @param nftIds
  44 |      * @return
  45 |      */
  46 |     @Update("UPDATE tax_all_nft SET sell_status = 1 WHERE nft_id IN (#{nftIds})")
  47 |     void updateSellStatus(@Param("nftIds") List<Integer> nftIds);
  48 | 
  49 | 
  50 |     /**
  51 |      * 第一波发售未出售的数量
  52 |      */
  53 |     @Select("SELECT COUNT(*) FROM tax_all_nft WHERE sell_status = b'0' AND other_json = '1'")
  54 |     Integer firstUnSoldNum();
  55 | 
  56 | 
  57 |     /**
  58 |      * 第一波发售未出售的数量测试
  59 |      */
  60 |     @Select("SELECT COUNT(*) FROM tax_all_nft WHERE sell_status = b'1' AND other_json = '1'")
  61 |     Integer firstUnSoldNum1();
  62 | 
  63 | 
  64 |     /**
  65 |      * 获取所有持有者信息
  66 |      * @return
  67 |      */
  68 |     @Select("SELECT address, " +
  69 |             "SUM(CASE WHEN rarity = 'lv1' THEN 1 ELSE 0 END) AS lv1_count, " +
  70 |             "SUM(CASE WHEN rarity = 'lv2' THEN 1 ELSE 0 END) AS lv2_count, " +
  71 |             "SUM(CASE WHEN rarity = 'lv3' THEN 1 ELSE 0 END) AS lv3_count, " +
  72 |             "SUM(CASE WHEN rarity = 'lv4' THEN 1 ELSE 0 END) AS lv4_count, " +
  73 |             "SUM(CASE WHEN rarity = 'lv5' THEN 1 ELSE 0 END) AS lv5_count, " +
  74 |             "SUM(CASE WHEN rarity = 'lv6' THEN 1 ELSE 0 END) AS lv6_count " +
  75 |             "FROM ( " +
  76 |             "SELECT address, rarity " +
  77 |             "FROM tax_all_nft " +
  78 |             "WHERE is_deleted = b'0' AND other_json = '1' AND sell_status = 1 AND tax_status = 1 " +
  79 |             "UNION ALL " +
  80 |             "SELECT address, rarity " +
  81 |             "FROM tax_1of1_nft " +
  82 |             "WHERE is_deleted = b'0' AND other_json = '1' AND sell_status = 1 AND tax_status = 1 " +
  83 |             ") AS combined_table " +
  84 |             "GROUP BY address")
  85 |     @Results({
  86 |             @Result(property = "address", column = "address"),
  87 |             @Result(property = "lv1amt", column = "lv1_count"),
  88 |             @Result(property = "lv2amt", column = "lv2_count"),
  89 |             @Result(property = "lv3amt", column = "lv3_count"),
  90 |             @Result(property = "lv4amt", column = "lv4_count"),
  91 |             @Result(property = "lv5amt", column = "lv5_count"),
  92 |             @Result(property = "lv6amt", column = "lv6_count")
  93 |     })
  94 |     List<HolderDto> getNftCountByRarity();
  95 | 
  96 |     @Select("SELECT nft_utxo, name, gt_id, rarity, nft_id " +
  97 |             "FROM tax_all_nft " +
  98 |             "WHERE address = #{address} " +
  99 |             "UNION " +
 100 |             "SELECT nft_utxo, name, gt_id, rarity , nft_id " +
 101 |             "FROM tax_1of1_nft " +
 102 |             "WHERE address = #{address}")
 103 |     @Results({
 104 |             @Result(property = "nftId", column = "nft_id"),
 105 |             @Result(property = "nftUtxo", column = "nft_utxo"),
 106 |             @Result(property = "name", column = "name"),
 107 |             @Result(property = "gtId", column = "gt_id"),
 108 |             @Result(property = "rarity", column = "rarity")
 109 |     })
 110 |     List<IpfsImgVo> getNftList(@Param("address") String address);
 111 | 
 112 | 
 113 | 
 114 | 
 115 | 
 116 | 
 117 | 
 118 | 
 119 | }



// ====== FILE: ./src/main/java/com/astro/mapper/AstroResenderMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.ResenderOrderDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface AstroResenderMapper extends BaseMapper<ResenderOrderDo> {
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/mapper/TaxAllNftDoMapperCopy.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.TaxAllNftDoCopy;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import lombok.Data;
   6 | import org.apache.ibatis.annotations.Mapper;
   7 | 
   8 | @Mapper
   9 | public interface TaxAllNftDoMapperCopy extends BaseMapper<TaxAllNftDoCopy> {
  10 | }



// ====== FILE: ./src/main/java/com/astro/mapper/AstroWlPayLogDoMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.AstroWlPayLogDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface AstroWlPayLogDoMapper extends BaseMapper<AstroWlPayLogDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astro/mapper/AstroOgListDoMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.AstroOgListDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | import org.apache.ibatis.annotations.Param;
   7 | import org.apache.ibatis.annotations.Select;
   8 | 
   9 | @Mapper
  10 | public interface AstroOgListDoMapper extends BaseMapper<AstroOgListDo> {
  11 |     @Select("SELECT EXISTS(SELECT 1 FROM astro_og_list WHERE user_url = #{userUrl})")
  12 |     Boolean existsByUserUrl(@Param("userUrl")String userUrl);
  13 | }



// ====== FILE: ./src/main/java/com/astro/mapper/AstroOrderDoMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.AstroOrderDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface AstroOrderDoMapper extends BaseMapper<AstroOrderDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astro/mapper/AstroWlListDoMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.AstroWlListDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | import org.apache.ibatis.annotations.Param;
   7 | import org.apache.ibatis.annotations.Select;
   8 | 
   9 | @Mapper
  10 | public interface AstroWlListDoMapper extends BaseMapper<AstroWlListDo> {
  11 |     @Select("SELECT EXISTS(SELECT 1 FROM astro_wl_list WHERE user_url = #{userUrl})")
  12 |     boolean existsByUserUrlInWl(@Param("userUrl") String userUrl);
  13 | }



// ====== FILE: ./src/main/java/com/astro/mapper/RichHolderMapper.java ======

   1 | package com.astro.mapper;
   2 | 
   3 | import com.astro.pojo.RichHolderDo;
   4 | import com.baomidou.mybatisplus.core.mapper.BaseMapper;
   5 | import org.apache.ibatis.annotations.Mapper;
   6 | 
   7 | @Mapper
   8 | public interface RichHolderMapper extends BaseMapper<RichHolderDo> {
   9 | }



// ====== FILE: ./src/main/java/com/astro/annotation/RedissonLock.java ======

   1 | package com.astro.annotation;
   2 | 
   3 | import java.lang.annotation.ElementType;
   4 | import java.lang.annotation.Retention;
   5 | import java.lang.annotation.RetentionPolicy;
   6 | import java.lang.annotation.Target;
   7 | 
   8 | /**
   9 |  * 基于 Redisson 分布式锁注解组件
  10 |  */
  11 | @Target(ElementType.METHOD)
  12 | @Retention(RetentionPolicy.RUNTIME)
  13 | public @interface RedissonLock {
  14 | 
  15 | 	/**
  16 | 	 * 锁对应的 key
  17 | 	 */
  18 | 	String key();
  19 | 
  20 | 	/**
  21 | 	 * 阻塞等待时间为 waitTime 默认为 10s
  22 | 	 */
  23 | 	long waitTime() default 10; // 等待时间，默认为 10 秒
  24 | 
  25 | 	/**
  26 | 	 * 过期释放时间为 leaseTime 默认为 30s
  27 | 	 */
  28 | 	long leaseTime() default 30; // 存活时间，默认为 30 秒
  29 | 
  30 | }


// ====== FILE: ./src/main/java/com/astro/utils/UpdateNftTableTool.java ======

   1 | package com.astro.utils;
   2 | 
   3 | import com.astro.mapper.TaxAllNftDoMapper;
   4 | import com.astro.pojo.TaxAllNftDo;
   5 | import com.baomidou.mybatisplus.core.toolkit.Wrappers;
   6 | import com.google.common.annotations.VisibleForTesting;
   7 | import org.springframework.beans.factory.annotation.Autowired;
   8 | import org.springframework.stereotype.Component;
   9 | 
  10 | import java.io.BufferedReader;
  11 | import java.io.IOException;
  12 | import java.io.FileReader;
  13 | 
  14 | 
  15 | @Component
  16 | public class UpdateNftTableTool {
  17 |     @Autowired
  18 |     private TaxAllNftDoMapper nftMapper;
  19 | 
  20 | 
  21 |     public void updateNftTable() {
  22 |         String filePath = "/Users/hc-101/Downloads/lv2.txt";
  23 | 
  24 |         try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
  25 |             String line;
  26 |             while ((line = reader.readLine()) != null) {
  27 |                 String[] values = line.split(","); // 分割稀有度和编号
  28 | 
  29 |                 if (values.length == 2) {
  30 |                     String rarity = values[0].replaceAll("[{}]", "").trim();
  31 |                     String nftId = values[1].replaceAll("[{}#]", "").trim();
  32 | 
  33 |                     int update = nftMapper.update(null, Wrappers.lambdaUpdate(TaxAllNftDo.class)
  34 |                             .set(TaxAllNftDo::getRarity, rarity)
  35 |                             .eq(TaxAllNftDo::getNftId, Integer.parseInt(nftId)));
  36 |                 }
  37 |             }
  38 |         } catch (IOException e) {
  39 |             e.printStackTrace();
  40 |         }
  41 |     }
  42 | }


// ====== FILE: ./src/main/java/com/astro/utils/RanNumUtil.java ======

   1 | package com.astro.utils;
   2 | 
   3 | import java.util.ArrayList;
   4 | import java.util.Arrays;
   5 | import java.util.List;
   6 | import java.util.Random;
   7 | 
   8 | public class RanNumUtil {
   9 | 
  10 |     // Random class's static constant object random
  11 |     private static final Random random = new Random();
  12 | 
  13 |     // Accept two parameters: a list of integers named list and an integer named n,
  14 |     // which represents how many random elements to get from the list. Returns a list of integers.
  15 |     public static List<Integer> getRandomNumbers(List<Integer> list, int n) {
  16 | 
  17 |         int maxIndex = Math.min(list.size(), n);// Avoid the situation where there are not enough remaining NFTs.
  18 |         List<Integer> randomNumbers = new ArrayList<>(maxIndex);
  19 | 
  20 |         for (int i = 0; i < maxIndex; i++) {
  21 |             int randomIndex = random.nextInt(list.size());// Get a random index.
  22 | 
  23 |             randomNumbers.add(list.get(randomIndex));// Add the obtained random number to the list of random numbers.
  24 | 
  25 |             list.remove(randomIndex);// Delete the obtained element from the original list to ensure that each element is only obtained once.
  26 |         }
  27 | 
  28 |         return randomNumbers;// Returns a list of integers containing random elements.
  29 |     }
  30 | 
  31 | 
  32 |     public static void main(String[] args) {
  33 | 
  34 |         List<Integer> nftList = new ArrayList<>(Arrays.asList(1, 2, 3, 6, 8, 9, 10, 12, 13, 15, 18, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120)
  35 |         );
  36 | 
  37 |         List<Integer> randomNumbers = getRandomNumbers(nftList, 4);
  38 | 
  39 |         System.out.println(randomNumbers);
  40 | 
  41 |     }
  42 | }



// ====== FILE: ./src/main/java/com/astro/utils/SHA256Util.java ======

   1 | package com.astro.utils;
   2 | 
   3 | import java.nio.charset.StandardCharsets;
   4 | import java.security.MessageDigest;
   5 | import java.security.NoSuchAlgorithmException;
   6 | 
   7 | public class SHA256Util {
   8 |     public static String encrypt(String input) {
   9 | //        input = input + salt;
  10 | 
  11 |         try {
  12 |             MessageDigest digest = MessageDigest.getInstance("SHA-256");
  13 |             byte[] encodedHash = digest.digest(input.getBytes(StandardCharsets.UTF_8));
  14 | 
  15 |             StringBuilder hexString = new StringBuilder();
  16 |             for (byte b : encodedHash) {
  17 |                 String hex = Integer.toHexString(0xff & b);
  18 |                 if (hex.length() == 1)
  19 |                     hexString.append('0');
  20 |                 hexString.append(hex);
  21 |             }
  22 | 
  23 |             return hexString.toString();
  24 |         } catch (NoSuchAlgorithmException e) {
  25 |             e.printStackTrace();
  26 |         }
  27 |         return null;
  28 |     }
  29 | }


// ====== FILE: ./src/main/java/com/astro/utils/InviteCodeUtil.java ======

   1 | package com.astro.utils;
   2 | import java.nio.charset.StandardCharsets;
   3 | import java.security.MessageDigest;
   4 | import java.security.NoSuchAlgorithmException;
   5 | 
   6 | 
   7 | public class InviteCodeUtil {
   8 |     private static final int CODE_LENGTH = 8;
   9 | 
  10 |     public static Long generateInviteCode(String userUrl) {
  11 |         try {
  12 |             MessageDigest md = MessageDigest.getInstance("SHA-256");
  13 |             byte[] hashBytes = md.digest(userUrl.getBytes(StandardCharsets.UTF_8));
  14 | 
  15 |             long hashCode = byteArrayToLong(hashBytes);
  16 |             String inviteCodeStr = String.valueOf(Math.abs(hashCode)).substring(0, CODE_LENGTH);
  17 |             Long inviteCode = Long.parseLong(inviteCodeStr);
  18 | 
  19 |             return inviteCode;
  20 |         } catch (NoSuchAlgorithmException e) {
  21 |             // 处理算法不支持的异常
  22 |             e.printStackTrace();
  23 |         }
  24 | 
  25 |         return null;
  26 |     }
  27 | 
  28 |     private static long byteArrayToLong(byte[] bytes) {
  29 |         long result = 0;
  30 |         for (int i = 0; i < Math.min(bytes.length, 8); i++) {
  31 |             result <<= 8;
  32 |             result |= (bytes[i] & 0xFF);
  33 |         }
  34 |         return result;
  35 |     }
  36 | }


// ====== FILE: ./src/main/java/com/astro/utils/DogeUtil.java ======

   1 | package com.astro.utils;
   2 | 
   3 | import java.util.regex.Pattern;
   4 | 
   5 | public class DogeUtil {
   6 | 
   7 |     private static final int DOGECOIN_ADDRESS_LENGTH = 34;
   8 |     private static final Pattern DOGECOIN_ADDRESS_PATTERN = Pattern.compile("^[A-Za-z0-9]+$");
   9 | 
  10 |     public static boolean isDogeAddress(String address) {
  11 |         if (address.length() != DOGECOIN_ADDRESS_LENGTH) {
  12 |             return false;
  13 |         }
  14 | 
  15 |         if (!DOGECOIN_ADDRESS_PATTERN.matcher(address).matches()) {
  16 |             return false;
  17 |         }
  18 | 
  19 |         // 进行校验和验证
  20 |         String checksumPart = address.substring(1); // 剔除开头的 "D"
  21 |         return isValidChecksum(checksumPart);
  22 |     }
  23 | 
  24 |     private static boolean isValidChecksum(String checksumPart) {
  25 |         byte[] bytes = checksumPart.getBytes();
  26 |         int length = bytes.length;
  27 |         boolean doubleDigit = true;
  28 |         int sum = 0;
  29 | 
  30 |         for (int i = length - 1; i >= 0; --i) {
  31 |             int digit = Character.digit((char)bytes[i], 36);
  32 | 
  33 |             if (doubleDigit) {
  34 |                 digit *= 2;
  35 | 
  36 |                 if (digit > 9) {
  37 |                     digit -= 9;
  38 |                 }
  39 |             }
  40 | 
  41 |             sum += digit;
  42 |             doubleDigit = !doubleDigit;
  43 |         }
  44 | 
  45 |         return sum % 10 == 0;
  46 |     }
  47 | 
  48 |     public static void main(String[] args) {
  49 |         String address1 = "qwdcfwqf";
  50 |         System.out.println("1:"+isDogeAddress(address1));
  51 | 
  52 |         String address2 = "DGJsyH8oEr5i3UpgyUHvmn331D8VJ3KCwe";
  53 |         System.out.println("2:"+isDogeAddress(address2));
  54 |     }
  55 | 
  56 | }



// ====== FILE: ./src/main/java/com/astro/utils/SmartProxyAuth.java ======

   1 | //package com.astro.utils;
   2 | //
   3 | //import org.apache.logging.log4j.LogManager;
   4 | //import org.apache.logging.log4j.Logger;
   5 | ////import org.apache.shiro.web.filter.PathMatchingFilter;
   6 | //
   7 | //import javax.servlet.ServletRequest;
   8 | //import javax.servlet.ServletResponse;
   9 | //import javax.servlet.http.HttpServletRequest;
  10 | //import javax.servlet.http.HttpServletResponse;
  11 | //import java.nio.charset.StandardCharsets;
  12 | //import java.security.MessageDigest;
  13 | //import java.security.NoSuchAlgorithmException;
  14 | //
  15 | ///**
  16 | // * 用来保证数据源是来自于smartProxy的
  17 | // */
  18 | //public class SmartProxyAuth extends PathMatchingFilter {
  19 | //
  20 | //    private static final Logger logger = LogManager.getLogger(SmartProxyAuth.class);
  21 | //
  22 | //    private String token = "";
  23 | //
  24 | //    @Override
  25 | //    protected boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception {
  26 | //
  27 | //        boolean result = false;
  28 | //        try {
  29 | //            HttpServletRequest httpServletRequest = (HttpServletRequest) request;
  30 | //            String timestamp = httpServletRequest.getHeader("TIMESTAMP");
  31 | //            String signature = httpServletRequest.getHeader("SIGNATURE");
  32 | //            String staffid = httpServletRequest.getHeader("STAFFID");
  33 | //            String staffname = httpServletRequest.getHeader("STAFFNAME");
  34 | //            String x_ext_data = httpServletRequest.getHeader("X-EXT-DATA");
  35 | //            String x_rio_seq = httpServletRequest.getHeader("X-RIO-SEQ");
  36 | //
  37 | //            long nowTimestamp = System.currentTimeMillis() / 1000;
  38 | //            String input = timestamp + token + x_rio_seq + "," + staffid + "," + staffname + "," + x_ext_data + timestamp;
  39 | //            String mySignature = sha256HexUpperCase(input);
  40 | //            long absTime = Math.abs(Long.parseLong(timestamp) - nowTimestamp);
  41 | //            result = !(absTime > 180 || (!mySignature.equals(signature)));
  42 | //        } catch (Exception e) {
  43 | //            logger.error("SmartProxyAuth in exception " + e.getMessage());
  44 | //            result = false;
  45 | //        }
  46 | //        if (!result) {
  47 | //            HttpServletResponse httpResponse = (HttpServletResponse) response;
  48 | //            httpResponse.sendError(403, "SmartProxyAuth fail");
  49 | //        }
  50 | //        return result;
  51 | //    }
  52 | //
  53 | //    private static String sha256HexUpperCase(String input) throws NoSuchAlgorithmException {
  54 | //        MessageDigest digest = MessageDigest.getInstance("SHA-256");
  55 | //        byte[] encodedHash = digest.digest(
  56 | //                input.getBytes(StandardCharsets.UTF_8));
  57 | //        return bytesToHex(encodedHash).toUpperCase();
  58 | //    }
  59 | //
  60 | //    private static String bytesToHex(byte[] hash) {
  61 | //        StringBuilder hexString = new StringBuilder();
  62 | //        for (byte aHash : hash) {
  63 | //            String hex = Integer.toHexString(0xff & aHash);
  64 | //            if (hex.length() == 1) hexString.append('0');
  65 | //            hexString.append(hex);
  66 | //        }
  67 | //        return hexString.toString();
  68 | //    }
  69 | //
  70 | //}


// ====== FILE: ./src/main/java/com/astro/utils/NumberExtractor.java ======

   1 | package com.astro.utils;
   2 | 
   3 | import cn.hutool.core.io.FileUtil;
   4 | import cn.hutool.core.io.IoUtil;
   5 | import cn.hutool.core.text.CharSequenceUtil;
   6 | import com.astro.mapper.TaxAllNftDoMapper;
   7 | import com.astro.pojo.TaxAllNftDo;
   8 | import com.baomidou.mybatisplus.core.toolkit.Wrappers;
   9 | import lombok.extern.slf4j.Slf4j;
  10 | import org.springframework.beans.factory.annotation.Autowired;
  11 | import org.springframework.stereotype.Component;
  12 | 
  13 | import java.io.BufferedReader;
  14 | import java.io.BufferedWriter;
  15 | import java.io.File;
  16 | import java.io.FileReader;
  17 | import java.io.FileWriter;
  18 | import java.io.IOException;
  19 | 
  20 | @Component
  21 | @Slf4j
  22 | public class NumberExtractor {
  23 | 
  24 |     public static void main(String[] args) {
  25 |         String inputFile = "/Users/hc-101/Documents/rarity/lv2num.txt";
  26 |         String outputFile = "/Users/hc-101/Documents/rarity/lv2_numbers.txt";
  27 |         int count = extractNumbers(inputFile, outputFile);
  28 |         System.out.println("共提取出 " + count + " 个数字");
  29 |     }
  30 | 
  31 |     public static int extractNumbers(String inputFile, String outputFile) {
  32 | 
  33 |         NumberExtractor util = new NumberExtractor();
  34 | 
  35 | 
  36 |         int count = 0;
  37 |         try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
  38 |              BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {
  39 | 
  40 |             String line;
  41 |             while ((line = reader.readLine()) != null) {
  42 |                 String number = extractNumber(line);
  43 |                 if (CharSequenceUtil.isNotBlank(number)) {
  44 |                     writer.write(number);
  45 |                     writer.newLine();
  46 |                     count++;
  47 | 
  48 |                     // 更新数据库字段
  49 |                     util.update(Integer.parseInt(number));
  50 |                 }
  51 |             }
  52 |             
  53 |             System.out.println("数字提取完成，已输出到文件：" + outputFile);
  54 | 
  55 |         } catch (IOException e) {
  56 |             e.printStackTrace();
  57 |         }
  58 |         return count;
  59 |     }
  60 | 
  61 |     private static String extractNumber(String line) {
  62 |         int startIndex = line.lastIndexOf("#");
  63 |         if (startIndex >= 0) {
  64 |             return line.substring(startIndex + 1).trim();
  65 |         } else {
  66 |             return "";
  67 |         }
  68 |     }
  69 | 
  70 |     @Autowired
  71 |     TaxAllNftDoMapper nftMapper;
  72 |     // 将 nft_id 为 nftId 的数据的稀有值字段改为 lv2
  73 |     private void update(Integer nftId) {
  74 |         int update = nftMapper.update(null, Wrappers.lambdaUpdate(TaxAllNftDo.class)
  75 |                 .eq(TaxAllNftDo::getNftId, nftId)
  76 |                 .set(TaxAllNftDo::getRarity, "lv2"));
  77 |         if (update != 0) {
  78 |             log.info("更新完成，nft_id: {}", nftId);
  79 |             System.out.println("更新完成，nft_id: " + nftId);
  80 |         }
  81 |     }
  82 | }



// ====== FILE: ./src/main/java/com/astro/utils/PathMatchingFilter.java ======

   1 | package com.astro.utils;
   2 | 
   3 | public class PathMatchingFilter {
   4 | 
   5 | 
   6 | }



// ====== FILE: ./src/main/java/com/astro/utils/SecretUtil.java ======

   1 | package com.astro.utils;
   2 | 
   3 | import javax.crypto.Cipher;
   4 | import javax.crypto.spec.IvParameterSpec;
   5 | import javax.crypto.spec.SecretKeySpec;
   6 | import org.apache.commons.codec.binary.Base64;
   7 | public class SecretUtil {
   8 |     /***
   9 |      * key和iv值可以随机生成,确保与前端的key,iv对应
  10 |      */
  11 |     private static String KEY = "abcdefgh12345678";
  12 |     private static String IV = "12345678abcdefgh";
  13 |     /***
  14 |      * 加密
  15 |      * 
  16 |      * @param data 要加密的数据
  17 |      * @return encrypt
  18 |      */
  19 |     public static String encrypt(String data) {
  20 |         return encrypt(data, KEY, IV);
  21 |     }
  22 |     /***
  23 |      *  解密
  24 |      * @param data 要解密的数据
  25 |      */
  26 |     public static String desEncrypt(String data) {
  27 |         return desEncrypt(data, KEY, IV);
  28 |     }
  29 |     /**
  30 |      * 加密方法
  31 |      */
  32 |     private static String encrypt(String data, String key, String iv) {
  33 |         try {
  34 |             // "算法/模式/补码方式"NoPadding PkcsPadding
  35 |             Cipher cipher = Cipher.getInstance("AES/CBC/NoPadding");
  36 |             int blockSize = cipher.getBlockSize();
  37 |             byte[] dataBytes = data.getBytes();
  38 |             int plaintextLength = dataBytes.length;
  39 |             if (plaintextLength % blockSize != 0) {
  40 |                 plaintextLength = plaintextLength + (blockSize - (plaintextLength % blockSize));
  41 |             }
  42 |             byte[] plaintext = new byte[plaintextLength];
  43 |             System.arraycopy(dataBytes, 0, plaintext, 0, dataBytes.length);
  44 |             SecretKeySpec keyspec = new SecretKeySpec(key.getBytes(), "AES");
  45 |             IvParameterSpec ivspec = new IvParameterSpec(iv.getBytes());
  46 |             cipher.init(Cipher.ENCRYPT_MODE, keyspec, ivspec);
  47 |             byte[] encrypted = cipher.doFinal(plaintext);
  48 |             return new Base64().encodeToString(encrypted);
  49 |         } catch (Exception e) {
  50 |             e.printStackTrace();
  51 |             return null;
  52 |         }
  53 |     }
  54 |     /**
  55 |      * 解密方法
  56 |      */
  57 |     private static String desEncrypt(String data, String key, String iv) {
  58 |         try {
  59 |             byte[] encrypted1 = new Base64().decode(data);
  60 |             Cipher cipher = Cipher.getInstance("AES/CBC/NoPadding");
  61 |             SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), "AES");
  62 |             IvParameterSpec ivSpec = new IvParameterSpec(iv.getBytes());
  63 |             cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);
  64 |             byte[] original = cipher.doFinal(encrypted1);
  65 |             return new String(original).trim();
  66 |         } catch (Exception e) {
  67 |             e.printStackTrace();
  68 |             return null;
  69 |         }
  70 |     }
  71 | }


// ====== FILE: ./src/main/java/com/astro/utils/RedisCacheClient.java ======

   1 | package com.astro.utils;
   2 | 
   3 | import org.springframework.beans.factory.annotation.Autowired;
   4 | import org.springframework.data.redis.core.BoundSetOperations;
   5 | import org.springframework.data.redis.core.HashOperations;
   6 | import org.springframework.data.redis.core.RedisTemplate;
   7 | import org.springframework.data.redis.core.ValueOperations;
   8 | import org.springframework.stereotype.Component;
   9 | 
  10 | import java.util.*;
  11 | import java.util.concurrent.TimeUnit;
  12 | 
  13 | /**
  14 |  * spring redis 工具类
  15 |  *
  16 |  * @author ruoyi
  17 |  **/
  18 | @SuppressWarnings(value = { "unchecked", "rawtypes" })
  19 | @Component
  20 | public class RedisCacheClient
  21 | {
  22 |     @Autowired
  23 |     public RedisTemplate redisTemplate;
  24 | 
  25 |     /**
  26 |      * 缓存基本的对象，Integer、String、实体类等
  27 |      *
  28 |      * @param key 缓存的键值
  29 |      * @param value 缓存的值
  30 |      */
  31 |     public <T> void setCacheObject(final String key, final T value)
  32 |     {
  33 |         redisTemplate.opsForValue().set(key, value);
  34 |     }
  35 | 
  36 |     /**
  37 |      * 缓存基本的对象，Integer、String、实体类等
  38 |      *
  39 |      * @param key 缓存的键值
  40 |      * @param value 缓存的值
  41 |      * @param timeout 时间
  42 |      * @param timeUnit 时间颗粒度
  43 |      */
  44 |     public <T> void setCacheObject(final String key, final T value, final Integer timeout, final TimeUnit timeUnit)
  45 |     {
  46 |         redisTemplate.opsForValue().set(key, value, timeout, timeUnit);
  47 |     }
  48 | 
  49 |     /**
  50 |      * 设置有效时间
  51 |      *
  52 |      * @param key Redis键
  53 |      * @param timeout 超时时间
  54 |      * @return true=设置成功；false=设置失败
  55 |      */
  56 |     public boolean expire(final String key, final long timeout)
  57 |     {
  58 |         return expire(key, timeout, TimeUnit.SECONDS);
  59 |     }
  60 | 
  61 |     /**
  62 |      * 设置有效时间
  63 |      *
  64 |      * @param key Redis键
  65 |      * @param timeout 超时时间
  66 |      * @param unit 时间单位
  67 |      * @return true=设置成功；false=设置失败
  68 |      */
  69 |     public boolean expire(final String key, final long timeout, final TimeUnit unit)
  70 |     {
  71 |         return redisTemplate.expire(key, timeout, unit);
  72 |     }
  73 | 
  74 |     /**
  75 |      * 获取有效时间
  76 |      *
  77 |      * @param key Redis键
  78 |      * @return 有效时间
  79 |      */
  80 |     public long getExpire(final String key)
  81 |     {
  82 |         return redisTemplate.getExpire(key);
  83 |     }
  84 | 
  85 |     /**
  86 |      * 判断 key是否存在
  87 |      *
  88 |      * @param key 键
  89 |      * @return true 存在 false不存在
  90 |      */
  91 |     public Boolean hasKey(String key)
  92 |     {
  93 |         return redisTemplate.hasKey(key);
  94 |     }
  95 | 
  96 |     /**
  97 |      * 获得缓存的基本对象。
  98 |      *
  99 |      * @param key 缓存键值
 100 |      * @return 缓存键值对应的数据
 101 |      */
 102 |     public <T> T getCacheObject(final String key)
 103 |     {
 104 |         ValueOperations<String, T> operation = redisTemplate.opsForValue();
 105 |         return operation.get(key);
 106 |     }
 107 | 
 108 |     /**
 109 |      * 删除单个对象
 110 |      *
 111 |      * @param key
 112 |      */
 113 |     public boolean deleteObject(final String key)
 114 |     {
 115 |         return redisTemplate.delete(key);
 116 |     }
 117 | 
 118 |     /**
 119 |      * 删除集合对象
 120 |      *
 121 |      * @param collection 多个对象
 122 |      * @return
 123 |      */
 124 |     public boolean deleteObject(final Collection collection)
 125 |     {
 126 |         return redisTemplate.delete(collection) > 0;
 127 |     }
 128 | 
 129 |     /**
 130 |      * 缓存List数据
 131 |      *
 132 |      * @param key 缓存的键值
 133 |      * @param dataList 待缓存的List数据
 134 |      * @return 缓存的对象
 135 |      */
 136 |     public <T> long setCacheList(final String key, final List<T> dataList)
 137 |     {
 138 |         Long count = redisTemplate.opsForList().rightPushAll(key, dataList);
 139 |         return count == null ? 0 : count;
 140 |     }
 141 | 
 142 |     /**
 143 |      * 获得缓存的list对象
 144 |      *
 145 |      * @param key 缓存的键值
 146 |      * @return 缓存键值对应的数据
 147 |      */
 148 |     public <T> List<T> getCacheList(final String key)
 149 |     {
 150 |         return redisTemplate.opsForList().range(key, 0, -1);
 151 |     }
 152 | 
 153 |     /**
 154 |      * 缓存Set
 155 |      *
 156 |      * @param key 缓存键值
 157 |      * @param dataSet 缓存的数据
 158 |      * @return 缓存数据的对象
 159 |      */
 160 |     public <T> BoundSetOperations<String, T> setCacheSet(final String key, final Set<T> dataSet)
 161 |     {
 162 |         BoundSetOperations<String, T> setOperation = redisTemplate.boundSetOps(key);
 163 |         Iterator<T> it = dataSet.iterator();
 164 |         while (it.hasNext())
 165 |         {
 166 |             setOperation.add(it.next());
 167 |         }
 168 |         return setOperation;
 169 |     }
 170 | 
 171 |     /**
 172 |      * 获得缓存的set
 173 |      *
 174 |      * @param key
 175 |      * @return
 176 |      */
 177 |     public <T> Set<T> getCacheSet(final String key)
 178 |     {
 179 |         return redisTemplate.opsForSet().members(key);
 180 |     }
 181 | 
 182 |     /**
 183 |      * 缓存Map
 184 |      *
 185 |      * @param key
 186 |      * @param dataMap
 187 |      */
 188 |     public <T> void setCacheMap(final String key, final Map<String, T> dataMap)
 189 |     {
 190 |         if (dataMap != null) {
 191 |             redisTemplate.opsForHash().putAll(key, dataMap);
 192 |         }
 193 |     }
 194 | 
 195 |     /**
 196 |      * 获得缓存的Map
 197 |      *
 198 |      * @param key
 199 |      * @return
 200 |      */
 201 |     public <T> Map<String, T> getCacheMap(final String key)
 202 |     {
 203 |         return redisTemplate.opsForHash().entries(key);
 204 |     }
 205 | 
 206 |     /**
 207 |      * 往Hash中存入数据
 208 |      *
 209 |      * @param key Redis键
 210 |      * @param hKey Hash键
 211 |      * @param value 值
 212 |      */
 213 |     public <T> void setCacheMapValue(final String key, final String hKey, final T value)
 214 |     {
 215 |         redisTemplate.opsForHash().put(key, hKey, value);
 216 |     }
 217 | 
 218 |     /**
 219 |      * 获取Hash中的数据
 220 |      *
 221 |      * @param key Redis键
 222 |      * @param hKey Hash键
 223 |      * @return Hash中的对象
 224 |      */
 225 |     public <T> T getCacheMapValue(final String key, final String hKey)
 226 |     {
 227 |         HashOperations<String, String, T> opsForHash = redisTemplate.opsForHash();
 228 |         return opsForHash.get(key, hKey);
 229 |     }
 230 | 
 231 |     /**
 232 |      * 获取多个Hash中的数据
 233 |      *
 234 |      * @param key Redis键
 235 |      * @param hKeys Hash键集合
 236 |      * @return Hash对象集合
 237 |      */
 238 |     public <T> List<T> getMultiCacheMapValue(final String key, final Collection<Object> hKeys)
 239 |     {
 240 |         return redisTemplate.opsForHash().multiGet(key, hKeys);
 241 |     }
 242 | 
 243 |     /**
 244 |      * 删除Hash中的某条数据
 245 |      *
 246 |      * @param key Redis键
 247 |      * @param hKey Hash键
 248 |      * @return 是否成功
 249 |      */
 250 |     public boolean deleteCacheMapValue(final String key, final String hKey)
 251 |     {
 252 |         return redisTemplate.opsForHash().delete(key, hKey) > 0;
 253 |     }
 254 | 
 255 |     /**
 256 |      * 获得缓存的基本对象列表
 257 |      *
 258 |      * @param pattern 字符串前缀
 259 |      * @return 对象列表
 260 |      */
 261 |     public Collection<String> keys(final String pattern)
 262 |     {
 263 |         return redisTemplate.keys(pattern);
 264 |     }
 265 | }



// ====== FILE: ./src/main/java/com/astro/utils/GuangMQ.java ======

   1 | package com.astro.utils;
   2 | 
   3 | import java.util.LinkedList;
   4 | import java.util.Queue;
   5 | 
   6 | /**
   7 |  * GuangMQ 类是一个简单的消息队列数据结构，用于模拟消息传递的基本功能。
   8 |  * @param <T> 消息的数据类型
   9 |  */
  10 | public class GuangMQ<T> {
  11 |     private Queue<T> queue; // 队列用于存储消息
  12 |     private int capacity; // 队列的容量，限制队列中的消息数量
  13 | 
  14 |     /**
  15 |      * 构造函数，初始化 GuangMQ 对象。
  16 |      * @param capacity 队列的容量，限制队列中的消息数量
  17 |      */
  18 |     public GuangMQ(int capacity) {
  19 |         this.queue = new LinkedList<>(); // 使用链表实现队列
  20 |         this.capacity = capacity;
  21 |     }
  22 | 
  23 |     /**
  24 |      * 向队列中发送消息。
  25 |      * @param message 要发送的消息
  26 |      * @throws InterruptedException 如果线程被中断，则抛出 InterruptedException
  27 |      */
  28 |     public synchronized void sendMessage(T message) throws InterruptedException {
  29 |         // 当队列已满时，等待有空闲位置
  30 |         while (queue.size() >= capacity) {
  31 |             wait(); // 等待队列有空闲位置
  32 |         }
  33 |         queue.offer(message); // 将消息加入队列
  34 |         notifyAll(); // 通知等待的消费者线程
  35 |     }
  36 | 
  37 |     /**
  38 |      * 从队列中接收消息。
  39 |      * @return 接收到的消息
  40 |      * @throws InterruptedException 如果线程被中断，则抛出 InterruptedException
  41 |      */
  42 |     public synchronized T receiveMessage() throws InterruptedException {
  43 |         // 当队列为空时，等待有消息可接收
  44 |         while (queue.isEmpty()) {
  45 |             wait(); // 等待队列中有消息
  46 |         }
  47 |         T message = queue.poll(); // 取出队列中的消息
  48 |         notifyAll(); // 通知等待的生产者线程
  49 |         return message;
  50 |     }
  51 | 
  52 |     /**
  53 |      * 获取当前队列中的消息数量。
  54 |      * @return 当前队列中的消息数量
  55 |      */
  56 |     public int size() {
  57 |         return queue.size();
  58 |     }
  59 | }



// ====== FILE: ./src/main/java/com/astro/utils/BaseEntity.java ======

   1 | package com.astro.utils;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.TableField;
   4 | import com.baomidou.mybatisplus.annotation.TableLogic;
   5 | import lombok.Data;
   6 | 
   7 | import java.time.LocalDateTime;
   8 | 
   9 | /**
  10 |  * 基础POJO类
  11 |  *
  12 |  **/
  13 | @Data
  14 | public class BaseEntity {
  15 | 
  16 |     private Long id;
  17 | 
  18 |     private LocalDateTime insertTime;
  19 | 
  20 |     private LocalDateTime updateTime;
  21 | 
  22 |     @TableField("is_deleted")
  23 |     @TableLogic
  24 |     private Boolean deleted;
  25 | 
  26 | }



// ====== FILE: ./src/main/java/com/astro/utils/IpUtils.java ======

   1 | package com.astro.utils;
   2 | 
   3 | import javax.servlet.http.HttpServletRequest;
   4 | 
   5 | /**
   6 |  * 获取用户真实IP地址，不使用request.getRemoteAddr()的原因是有可能用户使用了代理软件方式避免真实IP地址,
   7 |  * 可是，如果通过了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP值
   8 |  * @return ip
   9 |  */
  10 | 
  11 | public class IpUtils {
  12 | 
  13 |     public static String getRealIP(HttpServletRequest request) {
  14 |         String ip = request.getHeader("x-forwarded-for");
  15 |         if (ip != null && ip.length() != 0 && ! "unknown".equalsIgnoreCase(ip)) {
  16 |             // 多次反向代理后会有多个ip值，第一个ip才是真实ip
  17 |             if( ip.indexOf(",") != -1 ){
  18 |                 ip = ip.split(",")[0];
  19 |             }
  20 |         }
  21 |         if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
  22 |             ip = request.getHeader("Proxy-Client-IP");
  23 |             System.out.println("Proxy-Client-IP ip: " + ip);
  24 |         }
  25 |         if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
  26 |             ip = request.getHeader("WL-Proxy-Client-IP");
  27 |             System.out.println("WL-Proxy-Client-IP ip: " + ip);
  28 |         }
  29 |         if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
  30 |             ip = request.getHeader("HTTP_CLIENT_IP");
  31 |             System.out.println("HTTP_CLIENT_IP ip: " + ip);
  32 |         }
  33 |         if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
  34 |             ip = request.getHeader("HTTP_X_FORWARDED_FOR");
  35 |             System.out.println("HTTP_X_FORWARDED_FOR ip: " + ip);
  36 |         }
  37 |         if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
  38 |             ip = request.getHeader("X-Real-IP");
  39 |             System.out.println("X-Real-IP ip: " + ip);
  40 |         }
  41 |         if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
  42 |             ip = request.getRemoteAddr();
  43 |             System.out.println("getRemoteAddr ip: " + ip);
  44 |         }
  45 |         return ip;
  46 |     }
  47 | }



// ====== FILE: ./src/main/java/com/astro/utils/RarityUtil.java ======

   1 | package com.astro.utils;
   2 | 
   3 | import static com.astro.constant.NftConstant.NFT_LV6_IDS;
   4 | 
   5 | public class RarityUtil {
   6 | 
   7 |     public static boolean isLV1(Integer nftId) {
   8 |         return NFT_LV6_IDS.contains(nftId);
   9 |     }
  10 | 
  11 | }



// ====== FILE: ./src/main/java/com/astro/utils/OrderUtils.java ======

   1 | package com.astro.utils;
   2 | 
   3 | import java.text.SimpleDateFormat;
   4 | import java.time.LocalDateTime;
   5 | import java.time.format.DateTimeFormatter;
   6 | import java.util.Date;
   7 | import java.util.Random;
   8 | import java.util.UUID;
   9 | import java.util.concurrent.ThreadLocalRandom;
  10 | 
  11 | public class OrderUtils {
  12 | 
  13 | 
  14 | 
  15 |     private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");
  16 | 
  17 |     public static long generateOrderId() {
  18 |         LocalDateTime now = LocalDateTime.now();
  19 |         String timestamp = DATE_FORMATTER.format(now);
  20 | 
  21 |         // 生成3位随机数
  22 |         ThreadLocalRandom random = ThreadLocalRandom.current();
  23 |         int randomNumber = random.nextInt(1000); // 生成0到999之间的随机数
  24 | 
  25 |         // 将时间戳和随机数拼接起来
  26 |         StringBuilder orderIdBuilder = new StringBuilder(timestamp);
  27 |         orderIdBuilder.insert(10, String.format("%03d", randomNumber));
  28 | 
  29 |         String orderIdString = orderIdBuilder.toString();
  30 | 
  31 |         return Long.parseLong(orderIdString);
  32 |     }
  33 | 
  34 | 
  35 |     public static void main(String[] args) {
  36 |         Long orderId = OrderUtils.generateOrderId();
  37 | 
  38 |         System.out.println(orderId);
  39 |     }
  40 | 
  41 | 
  42 | }


// ====== FILE: ./src/main/java/com/astro/utils/MailClient.java ======

   1 | package com.astro.utils;
   2 | 
   3 | import org.slf4j.Logger;
   4 | import org.slf4j.LoggerFactory;
   5 | import org.springframework.beans.factory.annotation.Autowired;
   6 | import org.springframework.beans.factory.annotation.Value;
   7 | import org.springframework.mail.javamail.JavaMailSender;
   8 | import org.springframework.mail.javamail.MimeMessageHelper;
   9 | import org.springframework.stereotype.Component;
  10 | 
  11 | import javax.mail.MessagingException;
  12 | import javax.mail.internet.MimeMessage;
  13 | import java.io.IOException;
  14 | import java.net.ServerSocket;
  15 | 
  16 | @Component
  17 | public class MailClient {
  18 | 
  19 |     private static final Logger logger = LoggerFactory.getLogger(MailClient.class);
  20 | 
  21 | 
  22 |     //不影响运行
  23 |     //MailProperties 的password必须是授权码
  24 |     @Autowired
  25 |     private JavaMailSender mailSender;
  26 | 
  27 | 
  28 |     @Value("${spring.mail.username}")
  29 |     private String from;
  30 | 
  31 |     public int sendMail(String to, String subject, String content) throws IOException, MessagingException {
  32 |         try (ServerSocket serverSocket = new ServerSocket(0)) {
  33 | 
  34 |             int port = serverSocket.getLocalPort();
  35 |             MimeMessage message = mailSender.createMimeMessage();
  36 |             MimeMessageHelper helper = new MimeMessageHelper(message);
  37 |             helper.setFrom(from);
  38 |             helper.setTo(to);
  39 |             helper.setSubject(subject);
  40 |             helper.setText(content,true);
  41 |             mailSender.send(helper.getMimeMessage());
  42 |             return port;
  43 |         }
  44 |     }
  45 | }



// ====== FILE: ./src/main/java/com/astro/utils/SrStreamLoadExecutor.java ======

   1 | package com.clougence.cloudcanal.starrocks.worker.writer;
   2 | 
   3 | import java.io.IOException;
   4 | import java.nio.ByteBuffer;
   5 | import java.nio.charset.StandardCharsets;
   6 | import java.util.List;
   7 | import java.util.Map;
   8 | import java.util.UUID;
   9 | import java.util.concurrent.TimeUnit;
  10 | import java.util.stream.Collectors;
  11 | 
  12 | import com.sun.tools.jdeprscan.CSV;
  13 | import org.apache.commons.codec.binary.Base64;
  14 | import org.apache.http.HttpEntity;
  15 | import org.apache.http.client.config.RequestConfig;
  16 | import org.apache.http.client.methods.CloseableHttpResponse;
  17 | import org.apache.http.client.methods.HttpGet;
  18 | import org.apache.http.client.methods.HttpPut;
  19 | import org.apache.http.entity.ByteArrayEntity;
  20 | import org.apache.http.impl.client.CloseableHttpClient;
  21 | import org.apache.http.impl.client.DefaultRedirectStrategy;
  22 | import org.apache.http.impl.client.HttpClientBuilder;
  23 | import org.apache.http.impl.client.HttpClients;
  24 | import org.apache.http.util.EntityUtils;
  25 | 
  26 | import com.clougence.cloudcanal.base.metadata.config.rdb.starrocks.SrOrDorisTableModel;
  27 | import com.clougence.cloudcanal.base.metadata.config.rdb.starrocks.StarRocksTargetConfig;
  28 | import com.clougence.cloudcanal.base.service.task.util.JacksonUtil;
  29 | import com.clougence.cloudcanal.starrocks.worker.util.StarRocksDelimiterHelper;
  30 | import com.clougence.utils.ExceptionUtils;
  31 | import com.clougence.utils.io.IOUtils;
  32 | import com.clougence.utils.json.JSON;
  33 | 
  34 | import lombok.extern.slf4j.Slf4j;
  35 | 
  36 | /**
  37 |  * StarRocks Stream Load 数据导入执行器
  38 |  * 功能：通过HTTP协议将CSV/JSON格式数据批量导入StarRocks表
  39 |  *
  40 |  *
  41 |  */
  42 | 
  43 | 
  44 | /**
  45 |  * @author Ekko 2022/4/26 11:23:11
  46 |  */
  47 | 
  48 | @Slf4j
  49 | public class SrStreamLoadExecutor {
  50 | 
  51 |     // StarRocks返回状态常量
  52 |     private static final String RESULT_FAILED = "Fail";  // 导入失败
  53 |     private static final String RESULT_LABEL_EXISTED = "Label Already Exists";  // 标签已存在
  54 |     private static final String LAEBL_STATE_VISIBLE = "VISIBLE";  // 数据可见（导入成功）
  55 |     private static final String LAEBL_STATE_COMMITTED = "COMMITTED";  // 事务已提交
  56 |     private static final String RESULT_LABEL_PREPARE = "PREPARE";  // 准备中
  57 |     private static final String RESULT_LABEL_ABORTED = "ABORTED";  // 已中止
  58 |     private static final String RESULT_LABEL_UNKNOWN = "UNKNOWN";  // 未知状态
  59 | 
  60 |     // 配置参数
  61 |     private final StarRocksTargetConfig dstConfig;  // 目标StarRocks集群配置
  62 |     private final StarRocksValFormat format;  // 数据格式（CSV/JSON）
  63 |     private final SrOrDorisTableModel tableModel;  // 目标表模型
  64 |     private final byte[] lineDelimiter;  // 行分隔符（字节形式）
  65 | 
  66 |     // 超时和重试配置
  67 |     private Integer httpSoTimeout = 60 * 1000;  // Socket超时（默认60秒）
  68 |     private static int MAX_RETRY = 5;  // 最大重试次数
  69 |     private static int RETRY_SLEEP_MS = 5000;  // 重试间隔（默认5秒）
  70 | 
  71 |     /**
  72 |      * 构造函数
  73 |      * @param dstConfig StarRocks目标配置（包含主机、端口、认证等信息）
  74 |      * @param format 数据格式枚举（CSV/JSON）
  75 |      * @param tableModel 表结构模型
  76 |      */
  77 |     public SrStreamLoadExecutor(StarRocksTargetConfig dstConfig, StarRocksValFormat format, SrOrDorisTableModel tableModel) {
  78 |         this.dstConfig = dstConfig;
  79 |         this.format = format;
  80 |         this.tableModel = tableModel;
  81 |         // 解析行分隔符（默认换行符\n）
  82 |         this.lineDelimiter = StarRocksDelimiterHelper.parse("\\" + dstConfig.getLineSeparator(), "\n").getBytes(StandardCharsets.UTF_8);
  83 | 
  84 |         // 覆盖默认配置（如果传入参数有效）
  85 |         if (dstConfig.getHttpSoTimeoutSec() != null && dstConfig.getHttpSoTimeoutSec() > 0) {
  86 |             this.httpSoTimeout = dstConfig.getHttpSoTimeoutSec() * 1000;
  87 |         }
  88 |         if (dstConfig.getRetryCount() != null) {
  89 |             MAX_RETRY = dstConfig.getRetryCount();
  90 |         }
  91 |         if (dstConfig.getRetryWaitTimeMs() != null) {
  92 |             RETRY_SLEEP_MS = dstConfig.getRetryWaitTimeMs();
  93 |         }
  94 |     }
  95 | 
  96 |     /**
  97 |      * 执行Stream Load导入
  98 |      * @param label 任务唯一标识（建议使用UUID）
  99 |      * @param dbName 目标数据库名
 100 |      * @param tableName 目标表名
 101 |      * @param columns 目标表列名列表（顺序需与数据对应）
 102 |      * @param rows 待导入数据行（字节数组形式）
 103 |      * @param totalBytes 数据总字节数（用于预分配缓冲区）
 104 |      * @param enableEasyMatchMode 是否启用简单匹配模式（JSON字段名直接映射列名）
 105 |      * @return 最终成功的label
 106 |      * @throws IOException 导入失败时抛出
 107 |      */
 108 |     public String doStreamLoad(String label, String dbName, String tableName, List<String> columns,
 109 |                               List<byte[]> rows, int totalBytes, boolean enableEasyMatchMode) throws IOException {
 110 |         // 构造Stream Load API地址
 111 |         String loadUrl = "http://" + dstConfig.getHttpHost() + "/api/" + dbName + "/" + tableName + "/_stream_load";
 112 |         boolean finished = false;
 113 |         int retry = 0;
 114 | 
 115 |         // 重试逻辑（最多MAX_RETRY次）
 116 |         while (!finished && retry <= MAX_RETRY) {
 117 |             try {
 118 |                 // 发送HTTP PUT请求
 119 |                 Map<String, Object> loadResult = doHttpPut(loadUrl, label, joinRows(rows, totalBytes), columns, enableEasyMatchMode);
 120 | 
 121 |                 // 解析返回结果
 122 |                 final String keyStatus = "Status";
 123 |                 if (null == loadResult || !loadResult.containsKey(keyStatus)) {
 124 |                     log.error("Invalid response: " + JacksonUtil.toJson(loadResult));
 125 |                     throw new IOException("Unable to flush data: unknown result status.");
 126 |                 }
 127 | 
 128 |                 // 处理不同状态
 129 |                 if (RESULT_FAILED.equals(loadResult.get(keyStatus))) {
 130 |                     throw new IOException("Import failed: " + JacksonUtil.toJson(loadResult));
 131 |                 } else if (RESULT_LABEL_EXISTED.equals(loadResult.get(keyStatus))) {
 132 |                     // 标签冲突时检查任务最终状态
 133 |                     checkLabelState(dstConfig.getHttpHost(), label, dbName);
 134 |                 } else {
 135 |                     // 导入成功
 136 |                     finished = true;
 137 |                 }
 138 |             } catch (Exception e) {
 139 |                 log.warn("Retry {}: Failed to import data. Error: {}", retry, ExceptionUtils.getRootCauseMessage(e), e);
 140 |                 try {
 141 |                     Thread.sleep(RETRY_SLEEP_MS);
 142 |                 } catch (InterruptedException ex) {
 143 |                     Thread.currentThread().interrupt();
 144 |                 }
 145 |             } finally {
 146 |                 retry++;
 147 |                 // 每次重试生成新label避免冲突
 148 |                 label = UUID.randomUUID().toString();
 149 |             }
 150 |         }
 151 | 
 152 |         if (!finished) {
 153 |             throw new IOException("Import failed after " + retry + " retries.");
 154 |         }
 155 |         return label;
 156 |     }
 157 | 
 158 |     /**
 159 |      * 合并多行数据为单个字节数组（根据格式添加分隔符）
 160 |      * @param rows 原始数据行列表
 161 |      * @param totalBytes 预估总字节数
 162 |      * @return 合并后的字节数组
 163 |      */
 164 |     private byte[] joinRows(List<byte[]> rows, int totalBytes) {
 165 |         if (format == StarRocksValFormat.csv) {
 166 |             // CSV格式：每行末尾添加换行符
 167 |             ByteBuffer buffer = ByteBuffer.allocate(totalBytes + rows.size() * lineDelimiter.length);
 168 |             for (byte[] row : rows) {
 169 |                 buffer.put(row);
 170 |                 buffer.put(lineDelimiter);
 171 |             }
 172 |             return buffer.array();
 173 |         } else if (format == StarRocksValFormat.json) {
 174 |             // JSON格式：包装为JSON数组（如 [{"a":1},{"a":2}]）
 175 |             ByteBuffer buffer = ByteBuffer.allocate(totalBytes + (rows.isEmpty() ? 2 : rows.size() + 1));
 176 |             buffer.put("[".getBytes(StandardCharsets.UTF_8));
 177 |             byte[] jsonDelimiter = ",".getBytes(StandardCharsets.UTF_8);
 178 |             boolean isFirstElement = true;
 179 |             for (byte[] row : rows) {
 180 |                 if (!isFirstElement) {
 181 |                     buffer.put(jsonDelimiter);
 182 |                 }
 183 |                 buffer.put(row);
 184 |                 isFirstElement = false;
 185 |             }
 186 |             buffer.put("]".getBytes(StandardCharsets.UTF_8));
 187 |             return buffer.array();
 188 |         } else {
 189 |             throw new RuntimeException("Unsupported format: " + format);
 190 |         }
 191 |     }
 192 | 
 193 |     /**
 194 |      * 检查指定label的导入状态（轮询）
 195 |      * @param host StarRocks主机地址
 196 |      * @param label 任务标识
 197 |      * @param dbName 数据库名
 198 |      * @throws IOException 状态异常时抛出
 199 |      */
 200 |     @SuppressWarnings("unchecked")
 201 |     protected void checkLabelState(String host, String label, String dbName) throws IOException {
 202 |         int retryCount = 0;
 203 |         while (true) {
 204 |             try {
 205 |                 // 指数退避策略（最多等待5秒）
 206 |                 TimeUnit.SECONDS.sleep(Math.min(++retryCount, 5));
 207 | 
 208 |                 try (CloseableHttpClient httpclient = HttpClients.createDefault()) {
 209 |                     // 构造状态查询请求
 210 |                     HttpGet httpGet = new HttpGet("http://" + host + "/api/" + dbName + "/get_load_state?label=" + label);
 211 |                     httpGet.setHeader("Authorization", getBasicAuthHeader(dstConfig.getUserName(), dstConfig.getPassword()));
 212 |                     httpGet.setHeader("Connection", "close");
 213 | 
 214 |                     try (CloseableHttpResponse resp = httpclient.execute(httpGet)) {
 215 |                         HttpEntity respEntity = resp.getEntity();
 216 |                         if (resp.getStatusLine().getStatusCode() != 200) {
 217 |                             throw new IOException("Status check failed for label: " + label);
 218 |                         }
 219 | 
 220 |                         // 解析状态
 221 |                         Map<String, Object> result = (Map<String, Object>) JSON.parse(EntityUtils.toString(respEntity));
 222 |                         String labelState = (String) result.get("state");
 223 |                         if (labelState == null) {
 224 |                             throw new IOException("Invalid state response: " + result);
 225 |                         }
 226 | 
 227 |                         // 处理状态
 228 |                         switch (labelState) {
 229 |                             case LAEBL_STATE_VISIBLE:
 230 |                             case LAEBL_STATE_COMMITTED:
 231 |                                 return;  // 成功
 232 |                             case RESULT_LABEL_PREPARE:
 233 |                                 continue;  // 继续轮询
 234 |                             case RESULT_LABEL_ABORTED:
 235 |                                 throw new RuntimeException("Import aborted for label: " + label);
 236 |                             default:
 237 |                                 throw new IOException("Unknown state: " + labelState);
 238 |                         }
 239 |                     }
 240 |                 }
 241 |             } catch (InterruptedException e) {
 242 |                 Thread.currentThread().interrupt();
 243 |                 throw new IOException("Interrupted during state check", e);
 244 |             }
 245 |         }
 246 |     }
 247 | 
 248 |     /**
 249 |      * 发送HTTP PUT请求执行Stream Load
 250 |      * @param loadUrl API地址
 251 |      * @param label 任务标识
 252 |      * @param data 待发送数据（字节数组）
 253 |      * @param columns 列名列表
 254 |      * @param enableEasyMatchMode 是否启用简单匹配模式
 255 |      * @return StarRocks返回的JSON结果（Map形式）
 256 |      * @throws IOException 请求失败时抛出
 257 |      */
 258 |     @SuppressWarnings("unchecked")
 259 |     private Map<String, Object> doHttpPut(String loadUrl, String label, byte[] data,
 260 |                                          List<String> columns, boolean enableEasyMatchMode) throws IOException {
 261 |         // 配置HTTP客户端（支持重定向）
 262 |         final HttpClientBuilder httpClientBuilder = HttpClients.custom()
 263 |                 .setRedirectStrategy(new DefaultRedirectStrategy() {
 264 |                     @Override
 265 |                     protected boolean isRedirectable(String method) {
 266 |                         return true;
 267 |                     }
 268 |                 });
 269 | 
 270 |         try (CloseableHttpClient httpclient = httpClientBuilder.build()) {
 271 |             HttpPut httpPut = new HttpPut(loadUrl);
 272 | 
 273 |             // 设置列映射（CSV或非简单匹配模式时必需）
 274 |             if ((format == StarRocksValFormat.csv || !enableEasyMatchMode) && columns != null && !columns.isEmpty()) {
 275 |                 String colStr = format == StarRocksValFormat.json ?
 276 |                     String.join(",", columns) :  // JSON直接拼接列名
 277 |                     columns.stream().map(f -> String.format("`%s`", f.trim().replace("`", ""))).collect(Collectors.joining(","));  // CSV列名用反引号包裹
 278 |                 httpPut.setHeader("columns", colStr);
 279 |             }
 280 | 
 281 |             // 基础头信息
 282 |             httpPut.setHeader("timezone", String.valueOf(dstConfig.getTimezone()));
 283 |             httpPut.setHeader("timeout", String.valueOf(dstConfig.getConnectionTimeoutSec()));
 284 |             httpPut.setHeader("exec_mem_limit", String.valueOf(dstConfig.getLoadExecMemLimitMb() * 1024 * 1024));
 285 |             httpPut.setHeader("Expect", "100-continue");  // HTTP 100 Continue
 286 |             httpPut.setHeader("label", label);
 287 |             httpPut.setHeader("Content-Type", "text/html");
 288 |             httpPut.setHeader("Authorization", getBasicAuthHeader(dstConfig.getUserName(), dstConfig.getPassword()));
 289 |             httpPut.setEntity(new ByteArrayEntity(data));
 290 |             httpPut.setConfig(RequestConfig.custom()
 291 |                     .setRedirectsEnabled(true)
 292 |                     .setSocketTimeout(httpSoTimeout)
 293 |                     .build());
 294 | 
 295 |             // 格式相关头信息
 296 |             if (format == StarRocksValFormat.csv) {
 297 |                 httpPut.setHeader("column_separator", "\\" + dstConfig.getColumnSeparator());
 298 |                 httpPut.setHeader("row_delimiter", "\\" + dstConfig.getLineSeparator());
 299 |             } else if (format == StarRocksValFormat.json) {
 300 |                 httpPut.setHeader("format", "json");
 301 |                 httpPut.setHeader("strip_outer_array", "true");  // 去除外层数组
 302 |                 httpPut.setHeader("ignore_json_size", "true");  // 忽略JSON大小限制
 303 |             } else {
 304 |                 throw new UnsupportedOperationException("Unsupported format: " + format);
 305 |             }
 306 | 
 307 |             // 执行请求并解析响应
 308 |             try (CloseableHttpResponse resp = httpclient.execute(httpPut)) {
 309 |                 HttpEntity respEntity = resp.getEntity();
 310 |                 if (resp.getStatusLine().getStatusCode() != 200) {
 311 |                     String errorMsg = respEntity != null ?
 312 |                         EntityUtils.toString(respEntity) : "Empty response";
 313 |                     throw new IOException("HTTP error: " + errorMsg);
 314 |                 }
 315 |                 return (Map<String, Object>) JSON.parse(EntityUtils.toString(respEntity));
 316 |             }
 317 |         }
 318 |     }
 319 | 
 320 |     /**
 321 |      * 生成Basic Auth认证头
 322 |      * @param username 用户名
 323 |      * @param password 密码
 324 |      * @return Base64编码的认证字符串
 325 |      */
 326 |     private String getBasicAuthHeader(String username, String password) {
 327 |         String auth = username + ":" + password;
 328 |         byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.UTF_8));
 329 |         return "Basic " + new String(encodedAuth);
 330 |     }
 331 | }


// ====== FILE: ./src/main/java/com/astro/param/PayCallBackParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.io.Serializable;
   6 | import java.math.BigDecimal;
   7 | 
   8 | @Data
   9 | public class PayCallBackParam implements Serializable {
  10 | 
  11 |     /**
  12 |      * 交易id
  13 |       */
  14 |     String txId;
  15 | 
  16 |     /**
  17 |      * 用户地址
  18 |      */
  19 |     String userUrl;
  20 | 
  21 |     /**
  22 |      * 交易金额
  23 |      */
  24 |     BigDecimal payAmt;
  25 | 
  26 | }



// ====== FILE: ./src/main/java/com/astro/param/CreatGainParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class CreatGainParam {
   7 | 
   8 |     private Long base;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/param/ImgParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class ImgParam {
   7 | 
   8 |     private  String address;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/param/AddressUtxo.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class AddressUtxo {
   7 | 
   8 |     /**
   9 |      * 地址
  10 |      */
  11 |     private String address;
  12 | 
  13 |     /**
  14 |      * utxo
  15 |      */
  16 |     private String nftUtxo;
  17 | 
  18 | }



// ====== FILE: ./src/main/java/com/astro/param/GetCoinsParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class GetCoinsParam {
   7 | 
   8 |     private String address;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/param/UpdateNftParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class UpdateNftParam {
   7 | 
   8 |     /**
   9 |      * 编号
  10 |      */
  11 |     private Integer nftId;
  12 | 
  13 |     /**
  14 |      * nftUtxo
  15 |      */
  16 |     private String nftUtxo;
  17 | 
  18 |     /**
  19 |      * 新的 nft 拥有者钱包地址
  20 |      */
  21 |     private String ownerAddress;
  22 | 
  23 |     /**
  24 |      * 缴税状态
  25 |      */
  26 |     private Integer taxStatus;
  27 | 
  28 |     /**
  29 |      * 交易金额
  30 |      */
  31 |     private String txAmt;
  32 | 
  33 |     /**
  34 |      *  交易链上状态 内存池1
  35 |      */
  36 |     private Integer chainStatus;
  37 | 
  38 | }



// ====== FILE: ./src/main/java/com/astro/param/RewardParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class RewardParam {
   7 | 
   8 |     private String address;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/param/ClaimParam.java ======

   1 | package com.astro.param;
   2 | import lombok.Data;
   3 | 
   4 | import java.math.BigDecimal;
   5 | 
   6 | @Data
   7 | public class ClaimParam {
   8 | 
   9 |     // 钱包地址
  10 |     private String address;
  11 | 
  12 |     // 能领取的收益
  13 |     private BigDecimal amount;
  14 | 
  15 | }



// ====== FILE: ./src/main/java/com/astro/param/MintPayParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.io.Serializable;
   6 | 
   7 | @Data
   8 | public class MintPayParam implements Serializable {
   9 | 
  10 |     /**
  11 |      * 用户地址
  12 |      */
  13 |     private String userUrl;
  14 | 
  15 |     /**
  16 |      * mint 数量
  17 |      */
  18 |     private Integer mintAmount;
  19 | }



// ====== FILE: ./src/main/java/com/astro/param/GatewayParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.io.Serializable;
   6 | 
   7 | @Data
   8 | public class GatewayParam {
   9 | 
  10 |     private String json;
  11 | 
  12 | }



// ====== FILE: ./src/main/java/com/astro/param/MintQueryParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.io.Serializable;
   6 | 
   7 | @Data
   8 | public class MintQueryParam implements Serializable {
   9 | 
  10 |     /**
  11 |      * 用户地址
  12 |      */
  13 |     private String userUrl;
  14 | 
  15 | }



// ====== FILE: ./src/main/java/com/astro/param/ClaimCheckParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.math.BigDecimal;
   6 | 
   7 | @Data
   8 | public class ClaimCheckParam {
   9 | 
  10 |     private Long orderId;
  11 | 
  12 |     private String address;
  13 | 
  14 |     private BigDecimal reward;
  15 | 
  16 | }



// ====== FILE: ./src/main/java/com/astro/param/FillBaseParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class FillBaseParam {
   7 | 
   8 |     private Integer base;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/param/CreatorParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class CreatorParam {
   7 | 
   8 |     /**
   9 |      * 编号
  10 |      */
  11 |     private Integer nftId;
  12 | 
  13 |     /**
  14 |      * 创世铭文
  15 |      */
  16 |     private String gtId;
  17 | 
  18 |     /**
  19 |      *  nft 所属的hash
  20 |      */
  21 |     private String nftUtxo;
  22 | 
  23 |     /**
  24 |      * nft 拥有者钱包地址
  25 |      */
  26 |     private String address;
  27 | 
  28 | 
  29 | }



// ====== FILE: ./src/main/java/com/astro/param/IpfsParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class IpfsParam {
   7 | 
   8 | 
   9 |     /**
  10 |      *  nft 编号
  11 |      */
  12 |     private Integer nftId;
  13 | 
  14 |     /**
  15 |      *  ipfs hash
  16 |      */
  17 |     private String ipfsUrl;
  18 | 
  19 | }



// ====== FILE: ./src/main/java/com/astro/param/MintCallBackParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.io.Serializable;
   6 | import java.math.BigDecimal;
   7 | import java.util.List;
   8 | 
   9 | @Data
  10 | public class MintCallBackParam implements Serializable {
  11 | 
  12 |     /**
  13 |      * 支付对应的订单id（costFor）
  14 |      */
  15 |     private Long orderId;
  16 | 
  17 |     /**
  18 |      * 支付对应的 address
  19 |      */
  20 |     private String address;
  21 | 
  22 |     /**
  23 |      * mint 次数
  24 |      */
  25 |     private Integer mintAmt;
  26 | 
  27 |     /**
  28 |      * 支付金额
  29 |      */
  30 |     private BigDecimal payAmt;
  31 | 
  32 | 
  33 |     /**
  34 |      * 支付状态 success
  35 |      */
  36 |     private String payStatus;
  37 | 
  38 |     /**
  39 |      * 区块链交易唯一标识
  40 |      */
  41 |     private String txId;
  42 | 
  43 |     /**
  44 |      * mintCallBack 接口支付日志（记录所有调用了此接口的操作，即付了钱的操作
  45 |      */
  46 |     private String payOrigin;
  47 | 
  48 |     /**
  49 |      * 支付时使用的钱包
  50 |      */
  51 |     private String wallet;
  52 | 
  53 | }



// ====== FILE: ./src/main/java/com/astro/param/TxCheckParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.io.Serializable;
   6 | 
   7 | @Data
   8 | public class TxCheckParam implements Serializable {
   9 | 
  10 |     /**
  11 |      * 交易 id
  12 |      */
  13 |     String txId;
  14 | }



// ====== FILE: ./src/main/java/com/astro/param/QueryOrderInfoParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class QueryOrderInfoParam {
   7 | 
   8 | 
   9 | }



// ====== FILE: ./src/main/java/com/astro/param/AddOgWLParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.util.List;
   6 | 
   7 | @Data
   8 | public class AddOgWLParam {
   9 | 
  10 |     private List<String> ogList;
  11 | 
  12 | }



// ====== FILE: ./src/main/java/com/astro/param/SenderOrderParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.io.Serializable;
   6 | 
   7 | @Data
   8 | public class SenderOrderParam implements Serializable {
   9 | 
  10 | 
  11 | 
  12 | }



// ====== FILE: ./src/main/java/com/astro/param/IsRicherParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class IsRicherParam {
   7 | 
   8 |     private String userUrl;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/param/CreatInCodeParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class CreatInCodeParam {
   7 | 
   8 |     private String shareUrl;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/param/CheckInCodeParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.io.Serializable;
   6 | 
   7 | @Data
   8 | public class CheckInCodeParam implements Serializable {
   9 | 
  10 |     /**
  11 |      * 被邀请者的 url
  12 |      */
  13 |     private String invitedUrl;
  14 | 
  15 |     private Long invCode;
  16 | 
  17 | }



// ====== FILE: ./src/main/java/com/astro/param/NftResenderParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class NftResenderParam {
   7 | 
   8 | 
   9 |     Integer nftId;
  10 | 
  11 |     String address;
  12 | 
  13 | }



// ====== FILE: ./src/main/java/com/astro/param/BaseRewParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class BaseRewParam {
   7 | 
   8 |     private String address;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/param/ValidUtxoParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class ValidUtxoParam {
   7 | 
   8 |     /**
   9 |      * {
  10 |      *     "address": "DGJsyH8oEr5i3UpgyUHvmn331D8VJ3KCwe",
  11 |      *     "value": "01.00000000",
  12 |      *     "utxo": "ab9d452f2a7247c9134f9112f0a313f06b7194e59f5e812b943e057d6722d91",
  13 |      *     "index":1
  14 |      * }
  15 |      */
  16 | 
  17 | 
  18 |     private String address;
  19 | 
  20 |     private String value;
  21 | 
  22 |     private String utxo;
  23 | 
  24 |     private Integer index;
  25 | }



// ====== FILE: ./src/main/java/com/astro/param/RicherParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class RicherParam {
   7 | 
   8 |     private String address;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/param/MintOrderParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.io.Serializable;
   6 | import java.math.BigDecimal;
   7 | 
   8 | @Data
   9 | public class MintOrderParam implements Serializable {
  10 | 
  11 |     /**
  12 |      * 用户钱包地址
  13 |      */
  14 |     private String userUrl;
  15 | 
  16 |     /**
  17 |      * 本次订单 mint 的次数
  18 |      */
  19 |     private Integer mintAmount;
  20 | 
  21 |     /**
  22 |      * 支付的🐶币
  23 |      */
  24 |     private BigDecimal payAmount;
  25 | 
  26 |     /**
  27 |      * 支付的🐶币的身份
  28 |      */
  29 |     private Integer style;
  30 | 
  31 |     /**
  32 |      * 狗币的支付状态
  33 |      */
  34 |     private Integer status;
  35 | 
  36 | }



// ====== FILE: ./src/main/java/com/astro/param/PayParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class PayParam {
   7 | 
   8 |     /**
   9 |      * 用户地址
  10 |      */
  11 |     private String userUrl;
  12 | 
  13 |     /**
  14 |      * mint 数量
  15 |      */
  16 |     private Integer mintAmount;
  17 | 
  18 | }



// ====== FILE: ./src/main/java/com/astro/param/QueryCoinsParam.java ======

   1 | package com.astro.param;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class QueryCoinsParam {
   7 | 
   8 |     private String address;
   9 | 
  10 | }



// ====== FILE: ./src/main/java/com/astro/param/request/ClaimCheckRequest.java ======

   1 | package com.astro.param.request;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class ClaimCheckRequest {
   7 | 
   8 |     private Long orderId;
   9 | 
  10 |     private String address;
  11 | 
  12 |     private String reward;
  13 | 
  14 | }



// ====== FILE: ./src/main/java/com/astro/param/request/PayCallBackRequest.java ======

   1 | package com.astro.param.request;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class PayCallBackRequest {
   7 | 
   8 |     /**
   9 |      * 交易id
  10 |      */
  11 |     String txId;
  12 | 
  13 |     /**
  14 |      * 用户地址
  15 |      */
  16 |     String userUrl;
  17 | 
  18 |     /**
  19 |      * 交易金额
  20 |      */
  21 |     String payAmt;
  22 | 
  23 | }



// ====== FILE: ./src/main/java/com/astro/param/request/UpdateNftRequest.java ======

   1 | package com.astro.param.request;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | import java.math.BigDecimal;
   6 | 
   7 | @Data
   8 | public class UpdateNftRequest {
   9 | 
  10 |     /**
  11 |      * 编号
  12 |      */
  13 |     private Integer nftId;
  14 | 
  15 |     /**
  16 |      * nftUtxo
  17 |      */
  18 |     private String nftUtxo;
  19 | 
  20 |     /**
  21 |      * 新的 nft 拥有者钱包地址
  22 |      */
  23 |     private String ownerAddress;
  24 | 
  25 |     /**
  26 |      * 缴税状态
  27 |      */
  28 |     private Integer taxStatus;
  29 | 
  30 |     /**
  31 |      * 交易金额
  32 |      */
  33 |     private String txAmt;
  34 | 
  35 |     /**
  36 |      *  交易链上状态 内存池1  ,
  37 |      */
  38 |     private Integer chainStatus;
  39 | 
  40 | }



// ====== FILE: ./src/main/java/com/astro/param/request/MintCallBackRequest.java ======

   1 | package com.astro.param.request;
   2 | 
   3 | import lombok.Data;
   4 | 
   5 | @Data
   6 | public class MintCallBackRequest {
   7 | 
   8 |     /**
   9 |      * 支付对应的订单id（costFor）
  10 |      */
  11 |     private Long orderId;
  12 | 
  13 |     /**
  14 |      * 支付对应的 address
  15 |      */
  16 |     private String address;
  17 | 
  18 |     /**
  19 |      * mint 次数
  20 |      */
  21 |     private Integer mintAmt;
  22 | 
  23 |     /**
  24 |      * 支付金额
  25 |      */
  26 |     private String payAmt;
  27 | 
  28 | 
  29 |     /**
  30 |      * 支付状态 success
  31 |      */
  32 |     private String payStatus;
  33 | 
  34 |     /**
  35 |      * 区块链交易唯一标识
  36 |      */
  37 |     private String txId;
  38 | 
  39 |     /**
  40 |      * mint 支付源地址
  41 |      */
  42 |     private String payOrigin;
  43 | 
  44 |     /**
  45 |      * 支付时使用的钱包
  46 |      */
  47 |     private String wallet;
  48 | 
  49 | }



// ====== FILE: ./src/main/java/com/astro/controller/MintController.java ======

   1 | package com.astro.controller;
   2 | 
   3 | import cn.hutool.core.bean.BeanUtil;
   4 | import cn.hutool.core.util.StrUtil;
   5 | import com.astro.mapper.AstroAllPayLogDoMapper;
   6 | import com.astro.mapper.NftIndexMapper;
   7 | import com.astro.param.*;
   8 | import com.astro.param.request.MintCallBackRequest;
   9 | import com.astro.param.request.PayCallBackRequest;
  10 | import com.astro.pojo.NftIndexDo;
  11 | import com.astro.response.Response;
  12 | import com.astro.service.ImgService;
  13 | import com.astro.service.LogService;
  14 | import com.astro.service.MintService;
  15 | import com.astro.vo.*;
  16 | import com.astro.vo.result.SenderRes;
  17 | import com.baomidou.mybatisplus.core.toolkit.Wrappers;
  18 | import lombok.extern.slf4j.Slf4j;
  19 | import org.slf4j.Logger;
  20 | import org.slf4j.LoggerFactory;
  21 | import org.springframework.beans.factory.annotation.Autowired;
  22 | import org.springframework.web.bind.annotation.*;
  23 | 
  24 | import javax.servlet.http.HttpServletRequest;
  25 | 
  26 | import java.math.BigDecimal;
  27 | import java.math.RoundingMode;
  28 | import java.util.List;
  29 | 
  30 | //@CrossOrigin(origins = "192.168.2.65:5500", methods = {RequestMethod.GET, RequestMethod.POST})
  31 | //@CrossOrigin(origins = "http://192.168.2.65:5173/")
  32 | @Slf4j
  33 | @RestController
  34 | @RequestMapping("/astro")
  35 | public class MintController {
  36 | 
  37 |     @Autowired
  38 |     MintService mintService;
  39 | 
  40 |     @Autowired
  41 |     AstroAllPayLogDoMapper allPayLogDoMapper;
  42 | 
  43 |     @Autowired
  44 |     ImgService imgService;
  45 | 
  46 |     @Autowired
  47 |     LogService logService;
  48 | 
  49 |     private static final Logger logger = LoggerFactory.getLogger(MintController.class);
  50 | 
  51 |     //  core
  52 |     /**
  53 |      * 判断当前还能 mint 几次
  54 |      * @param param
  55 |      * @return
  56 |      */
  57 |     @PostMapping("/mintQuery")
  58 |     public Response<MintQueryVo> query(@RequestBody MintQueryParam param) {
  59 |         // 在接口请求开始处记录时间戳
  60 |         long startTime = System.currentTimeMillis();
  61 | 
  62 |         log.info("query 入参{}", param);
  63 |         Response<MintQueryVo> response = mintService.mintQuery(param);
  64 |         log.info("query 出参{}", response);
  65 | 
  66 |         // 在接口请求结束处记录时间戳
  67 |         long endTime = System.currentTimeMillis();
  68 |         // 计算请求的执行时间
  69 |         long executionTime = endTime - startTime;
  70 | 
  71 |         // 将执行时间记录到日志中
  72 |         logger.info("mintQuery 接口响应速度：{} 毫秒", executionTime);
  73 | 
  74 |         return response;
  75 |     }
  76 | 
  77 | 
  78 |     //  core
  79 |     /**
  80 |      * mint 支付
  81 |      * @param param
  82 |      * @return
  83 |      */
  84 |     @PostMapping("/mintPay")
  85 |     public Response<MintPayVo> pay(@RequestBody MintPayParam param) {
  86 |         logger.info("pay api in{}", param);
  87 |         // 在接口请求开始处记录时间戳
  88 |         long startTime = System.currentTimeMillis();
  89 |         Response<MintPayVo> response = mintService.pay(param);// 正常业务
  90 | 
  91 |         logger.info("pay api out{}", response);
  92 | 
  93 |         logService.mintPayLog(param, Long.valueOf(response.getData().getOrderId()));// 日志
  94 | 
  95 |         return response;
  96 |     }
  97 | 
  98 |     //  core
  99 |     /**
 100 |      * mint 回调
 101 |      * @param request
 102 |      * @return
 103 |      */
 104 |     @PostMapping("/mintCallBack")
 105 |     public Response mintCallBack(@RequestBody MintCallBackRequest request) {
 106 | 
 107 |         log.warn("支付回调入参 mintCallBack {}", request);
 108 | 
 109 |         /**
 110 |          * String 转 BigDecimal
 111 |          */
 112 |         MintCallBackParam param = new MintCallBackParam();
 113 | 
 114 |         // 将传过来的金额（String）更换为BigDecimal，并限制为2位小数
 115 |         BigDecimal payAmt = new BigDecimal(request.getPayAmt()).setScale(2, RoundingMode.HALF_UP);
 116 |         log.warn("api mintCallBack in {}", payAmt);
 117 | 
 118 |         // 参数转换
 119 |         param.setOrderId(request.getOrderId());// 订单 id
 120 |         param.setAddress(request.getAddress());// 地址
 121 |         param.setMintAmt(request.getMintAmt());// mint 次数
 122 |         param.setPayAmt(payAmt); // mint 金额
 123 |         param.setPayStatus(request.getPayStatus());// 支付状态
 124 |         param.setTxId(request.getTxId());// 交易 id
 125 |         param.setWallet(request.getWallet());// 交易时使用的钱包
 126 | 
 127 |         Long logId = logService.mintCallBackLog(param);// 日志记录 mintCallBack
 128 | 
 129 |         param.setPayOrigin(logId.toString());
 130 | 
 131 |         Response response = mintService.mintCallBack(param);// 正常业务订单
 132 | 
 133 | 
 134 |         log.info("api mintCallBack out {}", response);
 135 |         return response;
 136 |     }
 137 | 
 138 |     //  core
 139 |     /**
 140 |      * 链上交易 id 校验
 141 |      * @param
 142 |      * @return
 143 |      */
 144 |     @GetMapping("/payCheck")
 145 |     public Response<Boolean> payCheck(@RequestParam String txId) {
 146 |         log.info("链上交易校验入参{}", txId);
 147 | 
 148 |         Response<Boolean> response = mintService.check(txId);
 149 | 
 150 |         log.info("链上交易校验出参{}", txId);
 151 |         return response;
 152 |     }
 153 | 
 154 | 
 155 |     //  core
 156 |     /**
 157 |      * 1.pay 回调确定哪些 nft 购买订单是已经付款
 158 |      * 2.将 nft 购买者地址，以及 nft 所属的 utxo_hash 返回给链上
 159 |      * @param
 160 |      * @return
 161 |      */
 162 |     @PostMapping("/payCallBack")
 163 |     public Response<SenderRes> payCallBack(@RequestBody PayCallBackRequest request) {
 164 | 
 165 |         log.info("支付上链入参 request {}", request);
 166 | 
 167 |         int endIndex = request.getPayAmt().length() - 8;
 168 |         String payAmtStr = request.getPayAmt().substring(0, endIndex);// 截掉8位（ 8000 0000 0000）变成（8000）
 169 |         BigDecimal payAmt = new BigDecimal(payAmtStr);//8000
 170 | 
 171 |         BigDecimal payAmtDec = payAmt.setScale(0, BigDecimal.ROUND_DOWN);// 转为 8000
 172 |         BigDecimal payAmtDec2Scale = payAmtDec.setScale(2);// 转为 2 位 8000.00
 173 | 
 174 |         PayCallBackParam param = new PayCallBackParam();
 175 |         param.setPayAmt(payAmtDec2Scale);
 176 |         param.setTxId(request.getTxId());
 177 |         param.setUserUrl(request.getUserUrl());
 178 | 
 179 |         log.info("支付上链入参 param {}", param);
 180 | 
 181 |         Long logId = logService.payCallBackLog(request, param);// payCallBack 日志
 182 | 
 183 |         Response response = mintService.payCallBack(param);// payCallBack 正常业务
 184 | 
 185 |         log.info("支付上链出参{}", response);
 186 | 
 187 |         return response;
 188 |     }
 189 | 
 190 | 
 191 | 
 192 |     /**
 193 |      * 查询剩下的 nft 数量
 194 |      * @param request
 195 |      * @return
 196 |      */
 197 |     @PostMapping("/left")
 198 |     public Response<Integer> left(HttpServletRequest request) {
 199 |         log.info("left 入参{}", request);
 200 |         // 在接口请求开始处记录时间戳
 201 |         long startTime = System.currentTimeMillis();
 202 | 
 203 |         Response<Integer> response = mintService.firstUnSoldNum();
 204 | 
 205 |         // 在接口请求结束处记录时间戳
 206 |         long endTime = System.currentTimeMillis();
 207 |         // 计算请求的执行时间
 208 |         long executionTime = endTime - startTime;
 209 |         // 将执行时间记录到日志中
 210 |         logger.info("left 接口响应速度：{} 毫秒", executionTime);
 211 |         log.info("left 出参{}", response);
 212 |         return response;
 213 |     }
 214 | 
 215 |     /**
 216 |      * 生成邀请码
 217 |      */
 218 |     @PostMapping("/creatCode")
 219 |     public Response<InviteCodeVo> creatInviteCode(@RequestBody CreatInCodeParam param) {
 220 |         // 在接口请求开始处记录时间戳
 221 |         long startTime = System.currentTimeMillis();
 222 |         Response<InviteCodeVo> response = mintService.creatInviteCode(param);
 223 |         // 在接口请求结束处记录时间戳
 224 |         long endTime = System.currentTimeMillis();
 225 |         // 计算请求的执行时间
 226 |         long executionTime = endTime - startTime;
 227 |         // 将执行时间记录到日志中
 228 |         logger.info("creatInviteCode 接口响应速度：{} 毫秒", executionTime);
 229 |         return response;
 230 |     }
 231 | 
 232 |     /**
 233 |      * 校验邀请码
 234 |      */
 235 |     @PostMapping("/checkCode")
 236 |     public Response checkInviteCode(CheckInCodeParam param) {
 237 |         log.info("checkInviteCode 入参{}", param);
 238 |         // 在接口请求开始处记录时间戳
 239 |         long startTime = System.currentTimeMillis();
 240 |         Response response = mintService.checkInviteCode(param);
 241 |         log.info("checkInviteCode 出参{}", response);
 242 |         // 在接口请求结束处记录时间戳
 243 |         long endTime = System.currentTimeMillis();
 244 |         // 计算请求的执行时间
 245 |         long executionTime = endTime - startTime;
 246 |         // 将执行时间记录到日志中
 247 |         logger.info("checkInviteCode 接口响应速度：{} 毫秒", executionTime);
 248 |         return response;
 249 |     }
 250 | 
 251 |     /**
 252 |      * 链上 nft
 253 |      * @param param
 254 |      * @return
 255 |      */
 256 |     @PostMapping("/creator")
 257 |     public Response creator(@RequestBody CreatorParam param) {
 258 |         log.info("链上交易校验入参 {}", param);
 259 |         // 在接口请求开始处记录时间戳
 260 |         long startTime = System.currentTimeMillis();
 261 |         Response res = imgService.creator(param);
 262 |         // 在接口请求结束处记录时间戳
 263 |         long endTime = System.currentTimeMillis();
 264 |         // 计算请求的执行时间
 265 |         long executionTime = endTime - startTime;
 266 |         // 将执行时间记录到日志中
 267 |         logger.info("接口响应速度：{} 毫秒", executionTime);
 268 |         log.info("链上交易校验出参{}", param);
 269 |         return res;
 270 |     }
 271 | 
 272 |     /**
 273 |      * 更新 'astro_all_pay_log' 、 'tax_1of1_nft' 、'rich_holder'中 nft 持有者的数据
 274 |      * @param
 275 |      * @return
 276 |      */
 277 |     @PostMapping("/updateNft")
 278 |     public Response update(@RequestBody UpdateNftParam param) {
 279 | 
 280 |         log.info("update 入参 param{}", param);
 281 |         // 在接口请求开始处记录时间戳
 282 |         long startTime = System.currentTimeMillis();
 283 |         Response update = imgService.update(param);
 284 |         // 在接口请求结束处记录时间戳
 285 |         long endTime = System.currentTimeMillis();
 286 |         // 计算请求的执行时间
 287 |         long executionTime = endTime - startTime;
 288 |         // 将执行时间记录到日志中
 289 |         logger.info("update接口响应速度：{} 毫秒", executionTime);
 290 |         log.info("update出参{}", update);
 291 |         return update;
 292 |     }
 293 | 
 294 |     /**
 295 |      * 通过钱包地址获取当前用户拥有的 nft 在 oss 上的链接
 296 |      * @param param
 297 |      * @return
 298 |      */
 299 |     @PostMapping("/img")
 300 |     public Response<List<ImgVo>> image(@RequestBody ImgParam param) {
 301 |         log.info("图片交易校验入参{}", param);
 302 |         // 在接口请求开始处记录时间戳
 303 |         long startTime = System.currentTimeMillis();
 304 |         Response<List<ImgVo>> res = imgService.img(param);
 305 |         // 在接口请求结束处记录时间戳
 306 |         long endTime = System.currentTimeMillis();
 307 |         // 计算请求的执行时间
 308 |         long executionTime = endTime - startTime;
 309 |         // 将执行时间记录到日志中
 310 |         logger.info("接口响应速度：{} 毫秒", executionTime);
 311 |         log.info("图片交易校验出参{}", param);
 312 |         return res;
 313 |     }
 314 | 
 315 |     /**
 316 |      * 通过钱包地址获取当前用户拥有的 nft 在 ipfs 上的链接
 317 |      * @param param
 318 |      * @return
 319 |      */
 320 |     @PostMapping("/ipfsImg")
 321 |     public Response<List<IpfsImgVo>> ipfsImg(@RequestBody ImgParam param) {
 322 |         log.info("ipfs 入参{}", param);
 323 |         // 在接口请求开始处记录时间戳
 324 |         long startTime = System.currentTimeMillis();
 325 |         Response<List<IpfsImgVo>> res = imgService.ipfsImg(param);
 326 |         // 在接口请求结束处记录时间戳
 327 |         long endTime = System.currentTimeMillis();
 328 |         // 计算请求的执行时间
 329 |         long executionTime = endTime - startTime;
 330 |         // 将执行时间记录到日志中
 331 |         logger.info("ipfs 接口响应速度：{} 毫秒", executionTime);
 332 |         log.info("ipfs 出参{}", res);
 333 |         return res;
 334 |     }
 335 | 
 336 |     /**
 337 |      *  ipfs 星际文件存储系统图片 hash 入库
 338 |      * @param param
 339 |      * @return
 340 |      */
 341 |     @PostMapping("/ipfs")
 342 |     public Response ipfsInput(@RequestBody IpfsParam param) {
 343 |         log.info("ipfs 入参{}", param);
 344 |         Response res = imgService.ipfsInput(param);
 345 |         log.info("ipfs 出参{}", param);
 346 |         return res;
 347 |     }
 348 | 
 349 |     /**
 350 |      * 一次性获取所有 nft 的 所有链上信息 nftId、gtId 、nftUtxo、address
 351 |      * @param request
 352 |      * @return <List<UtxoVo>>
 353 |      */
 354 |     @PostMapping("/allUtxo")
 355 |     public Response<List<UtxoVo>> allUtxo(HttpServletRequest request) {
 356 |         Response<List<UtxoVo>> listResponse = imgService.allUtxo();
 357 |         return listResponse;
 358 |     }
 359 | 
 360 | 
 361 |     @Autowired
 362 |     NftIndexMapper indexMapper;
 363 | 
 364 |     @PostMapping("/updateAddressValidUtxo")
 365 |     public Response updateAddressValidUtxo(@RequestBody ValidUtxoParam param) {
 366 |         log.info("updateAddressValidUtxo 入参{}", param);
 367 |         Response response = mintService.updateAddressValidUtxo(param);
 368 |         log.info("updateAddressValidUtxo 出参{}", response);
 369 |         return response;
 370 |     }
 371 | 
 372 |     /**
 373 |      *
 374 |      * @param address
 375 |      * @return
 376 |      */
 377 |     @GetMapping("/getAddressValidUtxo")
 378 |     public Response<ValidUtxoVo> getAddressValidUtxo(@RequestParam String address) {
 379 | 
 380 |         if (StrUtil.isEmpty(address)) {
 381 |             return Response.successMsg("address is empty");
 382 |         }
 383 | 
 384 |         log.info("getAddressValidUtxo 出参{}", address);
 385 | 
 386 |         NftIndexDo nftIndexDo = indexMapper.selectOne(Wrappers.lambdaQuery(NftIndexDo.class)
 387 |                 .eq(NftIndexDo::getAddress, address));
 388 | 
 389 |         if (nftIndexDo == null) {
 390 |             return Response.successMsg(null, "不存在这条数据");
 391 |         }
 392 | 
 393 |         ValidUtxoVo vo = BeanUtil.copyProperties(nftIndexDo, ValidUtxoVo.class);
 394 |         vo.setIndex(nftIndexDo.getUtxoIndex());
 395 | 
 396 |         log.info("getAddressValidUtxo 出参{}", vo);
 397 |         return Response.success(vo);
 398 |     }
 399 | 
 400 | 
 401 | 
 402 | 
 403 | 
 404 | 
 405 | 
 406 | 
 407 | 
 408 | 
 409 | 
 410 | 
 411 | 
 412 | 
 413 | 
 414 | 
 415 | 
 416 | 
 417 | 
 418 | 
 419 | 
 420 | 
 421 | }



// ====== FILE: ./src/main/java/com/astro/controller/RichController.java ======

   1 | package com.astro.controller;
   2 | 
   3 | 
   4 | import com.astro.mapper.RewardBaseMapper;
   5 | import com.astro.param.ClaimCheckParam;
   6 | import com.astro.param.CreatGainParam;
   7 | import com.astro.param.GetCoinsParam;
   8 | import com.astro.param.QueryCoinsParam;
   9 | import com.astro.param.request.ClaimCheckRequest;
  10 | import com.astro.pojo.RichRewardBaseDo;
  11 | import com.astro.response.Response;
  12 | import com.astro.service.RichService;
  13 | import com.astro.service.TimeTaskService;
  14 | import com.astro.vo.BaseRewVo;
  15 | import com.astro.vo.QueryCoinsVo;
  16 | import com.astro.vo.UpdateGainsVo;
  17 | import com.baomidou.mybatisplus.core.toolkit.Wrappers;
  18 | import lombok.extern.slf4j.Slf4j;
  19 | import org.slf4j.Logger;
  20 | import org.slf4j.LoggerFactory;
  21 | import org.springframework.beans.factory.annotation.Autowired;
  22 | import org.springframework.web.bind.annotation.*;
  23 | import javax.servlet.http.HttpServletRequest;
  24 | import java.math.BigDecimal;
  25 | import java.math.RoundingMode;
  26 | import java.sql.SQLException;
  27 | import java.time.LocalDate;
  28 | import java.time.LocalDateTime;
  29 | 
  30 | @Slf4j
  31 | @RestController
  32 | @RequestMapping("/rich")
  33 | //@CrossOrigin(origins = "192.168.2.52:5500", methods = {RequestMethod.GET, RequestMethod.POST})
  34 | //@CrossOrigin(origins = "http://192.168.2.65:5173/")
  35 | public class RichController {
  36 | 
  37 |     @Autowired
  38 |     RewardBaseMapper rewardBaseMapper;
  39 | 
  40 |     @Autowired
  41 |     RichService richService;
  42 | 
  43 |     @Autowired
  44 |     TimeTaskService timeTaskService;
  45 | 
  46 |     private static final Logger logger = LoggerFactory.getLogger(RichController.class);
  47 | 
  48 | 
  49 |     /**
  50 |      * 1.填写当天矿场收益
  51 |      * 2.添加收益的同时累加所有当时 nft 持有者的收益
  52 |      * @param param
  53 |      * @return
  54 |      */
  55 |     @PostMapping("/updateGains")
  56 |     public Response<UpdateGainsVo> updateGains(@RequestBody CreatGainParam param) throws SQLException {
  57 |         log.info("填写当天矿场收益入参{}", param);
  58 |         Response<UpdateGainsVo> response = timeTaskService.updateGains(param);
  59 |         log.info("填写当天矿场收益出参{}", response);
  60 |         return response;
  61 |     }
  62 | 
  63 | 
  64 |     /**
  65 |      * 查询当天的矿场产出
  66 |      * @param request
  67 |      * @return
  68 |      */
  69 |     @GetMapping("/queryBase")
  70 |     public Response<BaseRewVo> baseRew(HttpServletRequest request){
  71 | 
  72 |         // 获取当前日期和时间
  73 |         LocalDateTime now = LocalDateTime.now();
  74 |         // 转换为精确到天的日期数据
  75 |         LocalDate today = now.toLocalDate();
  76 | 
  77 |         RichRewardBaseDo baseDo = rewardBaseMapper.selectOne(Wrappers.lambdaQuery(RichRewardBaseDo.class)
  78 |                 .select(RichRewardBaseDo::getRewBase)
  79 |                 .eq(RichRewardBaseDo::getRewData, today));
  80 | 
  81 |         if (baseDo == null) {
  82 |            return Response.successMsg(null,"Today's earnings have not yet been generated");
  83 |         }
  84 | 
  85 |         BaseRewVo vo = new BaseRewVo();
  86 |         vo.setRewBase(baseDo.getRewBase());
  87 | 
  88 |         return Response.success(vo);
  89 |     }
  90 | 
  91 | 
  92 |     /**
  93 |      * 查询当前用户的个人收益
  94 |      * @param address
  95 |      * @return
  96 |      */
  97 |     @GetMapping("/queryCoins")
  98 |     public Response<QueryCoinsVo> queryCoins(@RequestParam String address) {
  99 |         QueryCoinsParam param = new QueryCoinsParam();
 100 |         param.setAddress(address);
 101 |         log.info("queryCoins入参{}", param);
 102 |         // 在接口请求开始处记录时间戳
 103 |         long startTime = System.currentTimeMillis();
 104 |         Response<QueryCoinsVo> vo = richService.query(param);
 105 |         // 在接口请求结束处记录时间戳
 106 |         long endTime = System.currentTimeMillis();
 107 |         // 计算请求的执行时间
 108 |         long executionTime = endTime - startTime;
 109 |         // 将执行时间记录到日志中
 110 |         logger.info("queryCoins 接口响应速度：{} 毫秒", executionTime);
 111 |         log.info("queryCoins出参{}", vo);
 112 |         return vo;
 113 |     }
 114 | 
 115 |     /**
 116 |      * 领取个人收益
 117 |      * @param address
 118 |      * @return
 119 |      */
 120 |     @GetMapping("/claim")
 121 |     public Response claim(@RequestParam String address) {
 122 | 
 123 |         Response response = richService.claim(address);
 124 | 
 125 | 
 126 |         return response;
 127 |     }
 128 | 
 129 |     /**
 130 |      * 领取收益的校验 （暂时不用
 131 |      * @param request
 132 |      * @return
 133 |      */
 134 |     @PostMapping("/claimCheck")
 135 |     public Response claimCheck(@RequestBody ClaimCheckRequest request) {
 136 | 
 137 |         log.info("claimCheck param{}", request);
 138 |         // 在接口请求开始处记录时间戳
 139 |         long startTime = System.currentTimeMillis();
 140 | 
 141 | 
 142 |         ClaimCheckParam param = new ClaimCheckParam();
 143 |         param.setAddress(request.getAddress());
 144 |         param.setOrderId(request.getOrderId());
 145 | 
 146 |         BigDecimal reward = new BigDecimal(request.getReward()).setScale(1, RoundingMode.HALF_UP);
 147 |         param.setReward(reward);
 148 | 
 149 |         Response response = richService.claimCheck(param);
 150 | 
 151 |         // 在接口请求结束处记录时间戳
 152 |         long endTime = System.currentTimeMillis();
 153 |         // 计算请求的执行时间
 154 |         long executionTime = endTime - startTime;
 155 |         // 将执行时间记录到日志中
 156 |         logger.info("claimCheck 接口响应速度：{} 毫秒", executionTime);
 157 |         log.info("claimCheck{}", response);
 158 | 
 159 |         return response;
 160 |     }
 161 | 
 162 | 
 163 | 
 164 | 
 165 | 
 166 | 
 167 | 
 168 | 
 169 | }



// ====== FILE: ./src/main/java/com/astro/constant/PayConstant.java ======

   1 | package com.astro.constant;
   2 | 
   3 | import java.math.BigDecimal;
   4 | 
   5 | public class PayConstant {
   6 | 
   7 |     /**
   8 |      * og 身份支付
   9 |      */
  10 |     public static final int OG_PAY = 0;
  11 | 
  12 |     /**
  13 |      * WL 身份支付
  14 |      */
  15 |     public static final int WL_PAY = 1;
  16 | 
  17 |     /**
  18 |      * PUL 身份支付
  19 |      */
  20 |     public static final int PUL_PAY = 2;
  21 | 
  22 |     /**
  23 |      * 补发 身份支付
  24 |      */
  25 |     public static final int RESENDER_PAY = 3;
  26 | 
  27 | 
  28 | 
  29 |     /**
  30 |      * og、wl 权益未使用或未开始支付
  31 |      */
  32 |     public static final int RIGHT_UNUSED_0 = 0;
  33 | 
  34 | 
  35 |     /**
  36 |      * og、wl 权益正在使用或已经使用完毕
  37 |      */
  38 |     public static final int RIGHT_USED_1 = 1;
  39 | 
  40 |     /**
  41 |      * og、wl 能 mint 的次数
  42 |      */
  43 |     public static final int VIP_AMT_1 = 1;
  44 | 
  45 | 
  46 |     /**
  47 |      * 正在支付
  48 |      */
  49 |     public static final int Paying_1 = 1;
  50 | 
  51 |     /**
  52 |      * 已支付
  53 |      */
  54 |     public static final int Paid_2 = 2;
  55 | 
  56 |     /**
  57 |      * 狗🐶币已到钱包
  58 |      */
  59 |     public static final int Received_3 = 3;
  60 | 
  61 |     /**
  62 |      * OG 需支付的🐶币
  63 |      */
  64 |     public static final  BigDecimal OG_COST_500 = new BigDecimal("500");
  65 | 
  66 |     /**
  67 |      * WL 需支付的🐶币
  68 |      */
  69 |     public static final BigDecimal WL_COST_800 = new BigDecimal("800");
  70 | 
  71 |     /**
  72 |      * PUL 需支付的🐶币 正式数据
  73 |      */
  74 |     public static final BigDecimal PUB_COST_1000 = new BigDecimal("1000");
  75 | 
  76 |     /**
  77 |      * PUL 需支付的🐶币 测试数据
  78 |      */
  79 |     public static final BigDecimal PUB_COST_1000_TEST = new BigDecimal("0.10");
  80 | 
  81 |     /**
  82 |      * mint 最小单位
  83 |      */
  84 |     public static final int MINT_1 = 1;
  85 | 
  86 | 
  87 |     /**
  88 |      * 每个用户公售可以 mint 的最多次数
  89 |      */
  90 |     public static final int PUB_MINT_INIT_0 = 0;
  91 | 
  92 |     /**
  93 |      * 每个用户公售可以 mint 的最多次数
  94 |      */
  95 |     public static final int PUB_MINT_10 = 10;
  96 | 
  97 |     /**
  98 |      * 每个用户公售可以 mint 的最多次数测试数据
  99 |      */
 100 |     public static final int PUB_MINT_10000_TEST = 10000;
 101 | 
 102 |     /**
 103 |      * 总体的NFT数量 9982
 104 |      */
 105 |     public static final Integer MAX_1W = 10000;
 106 |     public static final Integer MAX_9982 = 9982;
 107 | 
 108 | }



// ====== FILE: ./src/main/java/com/astro/constant/OrderConstant.java ======

   1 | package com.astro.constant;
   2 | 
   3 | 
   4 | public class OrderConstant {
   5 | 
   6 | 
   7 |     /**
   8 |      * 分发正在确认
   9 |      */
  10 |     public static final Integer GIVING_1  = 1;
  11 | 
  12 |     /**
  13 |      * 分发正在确认
  14 |      */
  15 |     public static final Integer CHECKING_2  = 2;
  16 | 
  17 |     /**
  18 |      * 确认完毕
  19 |      */
  20 |     public static final Integer CHECKED_3  = 3;
  21 | 
  22 | }



// ====== FILE: ./src/main/java/com/astro/constant/JiaRuHttpCode.java ======

   1 | package com.astro.constant;
   2 | 
   3 | 
   4 | public class JiaRuHttpCode {
   5 | 
   6 | 	public static final int SUCCESS = 200;
   7 | 
   8 | 
   9 | 	/**
  10 | 	 * token 状态码
  11 | 	 * 没有token、token 过期、token 不合法
  12 | 	 */
  13 | 	public static final int TOKEN_ERROR = 10003;
  14 | 
  15 | 
  16 | }



// ====== FILE: ./src/main/java/com/astro/constant/RichConstant.java ======

   1 | package com.astro.constant;
   2 | 
   3 | import java.math.BigDecimal;
   4 | 
   5 | public class RichConstant {
   6 | 
   7 |     /**
   8 |      * 稀有度 lv1 数量占总比
   9 |      */
  10 |     public static final BigDecimal LV1 = new BigDecimal("0.50");
  11 | 
  12 |     /**
  13 |      * 稀有度 lv2 数量占总比
  14 |      */
  15 |     public static final BigDecimal LV2 = new BigDecimal("0.12");
  16 | 
  17 |     /**
  18 |      * 稀有度 lv3 数量占总比
  19 |      */
  20 |     public static final BigDecimal LV3 = new BigDecimal("0.09");
  21 | 
  22 |     /**
  23 |      * 稀有度 lv4 数量占总比
  24 |      */
  25 |     public static final BigDecimal LV4 = new BigDecimal("0.09");
  26 | 
  27 |     /**
  28 |      * 稀有度 lv5 数量占总比
  29 |      */
  30 |     public static final BigDecimal LV5 = new BigDecimal("0.11");
  31 | 
  32 |     /**
  33 |      * 稀有度 lv6 数量占总比
  34 |      */
  35 |     public static final BigDecimal LV6 = new BigDecimal("0.05");
  36 | 
  37 | 
  38 | 
  39 | 
  40 |     /**
  41 |      * 按照矿场产量 1.6w 狗狗币算
  42 |      */
  43 | 
  44 |     /**
  45 |      * 每张 lv1 nft 稀有度占百分比  1.0个狗狗币
  46 |      */
  47 |     public static final BigDecimal LV1P = new BigDecimal("0.0000625");
  48 | 
  49 |     /**
  50 |      * 每张 lv2 nft 稀有度占百分比 1.9个狗狗币
  51 |      */
  52 |     public static final BigDecimal LV2P = new BigDecimal("0.00012");
  53 | 
  54 |     /**
  55 |      * 每张 lv3 nft 稀有度占百分比 2.8 个狗狗币
  56 |      */
  57 |     public static final BigDecimal LV3P = new BigDecimal("0.00018");
  58 | 
  59 |     /**
  60 |      * 每张 lv4 nft 稀有度占百分比 4.8个狗狗币
  61 |      */
  62 |     public static final BigDecimal LV4P = new BigDecimal("0.0003");
  63 | 
  64 |     /**
  65 |      * 每张 lv5 nft 稀有度占百分比 9.6 个狗狗币
  66 |      */
  67 |     public static final BigDecimal LV5P = new BigDecimal("0.0006044");
  68 | 
  69 |     /**
  70 |      * 每张 lv6 nft 稀有度占百分比 44.4个狗狗币
  71 |      */
  72 |     public static final BigDecimal LV6P = new BigDecimal("0.00277778");
  73 | 
  74 | 
  75 | }



// ====== FILE: ./src/main/java/com/astro/constant/MailConst.java ======

   1 | package com.astro.constant;
   2 | 
   3 | /**
   4 |  * @Description 邮件常量
   5 |  * @Author 林泽鸿
   6 |  * @Date 2020/4/3 21:13
   7 |  */
   8 | public class MailConst {
   9 |     //你的进行发送邮件的邮箱
  10 |     public static final String USER_NAME = "13750545017@163.com";
  11 |     //授权密码
  12 |     public static final String  PWD_CODE = "XSXKIICNQYXGVRBZ";
  13 |     public static final String MAIL_HOST = "smtp.163.com";
  14 |     public static final String MAIL_SMTP_AUTH = "true";
  15 | 
  16 |     //邮件主题
  17 |     public static final String NOTIFICATION_MAIL_TITLE = "新网易必胜邮件主题";
  18 | 
  19 |     //邮件内容
  20 |     public static final String NOTIFICATION_MAIL_CONTENT = "花西子你有一个新的通知，请前往李佳琪进行查看！";
  21 | 
  22 | }



// ====== FILE: ./src/main/java/com/astro/constant/HttpCode.java ======

   1 | package com.astro.constant;
   2 | 
   3 | 
   4 | public class HttpCode {
   5 | 
   6 | 	public static final int SUCCESS = 200;
   7 | 
   8 | 	/**
   9 | 	 * 业务错误
  10 | 	 */
  11 | 	public static final int BIZ_ERROR = 1000;
  12 | 
  13 | 	/** 未登录 */
  14 | 	public static final int UN_LOGIN = 1001;
  15 | 
  16 | 	/** 登录过期 */
  17 | 	public static final int LOGIN_EXPIRED = 1002;
  18 | 
  19 | 	/**
  20 | 	 * RPC服务错误
  21 | 	 */
  22 | 	public static final int RPC_ERROR = 3000;
  23 | 
  24 | 	/**
  25 | 	 * 请求参数不合法
  26 | 	 */
  27 | 	public static final int BAD_REQUEST_4000 = 4000;
  28 | 
  29 | 	/**
  30 | 	 * 数据库错误
  31 | 	 */
  32 | 	public static final int MYSQL_ERROR_5001 = 5001;
  33 | 
  34 | 
  35 | 
  36 | 	/**
  37 | 	 * 内部错误
  38 | 	 */
  39 | 	public static final int INNER_ERROR_5000 = 5000;
  40 | 
  41 | 	/**
  42 | 	 * http 请求错误
  43 | 	 */
  44 | 	public static final int HTTP_ERROR_5002 = 5002;
  45 | 
  46 | }



// ====== FILE: ./src/main/java/com/astro/constant/ShareConstant.java ======

   1 | package com.astro.constant;
   2 | 
   3 | public class ShareConstant {
   4 | 
   5 |     /**
   6 |      * 邀请码未被分享
   7 |      */
   8 |     public static final int UN_SHARED_0 = 0;
   9 | 
  10 |     /**
  11 |      * 邀请码已被分享
  12 |      */
  13 |     public static final int SHARED_1 = 1;
  14 | }



// ====== FILE: ./src/main/java/com/astro/constant/UrlConstant.java ======

   1 | package com.astro.constant;
   2 | 
   3 | public class UrlConstant {
   4 | 
   5 |     public static final String HTTPS_IPFS = "https://dogepower.xyz/ipfs/";
   6 |     public static final String HTTP_IPFS = "http://mint.astrosea.io/ipfs/";
   7 | 
   8 | 
   9 | }



// ====== FILE: ./src/main/java/com/astro/constant/RpcCode.java ======

   1 | package com.astro.constant;
   2 | 
   3 | /**
   4 |  * 响应状态码
   5 |  *
   6 |  * @author hongmao.xi
   7 |  * @date 11/10/21
   8 |  */
   9 | public class RpcCode {
  10 | 
  11 | 
  12 | 
  13 | 	public static final int BIZ_ERROR = 1000;
  14 | 
  15 | 
  16 | 
  17 | 
  18 | 
  19 | }



// ====== FILE: ./src/main/java/com/astro/constant/NftConstant.java ======

   1 | package com.astro.constant;
   2 | 
   3 | import java.util.ArrayList;
   4 | import java.util.Arrays;
   5 | import java.util.List;
   6 | 
   7 | public class NftConstant {
   8 |     public static final List<Integer> NFT_LV6_IDS = new ArrayList<>(Arrays.asList(
   9 |             9994, 7766, 6336, 6254, 5868, 4504, 4200, 3443, 3350, 2933, 2249, 2023, 1620, 970, 777, 555, 138, 3
  10 |     ));
  11 | 
  12 | 
  13 | 
  14 |     /**
  15 |      * 售卖状态
  16 |      */
  17 |     public static final int UNSOLD = 0;// 未出售
  18 | 
  19 |     public static final int SOLD = 1;// 已出售
  20 | 
  21 | 
  22 | }



// ====== FILE: ./src/main/java/com/astro/constant/TimeConstant.java ======

   1 | package com.astro.constant;
   2 | 
   3 | import java.time.ZoneId;
   4 | import java.time.ZonedDateTime;
   5 | 
   6 | public class TimeConstant {
   7 |     public static final ZonedDateTime OG_BEGIN = ZonedDateTime.of(2023, 10, 31, 19, 0, 0, 0, ZoneId.of("UTC+8"));
   8 | 
   9 |     public static final ZonedDateTime OG_END = ZonedDateTime.of(2023, 10, 31, 19, 59, 59, 0, ZoneId.of("UTC+8"));
  10 | 
  11 |     public static final ZonedDateTime WL_BEGIN = ZonedDateTime.of(2023, 10, 31, 20, 0, 0, 0, ZoneId.of("UTC+8"));
  12 | 
  13 |     public static final ZonedDateTime WL_END = ZonedDateTime.of(2023, 10, 31, 20, 59, 59, 0, ZoneId.of("UTC+8"));
  14 | 
  15 |     public static final ZonedDateTime PUB_BEGIN = ZonedDateTime.of(2023, 10, 31, 21, 0, 0, 0, ZoneId.of("UTC+8"));
  16 | 
  17 |     public static final String OG_TIME = "OG_TIME";
  18 | 
  19 |     public static final String WL_TIME = "WL_TIME";
  20 | 
  21 |     public static final String PUB_TIME = "PUB_TIME";
  22 | 
  23 | }



// ====== FILE: ./src/main/java/com/astro/aspect/RedissonLockAspect.java ======

   1 | package com.astro.aspect;
   2 | 
   3 | import cn.hutool.core.util.StrUtil;
   4 | import com.astro.annotation.RedissonLock;
   5 | import org.aspectj.lang.ProceedingJoinPoint;
   6 | import org.aspectj.lang.annotation.Around;
   7 | import org.aspectj.lang.annotation.Aspect;
   8 | import org.redisson.api.RedissonClient;
   9 | import org.redisson.client.RedisException;
  10 | import org.springframework.beans.factory.annotation.Autowired;
  11 | import org.springframework.stereotype.Component;
  12 | import org.redisson.api.RLock;
  13 | import org.apache.commons.logging.Log;
  14 | import org.apache.commons.logging.LogFactory;
  15 | 
  16 | import java.util.concurrent.TimeUnit;
  17 | 
  18 | 
  19 | /**
  20 |  * 基于 Redisson 分布式锁注解组件实现
  21 |  */
  22 | @Aspect
  23 | @Component
  24 | public class RedissonLockAspect {
  25 | 
  26 | 	private static final Log log = (Log) LogFactory.getLog(RedissonLockAspect.class);
  27 | 
  28 | 	@Autowired
  29 | 	private RedissonClient redissonClient;
  30 | 
  31 | 	// 环绕通知注解，拦截使用了 @RedissonLock 注解的方法
  32 | 	@Around("@annotation(redissonLock)")
  33 | 	public Object around(ProceedingJoinPoint point, RedissonLock redissonLock) {
  34 | 		// 获取 @RedissonLock 注解中指定的锁定 key
  35 | 		String key = redissonLock.key();
  36 | 		if (StrUtil.isEmpty(key)) {
  37 | 			throw new RuntimeException("The key of a distributed lock cannot be empty！");
  38 | 		}
  39 | 
  40 | 		// 获取 @RedissonLock 注解中指定的等待时间，默认为 10 秒
  41 | 		long waitTime = redissonLock.waitTime();
  42 | 
  43 | 		// 获取 @RedissonLock 注解中指定的 key 存活时间，默认为 30 秒
  44 | 		long leaseTime = redissonLock.leaseTime();
  45 | 
  46 | 		// 获取 Redisson 分布式锁 RLock 的实例
  47 | 		RLock lock = redissonClient.getLock("lock_" + key);
  48 | 		try {
  49 | 			// 尝试获取锁，等待时间为 waitTime 秒，锁存活时间为 leaseTime 秒
  50 | 			boolean isLocked = lock.tryLock(waitTime, leaseTime, TimeUnit.SECONDS);
  51 | 
  52 | 			if (isLocked) {
  53 | 				// 执行业务逻辑方法
  54 | 				return point.proceed();
  55 | 			} else {
  56 | 				log.info("当前资源 " + key + " 被其他线程占用！");
  57 | 			}
  58 | 
  59 | 		} catch (RedisException | InterruptedException e) {
  60 | 			log.error("资源" + key + "加锁失败", e);
  61 | 			throw new RuntimeException("资源" + key + "加锁失败", e);
  62 | 		} catch (Throwable t) {
  63 | 			log.error("执行带有分布式锁 " + key + " 的业务逻辑时发生错误。", t);
  64 | 			throw new RuntimeException("执行带有分布式锁 " + key + " 的业务逻辑时发生错误。", t);
  65 | 		} finally {
  66 | 			// 无需判断当前线程是否持有锁，Redisson 已经集成了此功能
  67 | 			lock.unlock();
  68 | 			log.info("释放锁 + key");
  69 | 		}
  70 | 		//暂时先返回 null，根据后续的需求扩展
  71 | 		return null;
  72 | 	}
  73 | }


// ====== FILE: ./src/main/java/com/astro/service/MintService.java ======

   1 | package com.astro.service;
   2 | 
   3 | import com.astro.param.*;
   4 | import com.astro.response.Response;
   5 | import com.astro.vo.InviteCodeVo;
   6 | import com.astro.vo.MintPayVo;
   7 | import com.astro.vo.MintQueryVo;
   8 | import com.astro.vo.result.EachPalRes;
   9 | import com.astro.vo.result.SenderRes;
  10 | 
  11 | import java.math.BigDecimal;
  12 | import java.util.List;
  13 | 
  14 | public interface MintService {
  15 | 
  16 |     /**
  17 |      * 查询有几次mint机会
  18 |      * @param param
  19 |      * @return
  20 |      */
  21 |     Response<MintQueryVo> mintQuery(MintQueryParam param);
  22 | 
  23 |     /**
  24 |      *    mint 支付逻辑
  25 |      * 1. 判断支付时间
  26 |      * 2. 判断支付身份
  27 |      * 3. 判断支付金额
  28 |      * 4. 生成订单信息
  29 |      * @param param
  30 |      * @return
  31 |      */
  32 |     Response<MintPayVo> pay(MintPayParam param);
  33 | 
  34 |     /**
  35 |      * OG mint处理者
  36 |      * @param param
  37 |      * @return
  38 |      */
  39 | 
  40 |     Response<MintPayVo> ogMintHandler(MintPayParam param);
  41 | 
  42 |     /**
  43 |      * WL mint 处理者
  44 |      *
  45 |      * @param param
  46 |      * @return
  47 |      */
  48 |     Response<MintPayVo> wlMintHandler(MintPayParam param);
  49 | 
  50 |     /**
  51 |      * PUB mint 处理者
  52 |      * @param param
  53 |      * @return
  54 |      */
  55 |     Response<MintPayVo> pubMintHandler(MintPayParam param);
  56 | 
  57 |     /**
  58 |      * 为 mint 提供时间判断
  59 |      * @return
  60 |      */
  61 |     String timeJudger();
  62 | 
  63 |     /**
  64 |      * 创建订单数据并返回订单号
  65 |      * @param address
  66 |      * @param cost
  67 |      * @param mintAmt
  68 |      * @param style
  69 |      * @param status
  70 |      * @return
  71 |      */
  72 |     Long creatOrder(String address , BigDecimal cost , Integer mintAmt, Integer style, Integer status);
  73 | 
  74 |     /**
  75 |      * 支付成功后的回调
  76 |      * @param param
  77 |      * @return
  78 |      */
  79 |     Response mintCallBack(MintCallBackParam param);
  80 | 
  81 | 
  82 |     Response nftResender(NftResenderParam param);
  83 | 
  84 |     EachPalRes eachPayLog(String address, Integer mAmt, Integer style);
  85 | 
  86 | 
  87 |     Response<Boolean> check(String txId);
  88 | 
  89 |     Response<InviteCodeVo> creatInviteCode(CreatInCodeParam param);
  90 | 
  91 |     /**
  92 |      * 邀请码校验
  93 |      * @param param
  94 |      * @return
  95 |      */
  96 |     Response checkInviteCode(CheckInCodeParam param);
  97 | 
  98 | 
  99 |     Response<SenderRes> payCallBack(PayCallBackParam param);
 100 | 
 101 | 
 102 |     /**
 103 |      * 若后续进行分布式架构要对此步骤进行加锁
 104 |      * 1.通过 List<Integer> 随机出 nft_id List
 105 |      * 2.将这些被选中的 nft 的状态都改为已经售卖
 106 |      *
 107 |      * @param
 108 |      * @return
 109 |      */
 110 |     SenderRes nftSender(Integer num, String address);
 111 | 
 112 | 
 113 |     List<AddressUtxo> getNftUtxos(List<Integer> nftIds);
 114 | 
 115 |     Response updateAddressValidUtxo(ValidUtxoParam param);
 116 | 
 117 |     Response<Integer> firstUnSoldNum();
 118 | 
 119 | 
 120 | 
 121 | 
 122 | 
 123 | 
 124 | 
 125 | 
 126 | 
 127 | 
 128 | }



// ====== FILE: ./src/main/java/com/astro/service/ScriptService.java ======

   1 | package com.astro.service;
   2 | 
   3 | public interface ScriptService {
   4 | }



// ====== FILE: ./src/main/java/com/astro/service/TimeTaskService.java ======

   1 | package com.astro.service;
   2 | 
   3 | 
   4 | 
   5 | import com.astro.param.CreatGainParam;
   6 | import com.astro.response.Response;
   7 | import com.astro.vo.UpdateGainsVo;
   8 | 
   9 | import java.sql.SQLException;
  10 | import java.time.LocalDate;
  11 | 
  12 | public interface TimeTaskService {
  13 | 
  14 |     /**
  15 |      * 1.填入收益数据
  16 |      * 2.nft 总表扫描，获取所有的持有者数据
  17 |      * 3.再到 rich_reward_log 表中累加收益数据
  18 |      */
  19 |     Response<UpdateGainsVo> updateGains(CreatGainParam param) throws SQLException;
  20 | 
  21 |     /**
  22 |      * @param baseRew
  23 |      * @param now
  24 |      * @return
  25 |      */
  26 |     Response rewardCounter(Long baseRew, LocalDate now) throws SQLException;
  27 | 
  28 | 
  29 | }



// ====== FILE: ./src/main/java/com/astro/service/RichService.java ======

   1 | package com.astro.service;
   2 | 
   3 | 
   4 | import com.astro.param.ClaimCheckParam;
   5 | import com.astro.param.FillBaseParam;
   6 | import com.astro.param.QueryCoinsParam;
   7 | import com.astro.pojo.RichRewardBaseDo;
   8 | import com.astro.response.Response;
   9 | import com.astro.vo.QueryCoinsVo;
  10 | 
  11 | import java.math.BigDecimal;
  12 | 
  13 | public interface RichService {
  14 | 
  15 | 
  16 |     /**
  17 |      * 1. 填写当天的矿场收益
  18 |      *
  19 |      * @param param
  20 |      * @return
  21 |      */
  22 |     Response<RichRewardBaseDo> fillBase(FillBaseParam param);
  23 | 
  24 |     Response<QueryCoinsVo> query(QueryCoinsParam param);
  25 | 
  26 | 
  27 |     Boolean claimJudger(String address);
  28 | 
  29 |     /**
  30 |      * 领取收益总接口
  31 |      * @return
  32 |      */
  33 |     Response claim(String address);
  34 | 
  35 |     Response chainClaim(String address, BigDecimal reward);
  36 | 
  37 | 
  38 |     Long creatOrder(String address, BigDecimal gains);
  39 | 
  40 |     Response claimCheck(ClaimCheckParam param);
  41 | 
  42 |     Response nftResender();
  43 | 
  44 | 
  45 | 
  46 | }



// ====== FILE: ./src/main/java/com/astro/service/ImgService.java ======

   1 | package com.astro.service;
   2 | 
   3 | import com.astro.param.CreatorParam;
   4 | import com.astro.param.ImgParam;
   5 | import com.astro.param.IpfsParam;
   6 | import com.astro.param.UpdateNftParam;
   7 | import com.astro.response.Response;
   8 | import com.astro.vo.ChainMsgVo;
   9 | import com.astro.vo.ImgVo;
  10 | import com.astro.vo.IpfsImgVo;
  11 | import com.astro.vo.UtxoVo;
  12 | 
  13 | import java.util.List;
  14 | 
  15 | public interface ImgService {
  16 | 
  17 |     /**
  18 |      * 通过钱包地址获取当前用户拥有的 nft 在 oss 上的链接
  19 |      * @param param
  20 |      * @return
  21 |      */
  22 |     Response<List<ImgVo>> img(ImgParam param);
  23 | 
  24 |     /**
  25 |      * 通过钱包地址获取当前用户拥有的 nft 在 ipfs 上的链接
  26 |      * @param param
  27 |      * @return
  28 |      */
  29 |     Response<List<IpfsImgVo>> ipfsImg(ImgParam param);
  30 | 
  31 |     /**
  32 |      * nft 链上数据入库
  33 |      * @param param
  34 |      * @return
  35 |      */
  36 |     Response creator(CreatorParam param);
  37 | 
  38 | 
  39 | 
  40 |     /**
  41 |      * 1.更新缴税状态、nftUtxo、nft 归属人钱包地址
  42 |      *
  43 |      * 2.储存 nft 变动信息
  44 |      * @param param
  45 |      * @return
  46 |      */
  47 |     Response update(UpdateNftParam param);
  48 | 
  49 |     /**
  50 |      * 星际文件存储 hash 入库
  51 |      * 包括 lv1 和 lv2～lv6
  52 |      * @param param
  53 |      * @return
  54 |      */
  55 |     Response ipfsInput(IpfsParam param);
  56 | 
  57 |     /**
  58 |      * 通过编号获取 nft 带域名的 url
  59 |      * @param num
  60 |      * @return
  61 |      */
  62 |     String getEndpointUrlByNum(Integer num);
  63 | 
  64 | 
  65 |     /**
  66 |      * 一次性获取所有 nft 的 所有链上信息 nftId、gtId 、nftUtxo、address
  67 |      * @return
  68 |      */
  69 |     Response<List<UtxoVo>> allUtxo();
  70 | 
  71 | 
  72 |     /**
  73 |      * 一次性获取所有 nft 的 所有链上信息 nftId、gtId 、nftUtxo、address
  74 |      * @return <List<UtxoVo>>
  75 |      */
  76 |     Response<List<UtxoVo>> allNftInitData();
  77 | 
  78 | 
  79 | 
  80 | 
  81 | 
  82 | }



// ====== FILE: ./src/main/java/com/astro/service/LogService.java ======

   1 | package com.astro.service;
   2 | 
   3 | import com.astro.param.MintCallBackParam;
   4 | import com.astro.param.MintPayParam;
   5 | import com.astro.param.PayCallBackParam;
   6 | import com.astro.param.request.PayCallBackRequest;
   7 | 
   8 | public interface LogService {
   9 | 
  10 | 
  11 |     /**
  12 |      * mintCallBack 接口日志
  13 |      * @param param
  14 |      * @return
  15 |      */
  16 |     Long mintCallBackLog(MintCallBackParam param);
  17 | 
  18 |     Long payCallBackLog(PayCallBackRequest request , PayCallBackParam param);
  19 |     void mintPayLog(MintPayParam param, Long orderId);
  20 | 
  21 | 
  22 | 
  23 | 
  24 | 
  25 | }



// ====== FILE: ./src/main/java/com/astro/service/TokenService.java ======

   1 | package com.astro.service;
   2 | 
   3 | import com.astro.vo.TokenParam;
   4 | 
   5 | public interface TokenService {
   6 | 
   7 |     /**
   8 |      * 获取token
   9 |      *
  10 |      * @param
  11 |      * @param param
  12 |      * @return
  13 |      */
  14 |     String creatToken(TokenParam param);
  15 | 
  16 |     /**
  17 |      * 校验token
  18 |      * @param token
  19 |      * @return
  20 |      */
  21 |     Boolean verifyToken(String token);
  22 | 
  23 |     /**
  24 |      * 保存用户信息
  25 |      * @param token
  26 |      */
  27 |     void saveUser(String token);
  28 | 
  29 | }



// ====== FILE: ./src/main/java/com/astro/service/impl/LogImpl.java ======

   1 | package com.astro.service.impl;
   2 | 
   3 | import cn.hutool.core.util.StrUtil;
   4 | import com.astro.controller.MintController;
   5 | import com.astro.mapper.MintCallBackLogMapper;
   6 | import com.astro.mapper.MintPayLogMapper;
   7 | import com.astro.mapper.PayCallBackLogMapper;
   8 | import com.astro.param.MintCallBackParam;
   9 | import com.astro.param.MintPayParam;
  10 | import com.astro.param.PayCallBackParam;
  11 | import com.astro.param.request.PayCallBackRequest;
  12 | import com.astro.pojo.MintCallBackLogDo;
  13 | import com.astro.pojo.MintPayLogDo;
  14 | import com.astro.pojo.PayCallBackLogDo;
  15 | import com.astro.service.LogService;
  16 | import lombok.extern.slf4j.Slf4j;
  17 | import org.slf4j.Logger;
  18 | import org.slf4j.LoggerFactory;
  19 | import org.springframework.beans.factory.annotation.Autowired;
  20 | import org.springframework.stereotype.Service;
  21 | 
  22 | import static com.astro.constant.PayConstant.Paid_2;
  23 | import static com.astro.constant.PayConstant.Paying_1;
  24 | 
  25 | @Service
  26 | @Slf4j
  27 | public class LogImpl implements LogService {
  28 | 
  29 |     private static final Logger logger = LoggerFactory.getLogger(LogImpl.class);
  30 | 
  31 | 
  32 |     @Autowired
  33 |     MintCallBackLogMapper mintCallBackLogMapper;
  34 | 
  35 |     @Autowired
  36 |     PayCallBackLogMapper payCallBackLogMapper;
  37 | 
  38 |     @Autowired
  39 |     MintPayLogMapper mintPayLogMapper;
  40 | 
  41 |     /**
  42 |      * 储存所有调用了 mintCallBack 的入参
  43 |      * @param param
  44 |      * @return
  45 |      */
  46 |     @Override
  47 |     public Long mintCallBackLog(MintCallBackParam param) {
  48 |         MintCallBackLogDo logDo = new MintCallBackLogDo();
  49 |         long timeStampOrderId = System.currentTimeMillis();
  50 | 
  51 |         /**
  52 |          * 如果返回的订单号 id 为空使用时间戳为订单号
  53 |          */
  54 |         if (param.getOrderId() == null) {
  55 |             logDo.setOrderId(timeStampOrderId);
  56 |         } else {
  57 |             logDo.setOrderId(param.getOrderId());// 回调对应的订单
  58 |         }
  59 | 
  60 |         /**
  61 |          * 支付源字段存储时间戳和支付对应的钱包
  62 |          */
  63 |         if (StrUtil.isNotEmpty(param.getWallet())) {
  64 |             logDo.setPayOrigin("timeStampOrderId:" + timeStampOrderId +  "wallet:"+param.getWallet());// 支付时使用的钱包
  65 |         } else {
  66 |             logDo.setPayOrigin("timeStampOrderId:" + timeStampOrderId);
  67 |         }
  68 | 
  69 |         logDo.setAddress(param.getAddress());
  70 |         logDo.setTxId(param.getTxId());
  71 |         logDo.setMintAmount(param.getMintAmt());
  72 |         logDo.setPayAmount(param.getPayAmt());
  73 | 
  74 |         logDo.setPayStatus(Paid_2);
  75 |         int insert = mintCallBackLogMapper.insert(logDo);
  76 | 
  77 |         log.info("mintCallBack 日志{}", logDo);
  78 | 
  79 |         return timeStampOrderId;
  80 |     }
  81 | 
  82 |     @Override
  83 |     public Long payCallBackLog(PayCallBackRequest request, PayCallBackParam param) {
  84 | 
  85 |         PayCallBackLogDo logDo = new PayCallBackLogDo();
  86 | 
  87 |         long logId = System.currentTimeMillis();
  88 |         logDo.setOrderId(logId);// 时间戳订单
  89 |         logDo.setAddress(request.getUserUrl());// 用户付款地址
  90 |         logDo.setTxId(request.getTxId());// 交易id
  91 |         logDo.setPayAmount(param.getPayAmt());// 交易金额
  92 |         logDo.setChainPayAmount(request.getPayAmt());// 链上交易金额
  93 |         int insert = payCallBackLogMapper.insert(logDo);
  94 | 
  95 |         return logId;
  96 |     }
  97 | 
  98 |     @Override
  99 |     public void mintPayLog(MintPayParam param, Long orderId) {
 100 | 
 101 |         MintPayLogDo logDo = new MintPayLogDo();
 102 |         logDo.setOrderId(orderId);
 103 |         logDo.setAddress(param.getUserUrl());
 104 |         logDo.setMintAmount(param.getMintAmount());
 105 |         logDo.setPayStatus(Paying_1);
 106 |         mintPayLogMapper.insert(logDo);
 107 |         logger.warn("mintPayLog :{}",logDo);
 108 |     }
 109 | 
 110 | 
 111 | }



// ====== FILE: ./src/main/java/com/astro/service/impl/ImgServiceImpl.java ======

   1 | package com.astro.service.impl;
   2 | 
   3 | import cn.hutool.core.bean.BeanUtil;
   4 | import com.astro.mapper.Tax1of1NftDoMapper;
   5 | import com.astro.mapper.TaxAllNftDoMapper;
   6 | import com.astro.mapper.TaxAllNftDoMapperCopy;
   7 | import com.astro.mapper.TaxNftTxDoMapper;
   8 | import com.astro.param.CreatorParam;
   9 | import com.astro.param.ImgParam;
  10 | import com.astro.param.IpfsParam;
  11 | import com.astro.param.UpdateNftParam;
  12 | import com.astro.pojo.Tax1of1NftDo;
  13 | import com.astro.pojo.TaxAllNftDo;
  14 | import com.astro.pojo.TaxAllNftDoCopy;
  15 | import com.astro.pojo.TaxNftTx;
  16 | import com.astro.response.Response;
  17 | import com.astro.service.ImgService;
  18 | import com.astro.utils.RarityUtil;
  19 | import com.astro.vo.ImgVo;
  20 | import com.astro.vo.IpfsImgVo;
  21 | import com.astro.vo.UtxoVo;
  22 | import com.baomidou.mybatisplus.core.toolkit.IdWorker;
  23 | import com.baomidou.mybatisplus.core.toolkit.Wrappers;
  24 | import org.springframework.beans.factory.annotation.Autowired;
  25 | import org.springframework.stereotype.Service;
  26 | import org.springframework.transaction.annotation.Transactional;
  27 | 
  28 | import java.math.BigDecimal;
  29 | import java.util.ArrayList;
  30 | import java.util.List;
  31 | 
  32 | import static com.astro.constant.HttpCode.BIZ_ERROR;
  33 | import static com.astro.constant.HttpCode.MYSQL_ERROR_5001;
  34 | import static com.astro.constant.NftConstant.SOLD;
  35 | 
  36 | @Service
  37 | public class ImgServiceImpl implements ImgService {
  38 | 
  39 |     @Autowired
  40 |     TaxAllNftDoMapper nftMapper;
  41 | 
  42 |     @Autowired
  43 |     Tax1of1NftDoMapper of1NftDoMapper;
  44 | 
  45 |     @Autowired
  46 |     TaxNftTxDoMapper txDoMapper;
  47 | 
  48 |     @Autowired
  49 |     TaxAllNftDoMapperCopy txDoCopyMapper;
  50 | 
  51 |     /**
  52 |      * 通过钱包地址获取背包里的 nft 图片
  53 |      * @param param
  54 |      * @return
  55 |      */
  56 |     @Override
  57 |     public Response<List<ImgVo>> img(ImgParam param) {
  58 |         // 通过用户的钱包地址获取
  59 |         List<TaxAllNftDo> nfts = nftMapper.selectList(Wrappers.lambdaQuery(TaxAllNftDo.class)
  60 |                 .eq(TaxAllNftDo::getAddress, param.getAddress()));
  61 | 
  62 |         // 符合条件的 nft 实体列表长度为零，则当前用户还没有购买 nft
  63 |         if (nfts.size() == 0) {
  64 |             return Response.successMsg(null, "This user has not purchased nft yet");
  65 |         }
  66 | 
  67 |         // 构建视图层数据
  68 |         List<ImgVo> vos = new ArrayList<>();
  69 | 
  70 |         // 转字段
  71 |         for (TaxAllNftDo nft : nfts) {
  72 |             // 只保留两个字段并赋值给vo
  73 |             ImgVo vo = new ImgVo();
  74 |             BeanUtil.copyProperties(nft, vo, "imgUrl", "name");
  75 |             vos.add(vo);
  76 |         }
  77 |         return Response.success(vos);
  78 |     }
  79 | 
  80 |     /**
  81 |      * 通过钱包地址获取当前用户拥有的 nft 在 ipfs 上的链接
  82 |      * @param param
  83 |      * @return
  84 |      */
  85 |     @Override
  86 |     public Response<List<IpfsImgVo>> ipfsImg(ImgParam param) {
  87 |         // 通过用户的钱包地址获取 nft 信息
  88 | 
  89 |         List<IpfsImgVo> vos = nftMapper.getNftList(param.getAddress());
  90 | 
  91 |         // 符合条件的 nft 实体列表长度为零，则当前用户还没有购买 nft
  92 |         if (vos.size() == 0) {
  93 |             return Response.successMsg(null, "This user has not purchased nft yet");
  94 |         }
  95 | 
  96 | 
  97 |         for (IpfsImgVo vo : vos) {
  98 |             Integer nftId = vo.getNftId();
  99 |             String ossUrl = getEndpointUrlByNum(nftId);
 100 |             vo.setIpfsUrl(ossUrl);
 101 |         }
 102 | 
 103 |         return Response.success(vos);
 104 |     }
 105 | 
 106 |     /**
 107 |      * 通过编号获取 nft 带域名的 url
 108 |      * @param num
 109 |      * @return
 110 |      */
 111 |     @Override
 112 |     public String getEndpointUrlByNum(Integer num) {
 113 |         // 将数字转为字符串
 114 |         String numStr = num.toString();
 115 | 
 116 |         // 带域名的 url
 117 |         // https://pic.astrosea.io/mint/PowerDoge #xxx.png
 118 |         String urlStr = "https://pic.astrosea.io/nft/images/PowerDoge%20%23"+ numStr +".png";
 119 | 
 120 |         // urlStr
 121 | //        String urlStr = "www.astrosea.io/nft/PowerDog #"+ numStr +".png ";
 122 | 
 123 |         return urlStr;
 124 |     }
 125 | 
 126 |     /**
 127 |      * 1.更新缴税状态、nftUtxo、nft 归属人钱包地址
 128 |      *
 129 |      * 2.储存 nft 变动信息
 130 |      * @param param
 131 |      * @return
 132 |      */
 133 |     @Transactional
 134 |     @Override
 135 |     public Response update(UpdateNftParam param) {
 136 | 
 137 |         int update = 0;
 138 |         if (RarityUtil.isLV1(param.getNftId())) {
 139 |             // 更新稀有库的缴税状态、nftUtxo、nft 归属人钱包地址
 140 |             update = of1NftDoMapper.update(null, Wrappers.lambdaUpdate(Tax1of1NftDo.class)
 141 |                     .eq(Tax1of1NftDo::getNftId, param.getNftId())
 142 |                     .set(Tax1of1NftDo::getTaxStatus, param.getTaxStatus())
 143 |                     .set(Tax1of1NftDo::getNftUtxo, param.getNftUtxo())
 144 |                     .set(Tax1of1NftDo::getAddress, param.getOwnerAddress()));
 145 |         } else {
 146 |             // 更新缴税状态、nftUtxo、nft 归属人钱包地址
 147 |             update = nftMapper.update(null, Wrappers.lambdaUpdate(TaxAllNftDo.class)
 148 |                     .eq(TaxAllNftDo::getNftId, param.getNftId())
 149 |                     .set(TaxAllNftDo::getTaxStatus, param.getTaxStatus())
 150 |                     .set(TaxAllNftDo::getNftUtxo, param.getNftUtxo())
 151 |                     .set(TaxAllNftDo::getAddress, param.getOwnerAddress()));
 152 |         }
 153 | 
 154 | 
 155 |         // 储存 nft 变动信息
 156 |         TaxNftTx nftTx = createNftTx(param.getNftId(), param.getTaxStatus(), param.getOwnerAddress(), param.getTxAmt());
 157 |         int insert = txDoMapper.insert(nftTx);
 158 | 
 159 |         if (update == 0 || insert == 0) {
 160 |             return Response.error(MYSQL_ERROR_5001, "nft 信息更新失败");
 161 |         }
 162 | 
 163 |         return Response.success();
 164 |     }
 165 | 
 166 | 
 167 | 
 168 |     public TaxNftTx createNftTx(Integer nftId, Integer taxStatus, String address, String txAmt) {
 169 |         TaxNftTx taxNftTx = new TaxNftTx();
 170 | 
 171 |         Long orderId = IdWorker.getId();
 172 |         taxNftTx.setOrderId(orderId);
 173 |         taxNftTx.setNftId(nftId);
 174 |         taxNftTx.setTaxStatus(taxStatus);
 175 |         taxNftTx.setAddress(address);
 176 | 
 177 |         return taxNftTx;
 178 |     }
 179 |     @Override
 180 |     public Response<Boolean> creator(CreatorParam param) {
 181 |         int updRes = 0;
 182 | 
 183 |         // 将链上数据进行插入
 184 |         if (RarityUtil.isLV1(param.getNftId())) {
 185 |             // 稀有 nft lv1 入库
 186 |             // 若 nftId 包含在稀有 nft 常量数组里头
 187 |             updRes = of1NftDoMapper.update(null , Wrappers.lambdaUpdate(Tax1of1NftDo.class)
 188 |                     .set(Tax1of1NftDo::getNftUtxo, param.getNftUtxo())
 189 |                     .set(Tax1of1NftDo::getAddress, param.getAddress())
 190 |                     .set(Tax1of1NftDo::getGtId, param.getGtId())
 191 |                     .eq(Tax1of1NftDo::getNftId, param.getNftId()));
 192 |         } else {
 193 |             // lv2～lv6 nft 入库
 194 |             updRes = nftMapper.update(null , Wrappers.lambdaUpdate(TaxAllNftDo.class)
 195 |                     .set(TaxAllNftDo::getNftUtxo, param.getNftUtxo())
 196 |                     .set(TaxAllNftDo::getAddress, param.getAddress())
 197 |                     .set(TaxAllNftDo::getGtId, param.getGtId())
 198 |                     .eq(TaxAllNftDo::getNftId, param.getNftId()));
 199 |         }
 200 | 
 201 |         if (updRes == 0) {
 202 |             return Response.error(MYSQL_ERROR_5001, "nft insert failed");
 203 |         }
 204 | 
 205 |         return Response.success(updRes > 0);
 206 |     }
 207 | 
 208 |     @Override
 209 |     public Response ipfsInput(IpfsParam param) {
 210 |         //  构建
 211 |         int ipfsRes = 0;
 212 | 
 213 |         // ipfs 入库
 214 |         if (RarityUtil.isLV1(param.getNftId())) {
 215 |             // 稀有 nft lv6 入库
 216 |             // 若 nftId 包含在稀有 nft 常量数组里头
 217 |             ipfsRes = of1NftDoMapper.update(null, Wrappers.lambdaUpdate(Tax1of1NftDo.class)
 218 |                     .eq(Tax1of1NftDo::getNftId, param.getNftId())
 219 |                     .set(Tax1of1NftDo::getIpfsUrl, param.getIpfsUrl()));
 220 | 
 221 |         } else {
 222 |             // lv1～lv5 nft 入库
 223 |             ipfsRes = nftMapper.update(null, Wrappers.lambdaUpdate(TaxAllNftDo.class)
 224 |                     .eq(TaxAllNftDo::getNftId, param.getNftId())
 225 |                     .set(TaxAllNftDo::getIpfsUrl, param.getIpfsUrl()));
 226 |         }
 227 | 
 228 |         // 入库失败
 229 |         if (ipfsRes == 0) {
 230 |             return Response.error(BIZ_ERROR, "ipfs insert fail");
 231 |         }
 232 | 
 233 |         return Response.success();
 234 |     }
 235 | 
 236 |     @Override
 237 |     public Response<List<UtxoVo>> allUtxo() {
 238 |         //
 239 |         List<UtxoVo> utxoVos = new ArrayList<>();
 240 | 
 241 |         List<TaxAllNftDo> taxAllNftDos = nftMapper.selectList(Wrappers.lambdaQuery(TaxAllNftDo.class)
 242 |                 .select(TaxAllNftDo::getNftId, TaxAllNftDo::getNftUtxo, TaxAllNftDo::getGtId, TaxAllNftDo::getAddress) );
 243 |         List<UtxoVo> commentNfts = BeanUtil.copyToList(taxAllNftDos, UtxoVo.class);
 244 | 
 245 | 
 246 |         List<Tax1of1NftDo> of1NftDos = of1NftDoMapper.selectList(Wrappers.lambdaQuery(Tax1of1NftDo.class)
 247 |                 .select(Tax1of1NftDo::getNftId, Tax1of1NftDo::getNftUtxo, Tax1of1NftDo::getGtId, Tax1of1NftDo::getAddress));
 248 |         List<UtxoVo> rareNfts = BeanUtil.copyToList(of1NftDos, UtxoVo.class);
 249 | 
 250 |         utxoVos.addAll(commentNfts);
 251 |         utxoVos.addAll(rareNfts);
 252 | 
 253 |         return Response.success(utxoVos);
 254 |     }
 255 | 
 256 |     @Override
 257 |     public Response<List<UtxoVo>> allNftInitData() {
 258 |         //
 259 |         List<UtxoVo> utxoVos = new ArrayList<>();
 260 | 
 261 |         //
 262 |         List<TaxAllNftDoCopy> taxAllNftDos = txDoCopyMapper.selectList(Wrappers.lambdaQuery(TaxAllNftDoCopy.class)
 263 |                 .select(TaxAllNftDoCopy::getNftId, TaxAllNftDoCopy::getNftUtxo, TaxAllNftDoCopy::getGtId, TaxAllNftDoCopy::getAddress) );
 264 |         List<UtxoVo> commentNfts = BeanUtil.copyToList(taxAllNftDos, UtxoVo.class);
 265 | 
 266 |         List<Tax1of1NftDo> of1NftDos = of1NftDoMapper.selectList(Wrappers.lambdaQuery(Tax1of1NftDo.class)
 267 |                 .select(Tax1of1NftDo::getNftId, Tax1of1NftDo::getNftUtxo, Tax1of1NftDo::getGtId, Tax1of1NftDo::getAddress));
 268 |         List<UtxoVo> rareNfts = BeanUtil.copyToList(of1NftDos, UtxoVo.class);
 269 | 
 270 |         utxoVos.addAll(commentNfts);
 271 |         utxoVos.addAll(rareNfts);
 272 | 
 273 |         return Response.success(utxoVos);
 274 |     }
 275 | 
 276 | }



// ====== FILE: ./src/main/java/com/astro/service/impl/MintServiceImpl.java ======

   1 | package com.astro.service.impl;
   2 | 
   3 | import cn.hutool.core.bean.BeanUtil;
   4 | import cn.hutool.core.util.StrUtil;
   5 | import cn.hutool.http.HttpResponse;
   6 | import cn.hutool.http.HttpUtil;
   7 | import cn.hutool.json.JSONObject;
   8 | import cn.hutool.json.JSONUtil;
   9 | import com.astro.constant.HttpCode;
  10 | import com.astro.mapper.*;
  11 | import com.astro.param.*;
  12 | import com.astro.pojo.*;
  13 | import com.astro.response.Response;
  14 | 
  15 | import com.astro.service.MintService;
  16 | import com.astro.utils.InviteCodeUtil;
  17 | import com.astro.utils.RanNumUtil;
  18 | import com.astro.utils.RarityUtil;
  19 | import com.astro.utils.SHA256Util;
  20 | import com.astro.vo.InviteCodeVo;
  21 | import com.astro.vo.MintPayVo;
  22 | import com.astro.vo.MintQueryVo;
  23 | import com.astro.vo.dto.NftResenderDto;
  24 | import com.astro.vo.result.EachPalRes;
  25 | import com.astro.vo.result.SenderRes;
  26 | import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
  27 | import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
  28 | import com.baomidou.mybatisplus.core.toolkit.IdWorker;
  29 | import lombok.extern.slf4j.Slf4j;
  30 | import org.springframework.beans.factory.annotation.Autowired;
  31 | import org.springframework.beans.factory.annotation.Qualifier;
  32 | import org.springframework.stereotype.Service;
  33 | import com.baomidou.mybatisplus.core.toolkit.Wrappers;
  34 | import org.springframework.transaction.annotation.Transactional;
  35 | 
  36 | import java.math.BigDecimal;
  37 | import java.sql.SQLException;
  38 | import java.time.*;
  39 | import java.util.ArrayList;
  40 | import java.util.List;
  41 | import java.util.concurrent.ExecutorService;
  42 | 
  43 | import static com.astro.constant.HttpCode.*;
  44 | import static com.astro.constant.NftConstant.SOLD;
  45 | import static com.astro.constant.PayConstant.*;
  46 | import static com.astro.constant.ShareConstant.SHARED_1;
  47 | import static com.astro.constant.TimeConstant.*;
  48 | import static java.math.BigDecimal.*;
  49 | 
  50 | 
  51 | @Service
  52 | @Slf4j
  53 | public class MintServiceImpl implements MintService {
  54 | 
  55 |     @Autowired
  56 |     AstroOgListDoMapper astroOgListDoMapper;
  57 | 
  58 |     @Autowired
  59 |     AstroWlListDoMapper astroWlListDoMapper;
  60 | 
  61 |     @Autowired
  62 |     AstroOgPayLogDoMapper ogPayLogDoMapper;
  63 | 
  64 |     @Autowired
  65 |     AstroWlPayLogDoMapper wlPayLogDoMapper;
  66 | 
  67 |     @Autowired
  68 |     AstroPubPayLogDoMapper pubPayLogDoMapper;
  69 | 
  70 |     @Autowired
  71 |     AstroAllPayLogDoMapper allPayLogDoMapper;
  72 | 
  73 |     @Autowired
  74 |     AstroOrderDoMapper orderDoMapper;
  75 |     
  76 |     @Autowired
  77 |     InviteCodeMapper inviteCodeMapper;
  78 | 
  79 |     @Autowired
  80 |     TaxAllNftDoMapper nftMapper;
  81 | 
  82 |     @Autowired
  83 |     Tax1of1NftDoMapper of1NftDoMapper;
  84 | 
  85 |     @Autowired
  86 |     AstroResenderMapper resenderOrderMapper;
  87 | 
  88 |     @Autowired
  89 |     MintCallBackLogMapper mintCallBackLogMapper;
  90 | 
  91 | 
  92 |     @Autowired
  93 |     @Qualifier(value = "queryProdPool")
  94 |     private ExecutorService queryProdPool;
  95 | 
  96 |     /**
  97 |      * 只是查，不做更改不用加锁
  98 |      * @param param
  99 |      * @return
 100 |      */
 101 |     @Override
 102 |     public Response<MintQueryVo> mintQuery(MintQueryParam param) {
 103 | 
 104 |         Response<MintQueryVo> response = new Response<>();
 105 |         try {
 106 | 
 107 |             //获取当前的 userUrl
 108 |             String userUrl = param.getUserUrl();
 109 |             if (StrUtil.isEmpty(userUrl)) {
 110 |                 return Response.error(1000, "User wallet address is empty");
 111 |             }
 112 | 
 113 |             //判断时间
 114 |             switch (timeJudger()) {
 115 |                 case OG_TIME:
 116 |                     // 执行代码块1
 117 |                     response = ogQuery(param);
 118 |                     break;
 119 |                 case WL_TIME:
 120 |                     // 执行代码块2
 121 |                     response = wlQuery(param);
 122 |                     break;
 123 |                 case PUB_TIME:
 124 |                     // 执行代码块3
 125 |                     response = pubQuery(param);
 126 |                     break;
 127 |                     // 可以有更多的case语句
 128 |                 default:
 129 |                     log.info("It's not mint time yet.");
 130 |                     MintQueryVo vo = new MintQueryVo();
 131 |                     vo.setMintAmount(0);
 132 |                     return response = Response.successMsg(vo, "It's not mint time yet.");
 133 |                     // 如果expression的值与任何case不匹配，则执行默认的代码块
 134 |             }
 135 | 
 136 |         } catch (Exception e) {
 137 |             response = Response.error(BIZ_ERROR, "mintQuery error");
 138 |         }
 139 |         return response;
 140 |     }
 141 | 
 142 |     /**
 143 |      * 1.检测有无 og 权益，无则返回0
 144 |      * 2.有则查询支付记录库
 145 |      * @param param
 146 |      * @return
 147 |      */
 148 |     public Response<MintQueryVo> ogQuery(MintQueryParam param) {
 149 |         //获取当前的 userUrl
 150 |         String address = param.getUserUrl();
 151 |         if (StrUtil.isEmpty(address)) {
 152 |             return Response.error(BAD_REQUEST_4000, "User wallet address is empty");
 153 |         }
 154 | 
 155 |         MintQueryVo res = new MintQueryVo();
 156 | 
 157 |         AstroOgListDo ogDo = astroOgListDoMapper
 158 |                 .selectOne(Wrappers.lambdaQuery(AstroOgListDo.class)
 159 |                         .eq(StrUtil.isNotEmpty(address), AstroOgListDo::getUserUrl, address));
 160 |         /**
 161 |          * 1.检测有无 og 权益，无则返回 0
 162 |          */
 163 |         if (ogDo == null) {
 164 |             // 不是 og
 165 |             log.info("This user is not og");
 166 |             res.setMintAmount(0);
 167 |             return Response.successMsg(res, "This user is not og");
 168 |         }
 169 | 
 170 |         /**
 171 |          * 2.有则查询支付记录库
 172 |          */
 173 |         String msg = "";
 174 |         if (ogDo.getIsUsed() == 0 ) {
 175 |             // 是 og 且 权益没有用完， og 只有一次购买机会
 176 |             res.setMintAmount(VIP_AMT_1);
 177 |             msg = "og and have can mint 1";
 178 |         } else if (ogDo.getIsUsed() == 1){
 179 |             log.info("og Rights and benefits have been utilized");
 180 |             res.setMintAmount(0);
 181 |             msg = "og Rights and benefits have been utilized";
 182 |         }
 183 | 
 184 |         return Response.successMsg(res, msg);
 185 |     }
 186 | 
 187 |     public Response<MintQueryVo> wlQuery(MintQueryParam param) {
 188 |         //获取当前的 userUrl
 189 |         String address = param.getUserUrl();
 190 |         if (StrUtil.isEmpty(address)) {
 191 |             return Response.error(BAD_REQUEST_4000, "User wallet address is empty");
 192 |         }
 193 | 
 194 | 
 195 |         MintQueryVo res = new MintQueryVo();
 196 | 
 197 |         AstroWlListDo wlDo = astroWlListDoMapper
 198 |                 .selectOne(Wrappers.lambdaQuery(AstroWlListDo.class)
 199 |                         .eq(StrUtil.isNotEmpty(address), AstroWlListDo::getUserUrl, address));
 200 |         /**
 201 |          * 1.检测有无 wl 权益，无则返回 0
 202 |          */
 203 |         if (wlDo == null) {
 204 |             // 不是 wl
 205 |             log.info("This user is not wl");
 206 |             res.setMintAmount(0);
 207 |             return Response.successMsg(res, "This user is not wl");
 208 |         }
 209 | 
 210 |         /**
 211 |          * 2.有则查询支付记录库
 212 |          */
 213 |         String msg = "";
 214 |         if (wlDo.getIsUsed() == 0 ) {
 215 |             // 是 wl 且 权益没有用完， wl 只有一次购买机会
 216 |             res.setMintAmount(VIP_AMT_1);
 217 |             msg = "wl and have can mint 1";
 218 |         } else if (wlDo.getIsUsed() == 1){
 219 |             log.info("wl Rights and benefits have been utilized");
 220 |             res.setMintAmount(0);
 221 |             msg = "wl Rights and benefits have been utilized";
 222 |         }
 223 | 
 224 |         return Response.successMsg(res, msg);
 225 |     }
 226 | 
 227 |     /**
 228 |      * 查询公售可以购买的次数
 229 |      * 1.查看先前有无公共售卖权益，无则初始化，并直接返回 10 次
 230 |      * 2.有则计算还剩几次
 231 |      *
 232 |      * @param param
 233 |      * @return
 234 |      */
 235 |     public Response<MintQueryVo> pubQuery(MintQueryParam param) throws SQLException {
 236 |         //获取当前的 userUrl
 237 |         String address  = param.getUserUrl();
 238 |         if (StrUtil.isEmpty(address)) {
 239 |             return Response.error(BAD_REQUEST_4000, "User wallet address is empty");
 240 |         }
 241 | 
 242 |         MintQueryVo res = new MintQueryVo();
 243 | 
 244 |         // public 公售阶段 , 10 次公售 mint 机会
 245 |         AstroPubPayLogDo pulDo = pubPayLogDoMapper
 246 |                 .selectOne(Wrappers.lambdaQuery(AstroPubPayLogDo.class)
 247 |                         .eq(StrUtil.isNotEmpty(param.getUserUrl()), AstroPubPayLogDo::getUserUrl, address)
 248 |                         .select(AstroPubPayLogDo::getMintAmount));
 249 | 
 250 |         /**
 251 |          * 之前没有公售购买过，初始化公售数据
 252 |          */
 253 |         if (pulDo == null) {
 254 |             res.setMintAmount(PUB_MINT_10);
 255 | 
 256 |             pulDo = new AstroPubPayLogDo();
 257 |             pulDo.setUserUrl(address);
 258 |             pulDo.setMintAmount(PUB_MINT_INIT_0);// 初始数据肯定为 0
 259 |             int insert = pubPayLogDoMapper.insert(pulDo);// 初始化公售购买数据
 260 |             if (insert == 0) {
 261 |                 throw new SQLException();
 262 |             }
 263 | 
 264 |             return Response.success(res);
 265 |         }
 266 | 
 267 |         /**
 268 |          * 之前公售过则，计算当前剩下的 mint 次数
 269 |          */
 270 |         int pubHadMint = pulDo.getMintAmount();// 已经 mint 次数
 271 |         int curMint = 0;// 当前可以 mint 的次数
 272 |         String msg = "";
 273 | 
 274 |         if (pubHadMint < PUB_MINT_10) {
 275 |             curMint = PUB_MINT_10 - pubHadMint;
 276 |             res.setMintAmount(curMint);
 277 |             msg = "The public rights didn't run out.";
 278 |         }else if (pubHadMint >= PUB_MINT_10){
 279 |             log.info("pub 权益已经使用完毕");
 280 |             res.setMintAmount(0);
 281 |             msg = "pub rights and benefits have been utilized";
 282 |         }
 283 | 
 284 |         return Response.successMsg(res, msg);
 285 |     }
 286 | 
 287 | 
 288 |     @Override
 289 |     public Response<MintPayVo> pay(MintPayParam param) {
 290 |         //获取当前的 userUrl
 291 |         String userUrl = param.getUserUrl();
 292 |         if (StrUtil.isEmpty(userUrl)) {
 293 |             return Response.error(BAD_REQUEST_4000, "User wallet address is empty");
 294 |         }
 295 |         Response<MintPayVo> response = new Response<>();
 296 |         switch (timeJudger()) {
 297 |             case OG_TIME:
 298 |                 // 执行代码块 og
 299 |                 response = ogMintHandler(param);
 300 |                 break;
 301 |             case WL_TIME:
 302 |                 // 执行代码块 wl
 303 |                 response = wlMintHandler(param);
 304 |                 break;
 305 |             case PUB_TIME:
 306 |                 // 执行代码块 pub
 307 |                 response = pubMintHandler(param);
 308 |                 break;
 309 |             // 可以有更多的case语句
 310 |             default:
 311 |                 log.info("It's not mint time yet.");
 312 | 
 313 |                 // 给错误响应塞 data
 314 |                 MintPayVo vo = new MintPayVo();
 315 |                 vo.setPayAmount(new BigDecimal(0.0));
 316 |                 vo.setCurMintAmount(0);
 317 |                 response.setData(vo);
 318 |                 response = Response.successMsg(vo, "It's not mint time yet.");
 319 |                 // 如果expression的值与任何case不匹配，则执行默认的代码块
 320 |         }
 321 |         return response;
 322 |     }
 323 |     @Transactional
 324 |     @Override
 325 |     public Response<MintPayVo> ogMintHandler(MintPayParam param) {
 326 |         MintPayVo vo = new MintPayVo();
 327 | 
 328 |         // 用户地址
 329 |         String  address = param.getUserUrl();
 330 |         // 用户想要 mint 的数量
 331 |         Integer amount = param.getMintAmount();
 332 | 
 333 |         if (StrUtil.isEmpty(address)) {
 334 |             vo.setCurMintAmount(0);
 335 |             vo.setPayAmount(ZERO);
 336 |             vo.setOrderId("-1");
 337 |             return Response.successMsg(vo, "wallet address is not allowed to be empty");
 338 |         } else if (amount == 0) {
 339 |             vo.setCurMintAmount(0);
 340 |             vo.setPayAmount(ZERO);
 341 |             vo.setOrderId("-1");
 342 |             return Response.successMsg(vo, "purchase quantity cannot be 0");
 343 |         } else if (amount > 1) {
 344 |             vo.setCurMintAmount(0);
 345 |             vo.setPayAmount(ZERO);
 346 |             vo.setOrderId("-1");
 347 |             return Response.successMsg(vo, "og mint times up to 1");
 348 |         }
 349 | 
 350 |         /**
 351 |          *  1.根据用户输入的 mint 次数校验 mint 次数的合法性
 352 |          */
 353 |         Integer curMintAmount = 0;
 354 |         AstroOgListDo ogDo = astroOgListDoMapper.selectOne(Wrappers.lambdaQuery(AstroOgListDo.class)
 355 |                 .eq(AstroOgListDo::getUserUrl, address));
 356 |         if (ogDo == null) {
 357 |             log.info("该用户不是 og");
 358 |             vo.setCurMintAmount(0);
 359 |             vo.setPayAmount(ZERO);
 360 |             vo.setOrderId("-1");
 361 |             return Response.successMsg(vo, "you are not a og and can mint in the subsequent public sale phase");
 362 |         }
 363 |         if (ogDo.getIsUsed() == 1) {
 364 |             log.info("该用户的 og 权益正在使用或已使用完");
 365 |             vo.setCurMintAmount(0);
 366 |             vo.setPayAmount(ZERO);
 367 |             vo.setOrderId("-1");
 368 |             return Response.successMsg(vo, "your og rights and benefits are being used or have been used up");
 369 |         }
 370 | 
 371 |         /**
 372 |          * 既是 og 并且权益未使用完，那么当前允许的 mint 次数为 1
 373 |          */
 374 |         curMintAmount = 1;
 375 | 
 376 |         /**
 377 |          * 2.根据用户输入的 mint 次数计算 mint 需要支付的金额并初始化 og 付款数据
 378 |          */
 379 |         BigDecimal cost = OG_COST_500.multiply(valueOf(amount));
 380 | 
 381 | 
 382 |         /**
 383 |          * 3.生成订单数据，创建一个订单，并将订单 id 传给前端，但还未拿到在链上的交易 id
 384 |          * Long creatOrder(String address , BigDecimal cost , Integer mintAmt, Integer style, Integer status)
 385 |          */
 386 |         Long orderId = creatOrder(address, cost, amount, OG_PAY, Paying_1);
 387 |         if (orderId == null || orderId <= 0) {
 388 |             return Response.error(MYSQL_ERROR_5001, "Failed to create order");
 389 |         }
 390 | 
 391 |         // 结果返回最后确认
 392 |         if (cost.compareTo(BigDecimal.ZERO) < 0) {
 393 |             log.info("OG 支付数据计算异常, 支付金额小于 0:{}", cost);
 394 |             return Response.error(INNER_ERROR_5000, "Internal system anomalies");
 395 |         } else if (curMintAmount < 0) {
 396 |             log.info("OG 支付数据计算异常, 购买数量小于0:{}", cost);
 397 |             return Response.error(INNER_ERROR_5000, "Internal system anomalies");
 398 |         }
 399 | 
 400 |         // 构建返回结果
 401 |         vo.setCurMintAmount(curMintAmount);
 402 |         vo.setPayAmount(cost);
 403 |         vo.setOrderId(String.valueOf(orderId));
 404 | 
 405 |         return Response.success(vo);
 406 |     }
 407 | 
 408 |     /**
 409 |      * 1.根据用户输入的 mint 次数校验 mint 次数的合法性
 410 |      * 2.根据用户输入的 mint 次数计算 mint 需要支付的金额并初始化 wl 数据
 411 |      * 3.生成订单数据
 412 |      * @param param
 413 |      * @return
 414 |      */
 415 |     @Transactional
 416 |     @Override
 417 |     public Response<MintPayVo> wlMintHandler(MintPayParam param) {
 418 | 
 419 |         MintPayVo vo = new MintPayVo();
 420 | 
 421 |         // 用户地址
 422 |         String  address = param.getUserUrl();
 423 |         // 用户想要 mint 的数量
 424 |         Integer amount = param.getMintAmount();
 425 | 
 426 |         if (StrUtil.isEmpty(address)) {
 427 |             vo.setCurMintAmount(0);
 428 |             vo.setPayAmount(ZERO);
 429 |             vo.setOrderId("-1");
 430 |             return Response.successMsg(vo, "wallet address is not allowed to be empty");
 431 |         }else if (amount == 0) {
 432 |             vo.setCurMintAmount(0);
 433 |             vo.setPayAmount(ZERO);
 434 |             vo.setOrderId("-1");
 435 |             return Response.successMsg(vo, "purchase quantity cannot be 0");
 436 |         } else if (amount > 1) {
 437 |             vo.setCurMintAmount(0);
 438 |             vo.setPayAmount(ZERO);
 439 |             vo.setOrderId("-1");
 440 |             return Response.successMsg(vo, "wl mint times up to 1");
 441 |         }
 442 | 
 443 |         /**
 444 |          *  1.根据用户输入的 mint 次数校验 mint 次数的合法性
 445 |          */
 446 |         Integer curMintAmount = 0;
 447 |         AstroWlListDo wlDo = astroWlListDoMapper.selectOne(Wrappers.lambdaQuery(AstroWlListDo.class)
 448 |                 .eq(StrUtil.isNotEmpty(address), AstroWlListDo::getUserUrl, address));
 449 |         if (wlDo == null) {
 450 |             log.info("该用户不是 wl");
 451 |             vo.setCurMintAmount(0);
 452 |             vo.setPayAmount(ZERO);
 453 |             vo.setOrderId("-1");
 454 |             return Response.successMsg(vo, "You are not a wl and can mint in the subsequent public sale phase");
 455 |         }
 456 |         if (wlDo.getIsUsed() == 1) {
 457 |             log.info("该用户的 wl 权益正在使用或已使用完");
 458 |             vo.setCurMintAmount(0);
 459 |             vo.setPayAmount(ZERO);
 460 |             vo.setOrderId("-1");
 461 |             return Response.successMsg(vo, "your wl Rights and benefits are being used or have been used up");
 462 |         }
 463 |         /**
 464 |          * 既是 wl 且权益未使用完，那么当前允许的 mint 次数为 1
 465 |          */
 466 |         curMintAmount = 1;
 467 | 
 468 |         /**
 469 |          * 2.根据用户输入的 mint 次数计算 mint 需要支付的金额并初始化 wl 数据
 470 |          */
 471 |         BigDecimal cost = WL_COST_800.multiply(valueOf(amount));
 472 | 
 473 | 
 474 |         /**
 475 |          * 3.生成订单数据，创建一个订单，并将订单 id 传给前端，但还未拿到在链上的交易 id
 476 |          * Long creatOrder(String address , BigDecimal cost , Integer mintAmt, Integer style, Integer status)
 477 |          */
 478 |         Long orderId = creatOrder(address, cost, amount, WL_PAY, Paying_1);
 479 |         if (orderId == null || orderId <= 0) {
 480 |             return Response.error(MYSQL_ERROR_5001, "Failed to create order");
 481 |         }
 482 | 
 483 |         // 结果返回最后确认
 484 |         if (cost.compareTo(BigDecimal.ZERO) < 0) {
 485 |             log.info("WL 支付数据计算异常, 支付金额小于 0:{}", cost);
 486 |             return Response.error(HttpCode.INNER_ERROR_5000, "Internal system anomalies");
 487 |         } else if (curMintAmount < 0) {
 488 |             log.info("WL 支付数据计算异常, 购买数量小于0:{}", cost);
 489 |             return Response.error(HttpCode.INNER_ERROR_5000, "Internal system anomalies");
 490 |         }
 491 | 
 492 |         // 构建返回结果
 493 |         vo.setCurMintAmount(curMintAmount);
 494 |         vo.setPayAmount(cost);
 495 |         vo.setOrderId(String.valueOf(orderId));
 496 | 
 497 |         return Response.success(vo);
 498 |     }
 499 | 
 500 |     /**
 501 |      * 1.根据用户输入的 mint 次数校验 mint 次数的合法性
 502 |      * 2.根据用户输入的 mint 次数计算 mint 需要支付的金额并初始化公售数据
 503 |      * 3.生成订单数据
 504 |      * @param param
 505 |      * @return
 506 |      */
 507 |     @Transactional
 508 |     @Override
 509 |     public Response<MintPayVo> pubMintHandler(MintPayParam param) {
 510 |         MintPayVo vo = new MintPayVo();
 511 | 
 512 |         // 用户地址
 513 |         String  address = param.getUserUrl();
 514 |         // 用户想要 mint 的数量
 515 |         Integer amount = param.getMintAmount();
 516 | 
 517 |         if (StrUtil.isEmpty(address)) {
 518 |             vo.setCurMintAmount(0);
 519 |             vo.setPayAmount(null);
 520 |             vo.setOrderId("-1");
 521 |             return Response.successMsg(vo, "wallet address is not allowed to be empty");
 522 |         }else if (amount == 0) {
 523 |             vo.setCurMintAmount(0);
 524 |             vo.setPayAmount(null);
 525 |             vo.setOrderId("-1");
 526 |             return Response.successMsg(vo, "purchase quantity cannot be 0");
 527 |         } else if (amount > 10) {
 528 |             vo.setCurMintAmount(0);
 529 |             vo.setPayAmount(null);
 530 |             vo.setOrderId("-1");
 531 |             return Response.successMsg(vo, "mint times up to 10");
 532 |         }
 533 | 
 534 |         /**
 535 |          * 1.根据用户输入的 mint 次数校验 mint 次数的合法性
 536 |           */
 537 |         Integer curMintAmount = 0;// 用户当前 mint 的数量
 538 |         Integer max = maxMint(address);// 用户当前最多能 mint 的数量
 539 |         if (amount > max) {
 540 |             curMintAmount = max;
 541 |             vo.setCurMintAmount(curMintAmount);
 542 |             vo.setPayAmount(null);
 543 |             vo.setOrderId(null);
 544 |             return Response.successMsg(null, " Currently only mint "+ curMintAmount +" NFT are allowed ");
 545 |         } else {
 546 |             curMintAmount = amount;
 547 |         }
 548 | 
 549 |         /**
 550 |          * 2.根据用户输入的 mint 次数计算 mint 需要支付的金额并初始化公售数据为0
 551 |          */
 552 |         BigDecimal cost = PUB_COST_1000.multiply(valueOf(amount));
 553 | 
 554 |         /**
 555 |          * 3.生成订单数据，创建一个订单，并将订单 id 传给前端，但还未拿到在链上的交易 id
 556 |          * Long creatOrder(String address , BigDecimal cost , Integer mintAmt, Integer style, Integer status)
 557 |          */
 558 |         Long orderId = creatOrder(address, cost, amount, PUL_PAY, Paying_1);
 559 |         if (orderId == null || orderId <= 0) {
 560 |             return Response.error(INNER_ERROR_5000, "Failed to create order");
 561 |         }
 562 | 
 563 |         // 结果返回最后确认
 564 |         if (cost.compareTo(BigDecimal.ZERO) < 0) {
 565 |             log.info("PUB 支付数据计算异常, 支付金额小于 0:{}", cost);
 566 |             return Response.error(HttpCode.MYSQL_ERROR_5001, "PUB 繫統內部異常");
 567 |         } else if (curMintAmount < 0) {
 568 |             log.info("PUB 支付数据计算异常, 购买数量小于0:{}", cost);
 569 |             return Response.error(HttpCode.MYSQL_ERROR_5001, "PUB 繫統內部異常");
 570 |         }
 571 | 
 572 |         // 构建返回结果
 573 |         vo.setCurMintAmount(curMintAmount);
 574 |         vo.setPayAmount(cost);
 575 |         vo.setOrderId(String.valueOf(orderId));
 576 |         return Response.successMsg(vo, "mint pay success");
 577 |     }
 578 | 
 579 |     /**
 580 |      * 计算允许 mint 的数量
 581 |      * @param address
 582 |      * @return
 583 |      */
 584 |     public Integer maxMint(String address) {
 585 | 
 586 |         Integer maxMint = 0;
 587 | 
 588 | 
 589 |         Integer sold = allPayLogDoMapper.countAll();// 已经出售的数量
 590 |         if (sold == null) {
 591 |             sold = 0;
 592 |         }
 593 | 
 594 |         int unsold = MAX_1W - sold;// 当前NFT剩余数量
 595 | 
 596 |         if (unsold < 0) {
 597 |             unsold = 0;
 598 |         }
 599 | 
 600 |         // 计算个人权限能购买的数量
 601 |         Integer rightAmt = 0;
 602 |         AstroPubPayLogDo pulDo = pubPayLogDoMapper
 603 |                 .selectOne(Wrappers.lambdaQuery(AstroPubPayLogDo.class)
 604 |                         .eq(StrUtil.isNotEmpty(address), AstroPubPayLogDo::getUserUrl, address));
 605 |         if (pulDo == null) {
 606 |             rightAmt = PUB_MINT_10;
 607 |         } else {
 608 |             rightAmt = PUB_MINT_10 - pulDo.getMintAmount();
 609 |         }
 610 | 
 611 |         if (rightAmt >= unsold) {// 若权益大于未出售数量，则最大 mint 数量为未售卖数量
 612 |             maxMint = unsold;
 613 |         } else {// 若权益小于等于未出售数量，则最大 mint 数量为权益数量
 614 |             maxMint = rightAmt;
 615 |         }
 616 | 
 617 |         if (maxMint < 0 || maxMint > PUB_MINT_10) {
 618 |             maxMint = 0;
 619 |         }
 620 | 
 621 |         return maxMint;
 622 |     }
 623 | 
 624 | 
 625 | 
 626 |     @Override
 627 |     public String timeJudger() {
 628 |         // 获取当前时间
 629 |         ZonedDateTime curTime = ZonedDateTime.now();
 630 | 
 631 |         if (curTime.isAfter(OG_BEGIN) && curTime.isBefore(OG_END)) {
 632 |             return OG_TIME; // 如果在OG_BEGIN和OG_END之间，则返回OG
 633 |         } else if (curTime.isAfter(WL_BEGIN) && curTime.isBefore(WL_END)) {
 634 |             return WL_TIME; // 如果在WL_BEGIN和WL_END之间，则返回WL
 635 |         } else if (curTime.isAfter(PUB_BEGIN)) {
 636 |             return PUB_TIME; // 如果在PUB_BEGIN之后，则返回PUB
 637 |         } else {
 638 |             return ""; // 其他情况返回空字符串
 639 |         }
 640 |     }
 641 | 
 642 | 
 643 | 
 644 |     @Override
 645 |     public Long creatOrder(String address , BigDecimal cost , Integer mintAmt, Integer style, Integer status) {
 646 |         AstroOrderDo orderDo = new AstroOrderDo();
 647 |         Long orderId = IdWorker.getId();// 生成订单id，并返回给前端
 648 | 
 649 |         orderDo.setUserUrl(address);// 订单的用户地址
 650 |         orderDo.setPayAmount(cost);// 订单的金额
 651 |         orderDo.setMintAmount(mintAmt);// 订单 mint 的数量
 652 |         orderDo.setStyle(style);// 设置支付身份
 653 |         orderDo.setPayStatus(status);// 设置支付状态
 654 |         orderDo.setOrderId(orderId);// 设置订单号
 655 | 
 656 |         int insert = orderDoMapper.insert(orderDo);
 657 |         if (insert == 0) {
 658 |             log.info("Order creation failed, please try again");
 659 |             orderId = -1L;
 660 |             return orderId;
 661 |         }
 662 | 
 663 |         log.info("订单信息 {}", orderDo);
 664 |         return orderId;
 665 |     }
 666 | 
 667 |     /**
 668 |      * 1.先判断订单号是否合法、订单响应状态是否成功
 669 |      * 2.将根据回调数据中的订单号将订单中的 mint 数据数据处理为已支付
 670 |      * 3.各自的名额数量更新
 671 |      * 4.总表数量更新
 672 |      * @param param
 673 |      * @return
 674 |      */
 675 |     @Transactional
 676 |     @Override
 677 |     public Response mintCallBack(MintCallBackParam param) {
 678 |         log.info("mintCallBack 回调 :"+param.getOrderId()+",{}:", param.getPayStatus());
 679 |         String msg = "";
 680 | 
 681 | 
 682 | 
 683 |         /**
 684 |          * mint 回调的判空和支付失败处理逻辑
 685 |          */
 686 |         if (param.getOrderId() == -1L) {
 687 |             AstroOrderDo orderDo = new AstroOrderDo();
 688 |             orderDo.setUserUrl("error");
 689 |             orderDo.setMintAmount(-1);
 690 |             orderDo.setPayAmount(ZERO);
 691 |             orderDo.setOrderId(-1000L);
 692 |             orderDo.setPayStatus(-10);
 693 |             orderDo.setTxId(msg);
 694 |             int insert = orderDoMapper.insert(orderDo);
 695 |             return Response.error(BIZ_ERROR, msg);
 696 |         } else if (param.getOrderId() == null || param.getTxId() == null || param.getPayStatus() == null){
 697 |             if (param.getOrderId() == null) {
 698 |                 msg = msg + "orderId can not be null,";
 699 |             }
 700 |             if (param.getTxId() == null) {
 701 |                 msg = msg + "txId can not be null,";
 702 |             }
 703 |             if (param.getPayStatus() == null) {
 704 |                 msg = msg + "pauStatus can not be null";
 705 |             }
 706 |             AstroOrderDo orderDo = new AstroOrderDo();
 707 |             orderDo.setUserUrl("error");
 708 |             orderDo.setMintAmount(-1);
 709 |             orderDo.setPayAmount(ZERO);
 710 |             orderDo.setOrderId(-1000L);
 711 |             orderDo.setPayStatus(-10);
 712 |             orderDo.setTxId(msg);
 713 |             int insert = orderDoMapper.insert(orderDo);
 714 |             return Response.error(BIZ_ERROR, msg);
 715 |         }
 716 | 
 717 |         try {
 718 |             /** 根据回调的订单号查找出唯一的订单记录
 719 |              * 1.判断对应订单号是否存在
 720 |              * 2.判断支付是否成功
 721 |              * 3.成功则判断 当前钱包地址、mint 次数、金额、状态与库存的订单是否对应
 722 |              */
 723 |             AstroOrderDo order = orderDoMapper.selectOne(Wrappers.lambdaUpdate(AstroOrderDo.class)
 724 |                     .eq(AstroOrderDo::getOrderId, param.getOrderId()));
 725 |             if (order == null) {
 726 |                 return Response.error(1001, "This order number does not exist:" + param.getOrderId());// 回调的订单不存在
 727 |             }
 728 | 
 729 |             if(!param.getPayStatus().equals("success")){
 730 |                 return Response.error(1000, "payment exceptions:" + param.getPayStatus());// 钱包支付失败
 731 |             }
 732 | 
 733 |             /**
 734 |              * 3.1查看当前 txId 对应的订单与传入的地址是否相符
 735 |              */
 736 |             if (!param.getAddress().equals(order.getUserUrl())) {
 737 |                 log.info("当前 hash 对应的订单与传入的 address 不相符");
 738 |                 return Response.error(10000, "address not match");
 739 |             }
 740 |             /**
 741 |              * 3.2查看当前 txId 对应的订单与传入金额是否相符
 742 |              */
 743 |             if (!param.getPayAmt().equals(order.getPayAmount())) {
 744 |                 log.info("当前 hash 对应的订单与传入的 payAmt 不相符");
 745 |                 return Response.error(10000, "payAmt not match");
 746 |             }
 747 |             /**
 748 |              * 3.3查看当前 txId 对应的订单与传入数量是否相符
 749 |              */
 750 |             if (!param.getMintAmt().equals(order.getMintAmount())) {
 751 |                 log.info("当前 hash 对应的订单与传入的 mintAmt 不相符");
 752 |                 return Response.error(10000, "mintAmt not match");
 753 |             }
 754 | 
 755 |             /**
 756 |              * 3.4 查看当前 txId 对应的订单与传入数量是否相符
 757 |              */
 758 |             if ((order.getPayStatus() == Paid_2)) {
 759 |                 log.info("当前 hash 对应的订单已付款");
 760 |                 return Response.error(10000, "order paid");
 761 |             }
 762 |             if ((order.getPayStatus() == Received_3)){
 763 |                 log.info("当前 hash 对应的订单付款已到账");
 764 |                 return Response.error(10000, "order recevied");
 765 |             }
 766 | 
 767 |             if (param.getPayStatus().equals("success")) {// 支付成功
 768 | 
 769 |                 /**
 770 |                  * 4.将订单改为已支付
 771 |                  */
 772 |                 int orderUpdate = orderDoMapper.update(null, Wrappers.lambdaUpdate(AstroOrderDo.class)
 773 |                         .eq(AstroOrderDo::getOrderId, param.getOrderId())
 774 |                         .set(AstroOrderDo::getTxId, param.getTxId())
 775 |                         .set(StrUtil.isNotEmpty(param.getPayOrigin()), AstroOrderDo::getPayOrigin, param.getPayOrigin())// 添加接口日志 id
 776 |                         .set(AstroOrderDo::getPayStatus, Paid_2));
 777 |                 log.info("订单更新执行结果 {}", orderUpdate);
 778 |                 if (orderUpdate == 0) {
 779 |                     return Response.error(INNER_ERROR_5000, "The order was successfully paid or changed to unsuccessful payment");
 780 |                 }
 781 | 
 782 |                 /**
 783 |                  * 5.各自的名额数量更新
 784 |                  * eachPayLog(String address, Integer style, Integer mintAmt)
 785 |                  */
 786 |                 EachPalRes eachPayRes = eachPayLog(order.getUserUrl(), order.getStyle(), order.getMintAmount());
 787 |                 log.info("各自的名额数量更新 : {}", eachPayRes);
 788 |                 if (!eachPayRes.getSuccess()) {
 789 |                     return Response.successMsg(eachPayRes.getMsg());
 790 |                 }
 791 | 
 792 | 
 793 |                 /**
 794 |                  * 6.在总表进行购买记录记录
 795 |                  * allPayLog(String userUrl, BigDecimal payAmt, Integer mintAmt)
 796 |                  */
 797 |                 Boolean allPayRes = allPayLog(order.getUserUrl(), order.getPayAmount(), order.getMintAmount());
 798 |                 log.info("总表进行购买记录执行结果 : {}", allPayRes);
 799 |             }
 800 | 
 801 |         } catch (Exception e) {
 802 |             return Response.error(INNER_ERROR_5000, "mintCallBack:{}" + e.toString());
 803 |         }
 804 | 
 805 |         return Response.successMsg(null, "mint callback success");
 806 |     }
 807 | 
 808 | 
 809 | 
 810 | 
 811 |     @Override
 812 |     public Response nftResender(NftResenderParam param) {
 813 | 
 814 |         NftResenderDto dto = getNftInfo(param.getNftId(), param.getAddress());
 815 | 
 816 |         String responseStr = "";
 817 |         int statusCode = 0;
 818 | 
 819 |         // 构建盐
 820 |         String json = JSONUtil.toJsonStr(dto);
 821 | 
 822 |         String salt = "CFIrxG7nDq4h2TofxTGlmm220E7UI2JBxf";
 823 |         // json 加盐
 824 |         String jsonSalt = json + salt;
 825 |         // 256 盐
 826 |         String sha = SHA256Util.encrypt(jsonSalt);
 827 |         // 构造请求体 jsonObj
 828 |         JSONObject requestBody = new JSONObject();
 829 | 
 830 |         requestBody.set("orderId", dto.getOrderId());
 831 |         requestBody.set("from", dto.getFrom());
 832 |         requestBody.set("nftUtxo", dto.getNftUtxo());
 833 |         requestBody.set("address", dto.getToAddress());
 834 |         requestBody.set("sha", sha);
 835 | 
 836 |         System.out.println("requestBody:"+requestBody);
 837 |         System.out.println("json:" + json);
 838 |         System.out.println("utxo:"+ dto.getNftUtxo());
 839 | 
 840 |         // 构造 http 请求 url
 841 |         String chainUrl = "http://94.130.49.158:3000/claim";// 线上
 842 | //            String chainUrl = "http://192.168.2.51:3000/claim";// 本地
 843 | 
 844 |         // 发送 http 请求给链上
 845 |         HttpResponse response = HttpUtil.createPost(chainUrl)
 846 |                 .body(requestBody.toString())// 请求体
 847 |                 .timeout(100000)// 设置超时时间（单位：毫秒）
 848 |                 .execute();
 849 |         System.out.println("response" + response.toString());
 850 | 
 851 |         /**
 852 |          * 根据状态码返回响应信息 msg 和 状态码 statusCode 给前端
 853 |          */
 854 |         // 打印信息
 855 |         statusCode = response.getStatus();
 856 |         log.info("statusCode:{}", statusCode);
 857 |         responseStr = response.toString();
 858 |         log.info("responseStr:{}", responseStr);
 859 | 
 860 | 
 861 |         return null;
 862 |     }
 863 | 
 864 | 
 865 |     public NftResenderDto getNftInfo(Integer nftId, String address) {
 866 | 
 867 |         NftResenderDto dto = new NftResenderDto();
 868 | 
 869 |         if (RarityUtil.isLV1(nftId)) {
 870 |             Tax1of1NftDo of1NftDo = of1NftDoMapper.selectOne(Wrappers.lambdaQuery(Tax1of1NftDo.class)
 871 |                     .select(Tax1of1NftDo::getNftUtxo, Tax1of1NftDo::getAddress)
 872 |                     .eq(Tax1of1NftDo::getAddress, address));
 873 |             dto.setNftUtxo(of1NftDo.getNftUtxo());
 874 |             dto.setFrom(of1NftDo.getAddress());
 875 |             dto.setToAddress(address);
 876 |         } else {
 877 |             TaxAllNftDo nftDo = nftMapper.selectOne(Wrappers.lambdaQuery(TaxAllNftDo.class)
 878 |                     .select(TaxAllNftDo::getNftUtxo, TaxAllNftDo::getAddress)
 879 |                     .eq(TaxAllNftDo::getAddress, address));
 880 |             dto.setNftUtxo(nftDo.getNftUtxo());
 881 |             dto.setFrom(nftDo.getAddress());
 882 |             dto.setToAddress(address);
 883 |         }
 884 | 
 885 |     return dto;
 886 |     }
 887 | 
 888 |     public Long creatResendOrder(NftResenderDto dto, Integer nftId) {
 889 | 
 890 | 
 891 |         ResenderOrderDo orderDo = new ResenderOrderDo();
 892 |         long orderId = IdWorker.getId();
 893 |         orderDo.setOrderId(orderId);
 894 |         orderDo.setNftList(nftId.toString());
 895 |         orderDo.setUtxoList(dto.getNftUtxo());
 896 | 
 897 | 
 898 | 
 899 |         resenderOrderMapper.insert(orderDo);
 900 | 
 901 |     return orderId;
 902 |     }
 903 | 
 904 |     @Override
 905 |     public EachPalRes eachPayLog(String address, Integer style, Integer mintAmt) {
 906 |         EachPalRes res = new EachPalRes();
 907 | 
 908 | 
 909 |         if (style == null || address == null || mintAmt <= 0 || mintAmt > 10) {
 910 |             log.info("eachPayLog 参数异常");
 911 |             res.setMsg("eachPayLog 参数异常"+address+style+mintAmt);
 912 |             res.setSuccess(false);
 913 |             return res;
 914 |         }
 915 | 
 916 |         int payUpdate = 0;
 917 | 
 918 |         /**
 919 |          * og 、wl
 920 |           */
 921 |         if (style == OG_PAY) {
 922 |             payUpdate = astroOgListDoMapper.update(null, Wrappers.lambdaUpdate(AstroOgListDo.class)
 923 |                     .eq(AstroOgListDo::getUserUrl, address)
 924 |                     .set(AstroOgListDo::getIsUsed, RIGHT_USED_1));
 925 |         }
 926 |         if (style == WL_PAY) {
 927 |             payUpdate = astroWlListDoMapper.update(null, Wrappers.lambdaUpdate(AstroWlListDo.class)
 928 |                     .eq(AstroWlListDo::getUserUrl, address)
 929 |                     .set(AstroWlListDo::getIsUsed, RIGHT_USED_1));
 930 |         }
 931 | 
 932 | 
 933 |         if (style == PUL_PAY) {
 934 |             // 先看之前有无公售 mint
 935 |             AstroPubPayLogDo pubDo = pubPayLogDoMapper.selectOne(Wrappers.lambdaQuery(AstroPubPayLogDo.class)
 936 |                     .eq(AstroPubPayLogDo::getUserUrl, address));
 937 | 
 938 |             if (pubDo == null) {
 939 |                 // 公售 insert
 940 |                 pubDo = new AstroPubPayLogDo();
 941 |                 pubDo.setUserUrl(address);
 942 |                 pubDo.setMintAmount(mintAmt);
 943 |                 log.info("新增公售数据 {}", pubDo);
 944 |                 payUpdate = pubPayLogDoMapper.insert(pubDo);
 945 |             } else if (pubDo.getMintAmount() > 10 || pubDo.getMintAmount() + mintAmt > 10){
 946 |                 log.error("当前公售数据异常{}",JSONUtil.toJsonStr(pubDo));
 947 |                 res.setMsg("当前公售数据异常:"+JSONUtil.toJsonStr(pubDo));
 948 |                 res.setSuccess(false);
 949 |                 return res;
 950 |             } else {
 951 | 
 952 |                 // 公售 update
 953 |                 payUpdate = pubPayLogDoMapper.update(null, Wrappers.lambdaUpdate(AstroPubPayLogDo.class)
 954 |                         .eq(AstroPubPayLogDo::getUserUrl, address)
 955 |                         .set(AstroPubPayLogDo::getMintAmount, pubDo.getMintAmount() + mintAmt ));// 增加公售名额
 956 |                 log.info("update 公售数据 {}", pubDo);
 957 | 
 958 |             }
 959 |         }
 960 | 
 961 |         if (payUpdate == 0) {
 962 |             res.setSuccess(false);
 963 |             res.setMsg("eachPayLog db error");
 964 |             return res;
 965 |         }
 966 | 
 967 |         // 更新各自表名额成功
 968 |         res.setMsg("success");
 969 |         res.setSuccess(true);
 970 |         return res;
 971 |     }
 972 | 
 973 |     public Boolean allPayLog(String userUrl, BigDecimal payAmt, Integer mintAmt){
 974 |         AstroAllPayLogDo payLogDo = allPayLogDoMapper.selectOne(Wrappers.lambdaQuery(AstroAllPayLogDo.class)
 975 |                 .eq(AstroAllPayLogDo::getUserUrl, userUrl));
 976 |         int res = 0;
 977 |         if (payLogDo == null) {
 978 |             //新增数据
 979 |             payLogDo = new AstroAllPayLogDo();
 980 |             payLogDo.setUserUrl(userUrl);
 981 |             payLogDo.setPayAmount(payAmt);
 982 |             payLogDo.setMintAmount(mintAmt);
 983 |             res = allPayLogDoMapper.insert(payLogDo);
 984 |             log.info("总表新增数据{}", res);
 985 |         } else {
 986 |             //更新数据
 987 |             log.info("总表更新数据");
 988 |             res = allPayLogDoMapper.update(null, Wrappers.lambdaUpdate(AstroAllPayLogDo.class)
 989 |                     .eq(AstroAllPayLogDo::getUserUrl, userUrl)
 990 |                     .set(AstroAllPayLogDo::getPayAmount, payLogDo.getPayAmount().add(payAmt))
 991 |                     .set(AstroAllPayLogDo::getMintAmount, payLogDo.getMintAmount() + mintAmt));
 992 |             log.info("总表更新数据{}", res);
 993 |         }
 994 |         return res > 0;
 995 |     }
 996 | 
 997 | 
 998 |     /**
 999 |      * 1 正在支付
1000 |      * 2 已支付
1001 |      * 3 已到账
1002 |      *
1003 |      * @param txId
1004 |      * @return
1005 |      */
1006 |     @Override
1007 |     public Response<Boolean> check(String txId) {
1008 |         AstroOrderDo orderDo = orderDoMapper.selectOne(Wrappers.lambdaQuery(AstroOrderDo.class)
1009 |                 .eq(txId  != null, AstroOrderDo::getTxId, txId));
1010 |         boolean check = false;
1011 | 
1012 |         // 不存在
1013 |         if (orderDo == null) {
1014 |             return Response.successMsg( false,"不存在此交易");
1015 |         } else if (orderDo.getPayStatus() == 1) {
1016 |             // 正在支付状态
1017 |             check = true;
1018 |         } else if (orderDo.getPayStatus() == 2) {
1019 |             // 已支付状态
1020 |             check = true;
1021 |         } else if (orderDo.getPayStatus() == 3){
1022 |             // 付款已到账状态
1023 |             check = true;
1024 |         }
1025 | 
1026 |         return Response.success(check);
1027 |     }
1028 | 
1029 |     @Override
1030 |     public Response<InviteCodeVo> creatInviteCode(CreatInCodeParam param) {
1031 |         //构造返回值
1032 |         InviteCodeVo vo = new InviteCodeVo();
1033 |         //用当前的 url 生成邀请码
1034 |         Long code = InviteCodeUtil.generateInviteCode(param.getShareUrl());
1035 | 
1036 | 
1037 |         //查看库中有无此验证码
1038 |         InviteCodeDo codeExit = inviteCodeMapper.selectOne(Wrappers.lambdaQuery(InviteCodeDo.class)
1039 |                 .eq(InviteCodeDo::getInviteCode, code));
1040 |         if (codeExit != null) {
1041 |             vo.setInviteCode(code);
1042 |             return Response.successMsg(vo , "Invitation code already exists :" + code);
1043 |         } else {
1044 |             InviteCodeDo codeDo = new InviteCodeDo();
1045 |             codeDo.setInviteCode(code);
1046 |             codeDo.setShareUrl(param.getShareUrl());
1047 |             int insert = inviteCodeMapper.insert(codeDo);
1048 |             vo.setInviteCode(code);
1049 |         }
1050 | 
1051 |         return Response.success(vo);
1052 |     }
1053 | 
1054 |     @Override
1055 |     public Response checkInviteCode(CheckInCodeParam param) {
1056 |         //邀请码
1057 |         Long code = param.getInvCode();
1058 | 
1059 |         log.info("邀请码{}", code);
1060 | 
1061 |         //当前被分享者
1062 |         String inviter = param.getInvitedUrl();
1063 | 
1064 |         //根据
1065 |         InviteCodeDo codeDo = inviteCodeMapper.selectOne(Wrappers.lambdaQuery(InviteCodeDo.class)
1066 |                 .eq(InviteCodeDo::getInviteCode, code));
1067 | 
1068 |         //被分享者在邀请码表里有记录且被分享者与分享者不同，则意味着分享有效
1069 |         if  (code == null || StrUtil.isEmpty(inviter)) {
1070 |             return Response.successMsg(null, "Invalid Invitation Code");
1071 |         } else if (codeDo != null && codeDo.getShareUrl() != inviter) {
1072 |             //
1073 |             codeDo.setStatus(SHARED_1);
1074 |             codeDo.setInvitedUrl(inviter);
1075 |             int update = inviteCodeMapper.update(codeDo, Wrappers.lambdaUpdate(InviteCodeDo.class)
1076 |                     .eq(InviteCodeDo::getInviteCode, code));
1077 |         }
1078 |         return Response.successMsg(null, "Sharing takes effect");
1079 |     }
1080 | 
1081 |     /**
1082 |      * 1.检测返回的交易 txId 是否合法、是否存在对应的订单
1083 |      * 2.查看当前交易id txId 对应的与传入的地址和金额是否相符
1084 |      * 3.根据订单 mint 数量进行 nft 随机分配
1085 |      * 4.并将 nft 标记为已售卖
1086 |      * 5.将订单置为已付款
1087 |      * @param param
1088 |      * @return
1089 |      */
1090 |     @Transactional
1091 |     @Override
1092 |     public Response<SenderRes>
1093 | 
1094 |     payCallBack(PayCallBackParam param) {
1095 |         // 构建返回 msg
1096 |         String msg = null;
1097 |         try {
1098 |             /**
1099 |              * 1.检测返回的交易 txId 是否合法、是否存在对应的订单
1100 |              */
1101 |             AstroOrderDo orderDo = orderDoMapper.selectOne(Wrappers.lambdaQuery(AstroOrderDo.class)
1102 |                     .eq(param.getTxId() != null, AstroOrderDo::getTxId, param.getTxId()));
1103 |             if (orderDo == null) {
1104 |                 return Response.successMsg(null, "不存在此交易");
1105 |             }
1106 | 
1107 |             if (orderDo.getPayStatus() == Received_3) {
1108 |                 return Response.error(403, "订单金额已经到账");
1109 |             }
1110 | 
1111 |             /**
1112 |              * 2.1查看当前 txId 对应的订单与传入的地址是否相符
1113 |              */
1114 |             if (!param.getUserUrl().equals(orderDo.getUserUrl())) {
1115 |                 return Response.error(10000, "当前 hash 对应的订单与传入的 address 不相符");
1116 |             }
1117 |             /**
1118 |              * 2.2查看当前 txId 对应的订单与传入金额是否相符
1119 |              */
1120 |             if (!param.getPayAmt().equals(orderDo.getPayAmount())) {
1121 |                 return Response.error(10000, "当前 hash 对应的订单与传入的 payAmt 不相符");
1122 |             }
1123 | 
1124 |             /**
1125 |              * 3.根据订单 mint 数量进行 nft 随机分配
1126 |              * 4.将 nft 标记为已售卖
1127 |              */
1128 |                 // 进行分发 nft 操作
1129 |                 Integer nftNum = orderDo.getMintAmount();// 获取当前订单 mint 几个
1130 |                 String address = orderDo.getUserUrl();// 获取当前买家的钱包地址
1131 |                 // 生成分发数据
1132 |                 SenderRes senderRes = nftSender(nftNum, address);
1133 | 
1134 |             if (!senderRes.getSenderSuccess()) {
1135 |                 msg = "Send nft fail";
1136 |                 // 分配 nft 失败
1137 |                 return Response.error(500, msg);
1138 |             } else if (senderRes.getSenderStatus() == 1) {
1139 |                 msg = "all sell";
1140 |                 return Response.error(501, msg);
1141 |             }
1142 | 
1143 |             /**
1144 |              * 5.将订单置为已付款
1145 |               */
1146 |             log.info("当前 {} 订单被回调", orderDo);
1147 |             int orderUpdate;
1148 |             orderUpdate = orderDoMapper.update(null, Wrappers.lambdaUpdate(AstroOrderDo.class)
1149 |                         .eq(param.getTxId() != null, AstroOrderDo::getTxId, param.getTxId())
1150 |                         .set(AstroOrderDo::getPayStatus, Received_3)
1151 |                         .set(AstroOrderDo::getNftList, senderRes.getNftList().toString())
1152 |                         .set(AstroOrderDo::getUtxoList, senderRes.getAddressUtxo().toString() ));// 讲订单状态改为：狗币已经到钱包——3
1153 | 
1154 |                 if (orderUpdate > 0) {
1155 |                     msg = "Payment to account";
1156 |                 } else if (orderUpdate == 0){
1157 |                     msg = "Payment Unknown Error";
1158 |                 }
1159 | 
1160 |                 return Response.successMsg(senderRes, msg);
1161 | 
1162 |         } catch (Exception e) {
1163 |             log.info("支付回调异常:{}", e);
1164 |             return Response.error(INNER_ERROR_5000, "payCallBack unknown error"+ e.toString());
1165 |         }
1166 | 
1167 |     }
1168 | 
1169 |     /**
1170 |      * 进行 nft 分发
1171 |      * @param num nft 数量，
1172 |      * @param address nft 需要发放的钱包地址
1173 |      *
1174 |      * @return
1175 |      * 1.当前 nft 所属的钱包地址和对应utxo
1176 |      * 2.买家的钱包地址
1177 |      * 3.
1178 |      */
1179 | 
1180 | 
1181 |     @Override
1182 |     public SenderRes nftSender(Integer num, String address) {
1183 |         // 构造返回值
1184 |         SenderRes res = new SenderRes();
1185 | 
1186 |         // 查找所有未售卖的 nft_id
1187 | //        List<Integer> unsoldNftIdList = nftMapper.getAllUnSold();
1188 | 
1189 |         /**
1190 |          * 从第一波发售中的 2k 张查找 未售卖的 nftIdList
1191 |          */
1192 |         List<Integer> unsoldNftIdList = nftMapper.get1thUnSold();
1193 | 
1194 |         if (unsoldNftIdList.size() == 0 || unsoldNftIdList == null) {
1195 |             // 库存为0
1196 |             res.setSenderSuccess(false);
1197 |             return res;
1198 |         } else {
1199 |             // 还有库存
1200 |             res.setSenderSuccess(true);
1201 |         }
1202 | 
1203 |         // 若订单数量不足，则用剩余数量
1204 |         if (num > unsoldNftIdList.size()) {
1205 |             num = unsoldNftIdList.size();
1206 |         }
1207 | 
1208 |         /**
1209 |          * 从剩下的 nft_id List 中随机选取 nft 的编号
1210 |           */
1211 |         List<Integer> nums = RanNumUtil.getRandomNumbers(unsoldNftIdList, num);
1212 |         if (nums.equals(null)) {
1213 |             // 卖完了
1214 |             res.setSenderStatus(1);
1215 |         } else {
1216 |             res.setSenderStatus(0);
1217 |         }
1218 | 
1219 |         /**
1220 |          * 获取并返回 nft 的 utxo 和分发前所属的 address
1221 |          */
1222 |         List<AddressUtxo> addressUtxoList = getNftUtxos(nums);
1223 |         res.setAddressUtxo(addressUtxoList);
1224 | 
1225 | 
1226 |         // 将 all_nft 库中的 nft 状态置为已售卖
1227 |         LambdaUpdateWrapper<TaxAllNftDo> updateWrapper = new LambdaUpdateWrapper<>();
1228 |         updateWrapper.set(TaxAllNftDo::getSellStatus, SOLD)
1229 |                 .in(TaxAllNftDo::getNftId, nums);
1230 |         int update = nftMapper.update(null, updateWrapper);
1231 | 
1232 |         // 状态 update 有误
1233 |         if (update != nums.size()) {
1234 |             res.setSenderSuccess(false);
1235 |             return res;
1236 |         }
1237 | 
1238 |         /***
1239 |          *  返回买家的钱包地址（需要发放的钱包地址）
1240 |          */
1241 |         res.setAddress(address);
1242 |         res.setNftList(nums.toString());
1243 |         
1244 |         return res;
1245 |     }
1246 | 
1247 | 
1248 |     /**
1249 |      * 通过编号数组获取 nft hash 列表
1250 |      */
1251 |     @Override
1252 |     public List<AddressUtxo> getNftUtxos(List<Integer> nftIds) {
1253 |         QueryWrapper<TaxAllNftDo> queryWrapper = new QueryWrapper<>();
1254 |         queryWrapper.select("nft_utxo","address")
1255 |                 .in("nft_id", nftIds);
1256 |         List<TaxAllNftDo> taxAllNfts = nftMapper.selectList(queryWrapper);
1257 | 
1258 |         List<AddressUtxo> addressUtxoList = new ArrayList<>();
1259 |         addressUtxoList.addAll(BeanUtil.copyToList(taxAllNfts, AddressUtxo.class));
1260 | 
1261 |         return addressUtxoList;
1262 |     }
1263 | 
1264 |     @Autowired
1265 |     NftIndexMapper indexMapper;
1266 | 
1267 |     @Override
1268 |     public Response updateAddressValidUtxo(ValidUtxoParam param) {
1269 |         int res = 0;
1270 |         NftIndexDo indexDo = indexMapper.selectOne(Wrappers.lambdaQuery(NftIndexDo.class)
1271 |                 .eq(NftIndexDo::getAddress, param.getAddress()));
1272 | 
1273 |         if (indexDo == null) {
1274 |             indexDo = new NftIndexDo();
1275 |             indexDo.setUtxoIndex(param.getIndex());
1276 |             indexDo.setUtxo(param.getUtxo());
1277 |             indexDo.setValue(param.getValue());
1278 |             indexDo.setAddress(param.getAddress());
1279 |             indexDo.setOtherJson(JSONUtil.toJsonStr(indexDo));
1280 |             res = indexMapper.insert(indexDo);
1281 |             log.info("updateAddressValidUtxo,insert{}",indexDo);
1282 |         } else {
1283 |             indexDo.setOtherJson(null);
1284 |             res = indexMapper.update(null, Wrappers.lambdaUpdate(NftIndexDo.class)
1285 |                     .set(NftIndexDo::getUtxoIndex, param.getIndex())
1286 |                     .set(NftIndexDo::getValue, param.getValue())
1287 |                     .set(NftIndexDo::getUtxo, param.getUtxo())
1288 |                     .set(NftIndexDo::getOtherJson, JSONUtil.toJsonStr(indexDo))
1289 |                     .eq(NftIndexDo::getAddress, param.getAddress()));
1290 |             log.info("updateAddressValidUtxo,update{}",indexDo);
1291 |         }
1292 | 
1293 |         if (res == 0) {
1294 |             return Response.error(INNER_ERROR_5000, "update error");
1295 |         }
1296 | 
1297 |         return Response.success();
1298 |     }
1299 | 
1300 |     @Override
1301 |     public Response<Integer> firstUnSoldNum() {
1302 | 
1303 |         // 这里是从 1996 开始计算
1304 |         Integer unSoldNum = nftMapper.firstUnSoldNum();
1305 | 
1306 |         if (unSoldNum == null || unSoldNum == 0) {
1307 |             unSoldNum = 0;// 如果 1996 全 mint 完直接返回 0
1308 |         } else {
1309 |             unSoldNum = unSoldNum + 4;//如果 1996 没 mint 完则返回的数量 + 4
1310 |         }
1311 | 
1312 |         return Response.success(unSoldNum);
1313 |     }
1314 | 
1315 | 
1316 | }


// ====== FILE: ./src/main/java/com/astro/service/impl/ScriptImp.java ======

   1 | package com.astro.service.impl;
   2 | 
   3 | import org.springframework.stereotype.Service;
   4 | 
   5 | @Service
   6 | public class ScriptImp {
   7 | }



// ====== FILE: ./src/main/java/com/astro/service/impl/TokenServiceImp.java ======

   1 | package com.astro.service.impl;
   2 | 
   3 | import cn.hutool.jwt.JWT;
   4 | import com.astro.service.TokenService;
   5 | import com.astro.vo.TokenParam;
   6 | import org.springframework.stereotype.Service;
   7 | 
   8 | @Service
   9 | public class TokenServiceImp implements TokenService {
  10 | 
  11 |     private static final String SECRET_KEY = "mK9!hG0#lF3$tE7_bR2(pS4@wD5%xY1{cN2>rL3<bL0?uZ1(dQ1%cX0&jV2@nT9!";
  12 |     @Override
  13 |     public String creatToken(TokenParam param) {
  14 | 
  15 |         String token = JWT.create()
  16 |                 .setKey(SECRET_KEY.getBytes())
  17 |                 .sign();
  18 | 
  19 |         return token;
  20 |     }
  21 | 
  22 |     @Override
  23 |     public Boolean verifyToken(String token) {
  24 |         boolean verify = false;
  25 |         try {
  26 |             verify = JWT.of(token).setKey(SECRET_KEY.getBytes()).verify();
  27 |         } catch (Exception e) {
  28 |             e.printStackTrace();
  29 |         }
  30 |         return verify;
  31 |     }
  32 | 
  33 |     @Override
  34 |     public void saveUser(String token) {
  35 | 
  36 |         JWT jwt = JWT.of(token).setKey(SECRET_KEY.getBytes());
  37 | 
  38 |     }
  39 | 
  40 | }



// ====== FILE: ./src/main/java/com/astro/service/impl/TimeTaskImp.java ======

   1 | package com.astro.service.impl;
   2 | 
   3 | import com.astro.mapper.*;
   4 | import com.astro.param.CreatGainParam;
   5 | import com.astro.pojo.RichRewardBaseDo;
   6 | import com.astro.pojo.RichRewardLogDo;
   7 | import com.astro.response.Response;
   8 | import com.astro.service.TimeTaskService;
   9 | import com.astro.vo.UpdateGainsVo;
  10 | import com.astro.vo.dto.HolderDto;
  11 | import com.baomidou.mybatisplus.core.toolkit.Wrappers;
  12 | import lombok.extern.slf4j.Slf4j;
  13 | import org.springframework.beans.factory.annotation.Autowired;
  14 | import org.springframework.stereotype.Service;
  15 | import org.springframework.transaction.annotation.Transactional;
  16 | 
  17 | import java.math.BigDecimal;
  18 | import java.math.RoundingMode;
  19 | import java.sql.SQLException;
  20 | import java.time.LocalDate;
  21 | import java.time.LocalDateTime;
  22 | import java.util.List;
  23 | 
  24 | import static com.astro.constant.HttpCode.INNER_ERROR_5000;
  25 | import static com.astro.constant.HttpCode.MYSQL_ERROR_5001;
  26 | import static com.astro.constant.RichConstant.*;
  27 | 
  28 | 
  29 | @Slf4j
  30 | @Service
  31 | public class TimeTaskImp implements TimeTaskService {
  32 | 
  33 |     @Autowired
  34 |     TaxAllNftDoMapper nftMapper;
  35 | 
  36 |     @Autowired
  37 |     RichHolderMapper holderMapper;
  38 | 
  39 |     @Autowired
  40 |     RewardBaseMapper rewardBaseMapper;
  41 | 
  42 |     @Autowired
  43 |     OrderMapper orderMapper;
  44 | 
  45 |     @Autowired
  46 |     RichRewardLogMapper logMapper;
  47 | 
  48 |     @Autowired
  49 |     Tax1of1NftDoMapper of1NftDoMapper;
  50 | 
  51 | 
  52 |     @Transactional
  53 |     @Override
  54 |     public Response<UpdateGainsVo> updateGains(CreatGainParam param) throws SQLException {
  55 | 
  56 |         // 获取精确到天的日期数据（今天
  57 |         LocalDate todayData = LocalDateTime.now().toLocalDate();
  58 |         // 获取 base
  59 |         BigDecimal base = BigDecimal.valueOf(param.getBase());
  60 | 
  61 |         // 校验今天有无更新过矿场产出数据
  62 |         RichRewardBaseDo baseDo = rewardBaseMapper.selectOne(Wrappers.lambdaQuery(RichRewardBaseDo.class)
  63 |                 .eq(RichRewardBaseDo::getRewData, todayData));
  64 |         if (baseDo != null) {
  65 |             return Response.successMsg(null, "already fill today");
  66 |         }
  67 | 
  68 |         /**
  69 |          * 更新当天的矿场收益数据
  70 |          */
  71 |         Response response = rewardCounter(param.getBase(), todayData);
  72 |         if (response.getCode() == MYSQL_ERROR_5001) {
  73 |             return response;
  74 |         }
  75 | 
  76 |         List<HolderDto> holderList = nftMapper.getNftCountByRarity();
  77 | 
  78 |         /**
  79 |          * 先查看是否已有 holder 数据
  80 |          * 无则 insert，有则 update
  81 |          */
  82 |         for (HolderDto nftHolderDto : holderList) {
  83 | 
  84 |             Integer commonAmt = nftHolderDto.getLv1amt() + nftHolderDto.getLv2amt() + nftHolderDto.getLv3amt() +
  85 |                     nftHolderDto.getLv4amt() + nftHolderDto.getLv5amt() + nftHolderDto.getLv6amt();
  86 |             if (commonAmt == 0) {
  87 |                 continue;//跳出当前循环
  88 |             }
  89 | 
  90 |             BigDecimal curHolderReward = count(nftHolderDto, base);
  91 | 
  92 |             // 根据当前领取人的地址直接搜寻持有者的奖励累加实体
  93 |             RichRewardLogDo logDo = logMapper.selectOne(Wrappers.lambdaQuery(RichRewardLogDo.class)
  94 |                     .eq(RichRewardLogDo::getAddress, nftHolderDto.getAddress()));
  95 | 
  96 |             // 数据更新
  97 |             int res = 0;
  98 | 
  99 |             // 若还无今天的数据,更新新数据
 100 |             if (logDo == null) {
 101 |                 logDo = new RichRewardLogDo();
 102 | 
 103 |                 BigDecimal bigDecimal = new BigDecimal("0.1");
 104 |                 // 构造收益数据
 105 |                 logDo.setTotalReward(bigDecimal);
 106 | 
 107 | //                // 构造收益数据
 108 | //                logDo.setTotalReward(todayRew);
 109 |                 // 添加收益更新时间数据
 110 |                 logDo.setUpdateReward(todayData);
 111 |                 logDo.setLatest(null);// 因为没有领取过所以没有最新领取地址
 112 |                 // 添加钱包地址
 113 |                 logDo.setAddress(nftHolderDto.getAddress());
 114 |                 // 插入新收益日志
 115 |                 res = logMapper.insert(logDo);
 116 |             } else if (logDo != null && !logDo.getUpdateReward().isEqual(todayData)){
 117 |                 // 不为空，但收益数据更新的最新时间不是今天，则进行更新
 118 |                 res = logMapper.update(null, Wrappers.lambdaUpdate(RichRewardLogDo.class)
 119 |                         .set(RichRewardLogDo::getTotalReward, logDo.getTotalReward().add(curHolderReward))// 累加收益
 120 |                         .set(RichRewardLogDo::getUpdateReward, todayData)// 将收益累加时间更新为当前具体日期
 121 |                         .eq(RichRewardLogDo::getAddress, logDo.getAddress()));
 122 |             } else if (logDo != null && logDo.getUpdateReward().isEqual(todayData)) {
 123 |                 log.info("此用户今天的收益数据已经更新完毕，请勿反复累加");
 124 |                 return Response.error(INNER_ERROR_5000, "此用户今天的收益数据已经更新完毕，请勿反复累加");
 125 |             }
 126 | 
 127 |             if (res == 0) {
 128 |                 return Response.error(MYSQL_ERROR_5001, "update log data fail");
 129 |             }
 130 | 
 131 |         }
 132 | 
 133 |         UpdateGainsVo vo = new UpdateGainsVo();
 134 |         vo.setBase(param.getBase());
 135 |         vo.setToday(todayData);
 136 |         vo.setHolderList(holderList);
 137 | 
 138 |         return Response.success(vo);
 139 |     }
 140 | 
 141 |     /**
 142 |      * 根据持有者实体更新收益数据
 143 |      * @param nftHolderDto
 144 |      * @param base
 145 |      * @return
 146 |      */
 147 |     public BigDecimal count(HolderDto nftHolderDto, BigDecimal base) {
 148 | 
 149 |         // 获取当前持有者的 nft 持有数据, 转为 BigDecimal
 150 |         BigDecimal lv1amt = BigDecimal.valueOf(nftHolderDto.getLv1amt());
 151 |         BigDecimal lv2amt = BigDecimal.valueOf(nftHolderDto.getLv2amt());
 152 |         BigDecimal lv3amt = BigDecimal.valueOf(nftHolderDto.getLv3amt());
 153 |         BigDecimal lv4amt = BigDecimal.valueOf(nftHolderDto.getLv4amt());
 154 |         BigDecimal lv5amt = BigDecimal.valueOf(nftHolderDto.getLv5amt());
 155 |         BigDecimal lv6amt = BigDecimal.valueOf(nftHolderDto.getLv6amt());
 156 | 
 157 |         // 计算当天的收益
 158 |         BigDecimal todayRew = lv1amt.multiply(LV1P)
 159 |                 .add(lv2amt.multiply(LV2P))
 160 |                 .add(lv3amt.multiply(LV3P))
 161 |                 .add(lv4amt.multiply(LV4P))
 162 |                 .add(lv5amt.multiply(LV5P))
 163 |                 .add(lv6amt.multiply(LV6P))
 164 |                 .multiply(base)
 165 |                 .setScale(1, RoundingMode.HALF_UP);// 将收益制约为1位小数
 166 | 
 167 |         return todayRew;
 168 |     }
 169 | 
 170 |     @Override
 171 |     public Response rewardCounter(Long baseRew, LocalDate now) throws SQLException {
 172 |         RichRewardBaseDo baseDo = new RichRewardBaseDo();
 173 | 
 174 |         // 塞时间
 175 |         baseDo.setRewData(now);
 176 | 
 177 |         // 构建 base 数据
 178 |         baseDo.setRewBase(Long.valueOf(baseRew));
 179 |         BigDecimal base = BigDecimal.valueOf(baseRew);
 180 | 
 181 |         // 记录 base 数据
 182 |         int baseRes = rewardBaseMapper.insert(baseDo);
 183 | 
 184 |         if (baseRes == 0) {
 185 |             return Response.error(MYSQL_ERROR_5001, "base update error");
 186 |         }
 187 | 
 188 |         return Response.success();
 189 |     }
 190 | 
 191 | 
 192 | }



// ====== FILE: ./src/main/java/com/astro/service/impl/RichServiceImpl.java ======

   1 | package com.astro.service.impl;
   2 | 
   3 | import cn.hutool.http.HttpException;
   4 | import cn.hutool.http.HttpResponse;
   5 | import cn.hutool.http.HttpUtil;
   6 | import cn.hutool.json.JSONObject;
   7 | import cn.hutool.json.JSONUtil;
   8 | 
   9 | import com.astro.mapper.*;
  10 | import com.astro.param.ClaimCheckParam;
  11 | import com.astro.param.FillBaseParam;
  12 | import com.astro.param.QueryCoinsParam;
  13 | import com.astro.pojo.OrderDo;
  14 | import com.astro.pojo.RichRewardBaseDo;
  15 | import com.astro.pojo.RichRewardLogDo;
  16 | import com.astro.response.Response;
  17 | import com.astro.service.RichService;
  18 | import com.astro.utils.SHA256Util;
  19 | import com.astro.vo.GiveVo;
  20 | import com.astro.vo.QueryCoinsVo;
  21 | import com.astro.vo.dto.ClaimStatusDto;
  22 | import com.baomidou.mybatisplus.core.toolkit.IdWorker;
  23 | import com.baomidou.mybatisplus.core.toolkit.Wrappers;
  24 | import lombok.extern.slf4j.Slf4j;
  25 | import org.springframework.beans.factory.annotation.Autowired;
  26 | import org.springframework.stereotype.Service;
  27 | import org.springframework.transaction.annotation.Transactional;
  28 | import java.math.BigDecimal;
  29 | import java.time.LocalDate;
  30 | import java.time.LocalDateTime;
  31 | import static com.astro.constant.HttpCode.*;
  32 | import static com.astro.constant.OrderConstant.*;
  33 | 
  34 | 
  35 | @Slf4j
  36 | @Service
  37 | public class RichServiceImpl implements RichService {
  38 | 
  39 |     @Autowired
  40 |     TaxAllNftDoMapper nftMapper;
  41 | 
  42 |     @Autowired
  43 |     RewardBaseMapper rewardBaseMapper;
  44 | 
  45 |     @Autowired
  46 |     OrderMapper orderMapper;
  47 | 
  48 |     @Autowired
  49 |     RichHolderMapper holderMapper;
  50 | 
  51 |     @Autowired
  52 |     RichRewardLogMapper logMapper;
  53 | 
  54 |     /**
  55 |      * 单纯填写今天的收益数据
  56 |      * @param
  57 |      * @return
  58 |      */
  59 |     @Transactional
  60 |     @Override
  61 |     public Response<RichRewardBaseDo> fillBase(FillBaseParam param) {
  62 |         // 转换为精确到天的日期数据
  63 |         LocalDate today = LocalDateTime.now().toLocalDate();
  64 |         // 获取 base
  65 |         RichRewardBaseDo baseDo = rewardBaseMapper.selectOne(Wrappers.lambdaQuery(RichRewardBaseDo.class)
  66 |                 .eq(RichRewardBaseDo::getRewData, today));
  67 |         if (baseDo != null) {
  68 |             return Response.successMsg(null, "already fill today");
  69 |         }
  70 | 
  71 |         /**
  72 |          * 更新当天的矿场收益数据
  73 |          */
  74 |         baseDo = new RichRewardBaseDo();
  75 |         baseDo.setRewBase(Long.valueOf(param.getBase()));
  76 |         baseDo.setRewData(today);
  77 |         int insert = rewardBaseMapper.insert(baseDo);
  78 |         if (insert == 0) {
  79 |             return Response.error(MYSQL_ERROR_5001, "fillBase database error");
  80 |         }
  81 | 
  82 |         return Response.success(baseDo);
  83 |     }
  84 | 
  85 | 
  86 |     /**
  87 |      * 判断当前用户能不能领取收益
  88 |      * @param address
  89 |      * @return
  90 |      */
  91 |     @Override
  92 |     public Boolean claimJudger(String address) {
  93 |         if (address == null) {
  94 |             Response.error(BIZ_ERROR, "address cannot be null");
  95 |         }
  96 | 
  97 |         Boolean couldClaim = false;
  98 | 
  99 |         // 获取累加表实体数据
 100 |         RichRewardLogDo logDo = logMapper.selectOne(Wrappers.lambdaQuery(RichRewardLogDo.class)
 101 |                 .eq(RichRewardLogDo::getAddress, address));
 102 |         if (logDo == null) {
 103 |             return false;
 104 |         }
 105 | 
 106 |         // 获取累加收益
 107 |         BigDecimal totalReward = logDo.getTotalReward();
 108 | 
 109 |         // 获取最新领取时间
 110 |         LocalDate latest = logDo.getLatest();
 111 | 
 112 |         // 之前从没有没有领取过的情况
 113 |         if (logDo != null && latest == null) {
 114 |             return true;
 115 |         }
 116 | 
 117 |         // 获取当前日期和时间
 118 |         LocalDate today = LocalDateTime.now().toLocalDate();
 119 | 
 120 |         // 持有 nft && 当前的收益不为 0 && 最新的领取时间 && 不是今天
 121 |         if (!totalReward.equals(BigDecimal.ZERO) && !latest.isEqual(today)) {
 122 |             couldClaim = true;
 123 |         }
 124 |         return couldClaim;
 125 |     }
 126 | 
 127 | 
 128 | 
 129 | 
 130 |     /**
 131 |      * 收益领取总接口
 132 |      *
 133 |      * @param address
 134 |      * @return
 135 |      */
 136 |     @Transactional
 137 |     @Override
 138 |     public Response claim(String address) {
 139 | 
 140 |         // 判断有无资格领取
 141 |         Boolean couldClaim = claimJudger(address);
 142 | 
 143 |         if (!couldClaim) {
 144 |             return Response.successMsg(null, "received earnings or no rights for earnings");
 145 |         }
 146 | 
 147 | //        BigDecimal reward = reward(address);// 获取收益数据
 148 | 
 149 |         BigDecimal reward = new BigDecimal("0.1");// 获取收益数据
 150 | 
 151 |         Response response = chainClaim(address, reward);// 请求链上获取收益
 152 | 
 153 |         return response;
 154 |     }
 155 | 
 156 |     @Override
 157 |     public Response chainClaim(String address, BigDecimal reward) {
 158 | 
 159 | 
 160 |         String responseStr = null;
 161 |         int statusCode = 0;
 162 | 
 163 | 
 164 |         // 订单 id
 165 |         Long orderId = creatOrder(address, reward);
 166 | 
 167 |         // 构建收益数据
 168 |         GiveVo giveVo = new GiveVo();
 169 |         giveVo.setAddress(address);
 170 |         giveVo.setAmount(reward);
 171 |         giveVo.setOrderId(orderId.toString());
 172 | 
 173 |         // 构建盐
 174 |         String json = JSONUtil.toJsonStr(giveVo);
 175 |         System.out.println("json:"+json);
 176 |         String salt = "CFIrxG7nDq4h2TofxTGlmm220E7UI2JBxf";
 177 |         // json 加盐
 178 |         String jsonSalt = json + salt;
 179 |         // 256 盐
 180 |         String sha = SHA256Util.encrypt(jsonSalt);
 181 | 
 182 | 
 183 | 
 184 |         try {
 185 |             // 构造请求体 jsonObj
 186 |             JSONObject requestBody = new JSONObject();
 187 |             requestBody.set("address", address);
 188 |             requestBody.set("amount", reward);
 189 |             requestBody.set("orderId", orderId.toString());
 190 |             requestBody.set("sha", sha);
 191 | 
 192 |             System.out.println("requestBody:"+requestBody);
 193 |             System.out.println("amount"+reward);
 194 |             System.out.println("orderId" + orderId.toString());
 195 |             System.out.println("sha"+sha);
 196 |             // 构造 http 请求 url
 197 |             String chainUrl = "http://94.130.49.158:3000/claim";
 198 | 
 199 |             // 发送 http 请求给链上
 200 |             HttpResponse response = HttpUtil.createPost(chainUrl)
 201 |                     .body(requestBody.toString())// 请求体
 202 |                     .timeout(30000)// 设置超时时间（单位：毫秒）
 203 |                     .execute();
 204 | 
 205 |             System.out.println("response" + response.toString());
 206 | 
 207 |             // 响应结果判断
 208 |             statusCode = response.getStatus();
 209 |             responseStr = response.toString();
 210 | 
 211 |             ClaimStatusDto dto = claimStatusJudger(statusCode, responseStr, orderId);
 212 | 
 213 |             return Response.successMsg(responseStr.toString() + ", code:" + statusCode);
 214 | 
 215 |         } catch (HttpException e) {
 216 |             // 处理 Http 请求发生异常的情况
 217 |             e.printStackTrace();
 218 |             log.info("请求链上接 响应结果 http 异常 : {}", e);
 219 |             return Response.successMsg("httpException"+e.getMessage(), "code:"+ statusCode);
 220 |         } catch (Exception e) {
 221 |             // 处理 Http 请求发生异常的情况
 222 |             e.printStackTrace();
 223 |             log.info("请求链上接口响应结果异常 : {}", e);
 224 |             return Response.successMsg("Exception"+e.getMessage(), "code:"+ statusCode);
 225 |         }
 226 | 
 227 |     }
 228 | 
 229 |     public ClaimStatusDto chainPost(JSONObject requestBody, String url){
 230 | 
 231 |         String chainUrl = "http://94.130.49.158:3000/claim";
 232 | 
 233 |         // 发送 http 请求给链上
 234 |         HttpResponse response = HttpUtil.createPost(chainUrl)
 235 |                 .body(requestBody.toString())// 请求体
 236 |                 .timeout(30000)// 设置超时时间（单位：毫秒）
 237 |                 .execute();
 238 | 
 239 |         System.out.println("response" + response.toString());
 240 | 
 241 |         // 响应结果判断
 242 |         int statusCode = response.getStatus();
 243 |         String responseStr = response.toString();
 244 | 
 245 |         ClaimStatusDto dto = new ClaimStatusDto();
 246 |         dto.setStatusCode(statusCode);
 247 |         dto.setMsg(responseStr);
 248 |         return dto;
 249 |     }
 250 | 
 251 |     public ClaimStatusDto claimStatusJudger(Integer statusCode, String msg, Long orderId) {
 252 | 
 253 |         if (statusCode == 200) {
 254 | 
 255 |             int update = orderMapper.update(null, Wrappers.lambdaUpdate(OrderDo.class)
 256 |                     .eq(OrderDo::getRichOrderId, orderId)
 257 |                     .set(OrderDo::getStatus, CHECKING_2));
 258 | 
 259 |         } else if (statusCode == 400) {
 260 |             Response.successMsg("already collected within 24 hours:" + "response:" + msg + ",code:" + statusCode);
 261 |         } else if(statusCode == 502){
 262 |             Response.successMsg("inner error"+ "response:" + msg + ",code:" + statusCode);
 263 |         }else if (statusCode == 405){
 264 |             log.info("参数错误");
 265 | 
 266 |         }else if (statusCode == 401){
 267 |             log.info("sha 错误");
 268 |         }else if (statusCode == 403){
 269 |             log.info("ip 不在白名单");
 270 |         }else if (statusCode == 500){
 271 |             log.info("链上错误");
 272 |         } else {
 273 |             log.info("收益领取错误:{}" , msg);
 274 |         }
 275 | 
 276 |         return null;
 277 |     }
 278 | 
 279 | 
 280 | 
 281 | 
 282 |     @Override
 283 |     public Long creatOrder(String address, BigDecimal gains) {
 284 | 
 285 |         OrderDo orderDo = new OrderDo();
 286 |         Long orderId = IdWorker.getId();
 287 |         // 获取最新领取时间
 288 |         // 获取当前日期和时间
 289 |         LocalDateTime current = LocalDateTime.now();
 290 | 
 291 |         orderDo.setRichOrderId(orderId);
 292 |         orderDo.setAddress(address);
 293 |         orderDo.setOrderTime(current);
 294 |         orderDo.setStatus(GIVING_1);
 295 |         orderDo.setRewardAmt(gains);
 296 | 
 297 |         int insert = orderMapper.insert(orderDo);
 298 | 
 299 |         if (insert == 0) {
 300 |             return -1L;
 301 |         }
 302 | 
 303 |         return orderId;
 304 |     }
 305 | 
 306 |     @Override
 307 |     public Response claimCheck(ClaimCheckParam param) {
 308 | 
 309 |         OrderDo orderDo = orderMapper.selectOne(Wrappers.lambdaQuery(OrderDo.class)
 310 |                 .eq(OrderDo::getRichOrderId, param.getOrderId()));
 311 | 
 312 |         int orderRes = 0;
 313 |         int logUpdate = 0;
 314 |         if (orderDo != null && orderDo.getAddress().equals(param.getAddress()) && orderDo.getRewardAmt().toString().equals(param.getReward().toString())){
 315 |                 orderRes = orderMapper.update(null, Wrappers.lambdaUpdate(OrderDo.class)
 316 |                         .eq(OrderDo::getRichOrderId, param.getOrderId())
 317 |                         .set(OrderDo::getStatus, CHECKED_3));
 318 | 
 319 |             // 成功:将当前用户的累计收益置 0 , 并且将最新领取时间置为今天
 320 |             logUpdate = logMapper.update(null, Wrappers.lambdaUpdate(RichRewardLogDo.class)
 321 |                     .eq(RichRewardLogDo::getAddress, orderDo.getAddress())
 322 |                     .set(RichRewardLogDo::getTotalReward, BigDecimal.ZERO)// 收益数清零
 323 |                     .set(RichRewardLogDo::getLatest, LocalDateTime.now().toLocalDate()));// 最新领取时间更新为今天
 324 | 
 325 |             log.info("order{}", orderDo);
 326 |         } else {
 327 |             log.info("order{}", orderDo);
 328 |             return Response.error(INNER_ERROR_5000, "当前收益数据不合法");
 329 |         }
 330 | 
 331 |         if (orderRes == 0 || logUpdate == 0) {
 332 |             return Response.error(MYSQL_ERROR_5001, "校验收益订单数据库错误");
 333 |         }
 334 | 
 335 |         return Response.successMsg("收益校验成功");
 336 |     }
 337 | 
 338 |     @Override
 339 |     public Response nftResender() {
 340 |         return null;
 341 |     }
 342 | 
 343 |     /**
 344 |      * 领取收益时查询个人累加收益
 345 |      * @param address
 346 |      * @return
 347 |      */
 348 | 
 349 |     public BigDecimal reward(String address) {
 350 |         RichRewardLogDo logDo = logMapper.selectOne(Wrappers.lambdaQuery(RichRewardLogDo.class)
 351 |                 .eq(RichRewardLogDo::getAddress, address));
 352 | 
 353 |         if (logDo == null) {
 354 |             return BigDecimal.ZERO;
 355 |         }
 356 | 
 357 |         BigDecimal totalReward = logDo.getTotalReward();
 358 |         return totalReward;
 359 |     }
 360 | 
 361 |     /**
 362 |      * 用户查询收益
 363 |      * @param param
 364 |      * @return
 365 |      */
 366 |     @Override
 367 |     public Response<QueryCoinsVo> query(QueryCoinsParam param) {
 368 | 
 369 |         RichRewardLogDo logDo = logMapper.selectOne(Wrappers.lambdaQuery(RichRewardLogDo.class)
 370 |                 .eq(RichRewardLogDo::getAddress, param.getAddress()));
 371 | 
 372 |         /**
 373 |          * 当前用户不在收益领取范围内
 374 |           */
 375 |         if (logDo == null) {
 376 |             return Response.error(403, "No current user");
 377 |         }
 378 | 
 379 |         BigDecimal rew = logDo.getTotalReward();
 380 |         QueryCoinsVo vo = new QueryCoinsVo();
 381 |         vo.setCoins(rew.toString());
 382 |         return Response.success(vo);
 383 |     }
 384 | 
 385 | 
 386 | 
 387 | }



// ====== FILE: ./src/main/java/com/astro/exception/RpcException.java ======

   1 | package com.astro.exception;
   2 | 
   3 | 
   4 | import com.astro.constant.RpcCode;
   5 | 
   6 | /**
   7 |  * 业务逻辑异常 Exception
   8 |  */
   9 | public final class RpcException extends RuntimeException {
  10 | 
  11 |     private static final long serialVersionUID = 5641293727370683250L;
  12 | 
  13 |     /**
  14 |      * 业务错误码
  15 |      *
  16 |      */
  17 |     private Integer code;
  18 |     /**
  19 |      * 错误提示
  20 |      */
  21 |     private String message;
  22 |     /**
  23 |      * 错误明细，内部调试错误
  24 |      *
  25 |      */
  26 |     private String detailMessage;
  27 | 
  28 |     /**
  29 |      * 空构造方法，避免反序列化问题
  30 |      */
  31 |     public RpcException() {
  32 |     }
  33 | 
  34 |     public RpcException(Integer code, String message) {
  35 |         this.code = code;
  36 |         this.message = message;
  37 |     }
  38 | 
  39 | 	public RpcException(String message) {
  40 | 		this.code = RpcCode.BIZ_ERROR;
  41 | 		this.message = message;
  42 | 	}
  43 | 
  44 |     public Integer getCode() {
  45 |         return code;
  46 |     }
  47 | 
  48 |     public String getDetailMessage() {
  49 |         return detailMessage;
  50 |     }
  51 | 
  52 |     public RpcException setDetailMessage(String detailMessage) {
  53 |         this.detailMessage = detailMessage;
  54 |         return this;
  55 |     }
  56 | 
  57 |     public RpcException setCode(Integer code) {
  58 |         this.code = code;
  59 |         return this;
  60 |     }
  61 | 
  62 | 	public RpcException setMessage(String message) {
  63 | 		this.message = message;
  64 | 		return this;
  65 | 	}
  66 | 
  67 |     @Override
  68 | 	public String getMessage() {
  69 |         return message;
  70 |     }
  71 | 
  72 | }



// ====== FILE: ./src/main/java/com/astro/exception/TokenException.java ======

   1 | package com.astro.exception;
   2 | 
   3 | 
   4 | import com.astro.constant.JiaRuHttpCode;
   5 | 
   6 | /**
   7 |  * 业务逻辑异常 Exception
   8 |  */
   9 | public final class TokenException extends RuntimeException {
  10 | 
  11 |     private static final long serialVersionUID = 4462646530730074145L;
  12 | 
  13 |     /**
  14 |      * 业务错误码
  15 |      *
  16 |      */
  17 |     private Integer code;
  18 |     /**
  19 |      * 错误提示
  20 |      */
  21 |     private String message;
  22 | 
  23 |     /**
  24 |      * 空构造方法，避免反序列化问题
  25 |      */
  26 |     public TokenException() {
  27 |     }
  28 | 
  29 |     public TokenException(Integer code, String message) {
  30 |         this.code = code;
  31 |         this.message = message;
  32 |     }
  33 | 
  34 | 	public TokenException(String message) {
  35 |         super(message);
  36 | 		this.code = JiaRuHttpCode.TOKEN_ERROR;
  37 | 		this.message = message;
  38 | 	}
  39 | 
  40 |     public Integer getCode() {
  41 |         return code;
  42 |     }
  43 | 
  44 |     public TokenException setCode(Integer code) {
  45 |         this.code = code;
  46 |         return this;
  47 |     }
  48 | 
  49 | 	public TokenException setMessage(String message) {
  50 | 		this.message = message;
  51 | 		return this;
  52 | 	}
  53 | 
  54 |     @Override
  55 | 	public String getMessage() {
  56 |         return message;
  57 |     }
  58 | 
  59 | }



// ====== FILE: ./src/main/java/com/astro/exception/PubPayException.java ======

   1 | package com.astro.exception;
   2 | 
   3 | 
   4 | import com.astro.constant.RpcCode;
   5 | 
   6 | /**
   7 |  * 流程处理异常 Exception
   8 |  */
   9 | public final class PubPayException extends RuntimeException {
  10 | 
  11 |     private static final long serialVersionUID = 3771622198365372253L;
  12 | 
  13 |     /**
  14 |      * 业务错误码
  15 |      *
  16 |      */
  17 |     private Integer code;
  18 |     /**
  19 |      * 错误提示
  20 |      */
  21 |     private String message;
  22 | 
  23 |     /**
  24 |      * 空构造方法，避免反序列化问题
  25 |      */
  26 |     public PubPayException() {
  27 |     }
  28 | 
  29 |     public PubPayException(Integer code, String message) {
  30 |         this.code = code;
  31 |         this.message = message;
  32 |     }
  33 | 
  34 | 	public PubPayException(String message) {
  35 |         super(message);
  36 | 		this.code = RpcCode.BIZ_ERROR;
  37 | 		this.message = message;
  38 | 	}
  39 | 
  40 |     public Integer getCode() {
  41 |         return code;
  42 |     }
  43 | 
  44 |     public PubPayException setCode(Integer code) {
  45 |         this.code = code;
  46 |         return this;
  47 |     }
  48 | 
  49 | 	public PubPayException setMessage(String message) {
  50 | 		this.message = message;
  51 | 		return this;
  52 | 	}
  53 | 
  54 | 	public String getMessage() {
  55 |         return message;
  56 |     }
  57 | 
  58 | }



// ====== FILE: ./src/main/java/com/astro/exception/BizException.java ======

   1 | package com.astro.exception;
   2 | 
   3 | 
   4 | import com.astro.constant.RpcCode;
   5 | 
   6 | /**
   7 |  * 业务逻辑异常 Exception
   8 |  */
   9 | public final class BizException extends RuntimeException {
  10 | 
  11 |     private static final long serialVersionUID = 4462646530730074145L;
  12 | 
  13 |     /**
  14 |      * 业务错误码
  15 |      *
  16 |      */
  17 |     private Integer code;
  18 |     /**
  19 |      * 错误提示
  20 |      */
  21 |     private String message;
  22 | 
  23 |     /**
  24 |      * 空构造方法，避免反序列化问题
  25 |      */
  26 |     public BizException() {
  27 |     }
  28 | 
  29 |     public BizException(Integer code, String message) {
  30 |         this.code = code;
  31 |         this.message = message;
  32 |     }
  33 | 
  34 | 	public BizException(String message) {
  35 |         super(message);
  36 | 		this.code = RpcCode.BIZ_ERROR;
  37 | 		this.message = message;
  38 | 	}
  39 | 
  40 |     public Integer getCode() {
  41 |         return code;
  42 |     }
  43 | 
  44 |     public BizException setCode(Integer code) {
  45 |         this.code = code;
  46 |         return this;
  47 |     }
  48 | 
  49 | 	public BizException setMessage(String message) {
  50 | 		this.message = message;
  51 | 		return this;
  52 | 	}
  53 | 
  54 |     @Override
  55 | 	public String getMessage() {
  56 |         return message;
  57 |     }
  58 | 
  59 | }



// ====== FILE: ./src/main/java/com/astro/pojo/AstroOrderDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.*;
   4 | import lombok.Data;
   5 | 
   6 | import java.math.BigDecimal;
   7 | import java.time.LocalDateTime;
   8 | 
   9 | @Data
  10 | @TableName("astro_order")
  11 | public class AstroOrderDo {
  12 |     
  13 |     /**
  14 |      * 主键id
  15 |      */
  16 |     private Long id;
  17 |     
  18 |     /**
  19 |      * 订单id
  20 |      */
  21 |     @TableId(value = "order_id", type = IdType.ASSIGN_ID)
  22 |     private Long orderId;
  23 |     
  24 |     /**
  25 |      * 用户地址
  26 |      */
  27 |     private String userUrl;
  28 |     
  29 |     /**
  30 |      * 支付金额
  31 |      */
  32 |     private BigDecimal payAmount;
  33 | 
  34 |     /**
  35 |      * mint 数量
  36 |      */
  37 |     private Integer mintAmount;
  38 |     
  39 |     /**
  40 |      * 支付状态{1、paying为正在支付、2、success（paid）为成功、3 received 为已到账}
  41 |      */
  42 |     private Integer payStatus;
  43 |     
  44 |     /**
  45 |      * 区块链交易id
  46 |      */
  47 |     private String txId;
  48 | 
  49 |     /**
  50 |      * nft 编号列表
  51 |      */
  52 |     private String nftList;
  53 | 
  54 |     /**
  55 |      * utxo hash 列表
  56 |      */
  57 |     private String utxoList;
  58 | 
  59 |     /**
  60 |      * 支付身份 0 OG、1 WL、2 PUB
  61 |      */
  62 |     private Integer style;
  63 | 
  64 |     /**
  65 |      * 支付源 origin
  66 |      */
  67 |     private String payOrigin;
  68 | 
  69 |     /**
  70 |      * 创建时间
  71 |      */
  72 |     @TableField(fill = FieldFill.INSERT)
  73 |     private LocalDateTime insertTime = LocalDateTime.now();
  74 | 
  75 |     /**
  76 |      * 更新时间
  77 |      */
  78 |     @TableField(fill = FieldFill.INSERT_UPDATE)
  79 |     private LocalDateTime updateTime = LocalDateTime.now();
  80 | }



// ====== FILE: ./src/main/java/com/astro/pojo/TaxNftTx.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.FieldFill;
   4 | import com.baomidou.mybatisplus.annotation.TableField;
   5 | import com.baomidou.mybatisplus.annotation.TableName;
   6 | import lombok.AllArgsConstructor;
   7 | import lombok.Data;
   8 | import lombok.NoArgsConstructor;
   9 | 
  10 | import java.math.BigDecimal;
  11 | import java.sql.Timestamp;
  12 | import java.time.LocalDateTime;
  13 | 
  14 | @Data
  15 | @AllArgsConstructor
  16 | @NoArgsConstructor
  17 | @TableName("tax_nft_tx")
  18 | public class TaxNftTx {
  19 | 
  20 |     /**
  21 |      * 主键id
  22 |      */
  23 |     private Integer id;
  24 | 
  25 |     /**
  26 |      * 订单id
  27 |      */
  28 |     private Long orderId;
  29 | 
  30 |     /**
  31 |      * nft 编号
  32 |      */
  33 |     private Integer nftId;
  34 | 
  35 |     /**
  36 |      * 交易金额
  37 |      */
  38 |     private String txAmt;
  39 | 
  40 |     /**
  41 |      * nft 拥有者钱包地址
  42 |      */
  43 |     private String address;
  44 | 
  45 |     /**
  46 |      * 交税状态，1为已缴税，0为未缴税
  47 |      */
  48 |     private Integer taxStatus;
  49 | 
  50 |     /**
  51 |      * 其他字段
  52 |      */
  53 |     private String otherJson;
  54 | 
  55 | 
  56 | 
  57 |     /**
  58 |      * 是否删除，0：正常，1：删除
  59 |      */
  60 |     private boolean isDeleted;
  61 | 
  62 |     // 省略构造函数、getter和setter
  63 | 
  64 |     /**
  65 |      * 创建时间
  66 |      */
  67 |     @TableField(fill = FieldFill.INSERT)
  68 |     private LocalDateTime insertTime = LocalDateTime.now();
  69 | 
  70 |     /**
  71 |      * 更新时间
  72 |      */
  73 |     @TableField(fill = FieldFill.INSERT_UPDATE)
  74 |     private LocalDateTime updateTime = LocalDateTime.now();
  75 | 
  76 | }



// ====== FILE: ./src/main/java/com/astro/pojo/PayCallBackLogDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.*;
   4 | import lombok.Data;
   5 | 
   6 | import java.math.BigDecimal;
   7 | import java.time.LocalDateTime;
   8 | 
   9 | @Data
  10 | @TableName("astro_pay_call_back_log")
  11 | public class PayCallBackLogDo {
  12 | 
  13 |     /**
  14 |      * 主键id
  15 |      */
  16 |     private Long id;
  17 | 
  18 |     /**
  19 |      * 订单id
  20 |      */
  21 |     @TableId(value = "order_id", type = IdType.ASSIGN_ID)
  22 |     private Long orderId;
  23 | 
  24 |     /**
  25 |      * 用户地址
  26 |      */
  27 |     private String address;
  28 | 
  29 |     /**
  30 |      * 支付金额
  31 |      */
  32 |     private BigDecimal payAmount;
  33 | 
  34 |     /**
  35 |      * 区块链支付金额
  36 |      */
  37 |     private String chainPayAmount;
  38 | 
  39 |     /**
  40 |      * mint 数量
  41 |      */
  42 |     private Integer mintAmount;
  43 | 
  44 |     /**
  45 |      * 支付状态{1、paying为正在支付、2、success（paid）为成功、3 received 为已到账}
  46 |      */
  47 |     private Integer payStatus;
  48 | 
  49 |     /**
  50 |      * 区块链交易id
  51 |      */
  52 |     private String txId;
  53 | 
  54 |     /**
  55 |      * nft 编号列表
  56 |      */
  57 |     private String nftList;
  58 | 
  59 |     /**
  60 |      * utxo hash 列表
  61 |      */
  62 |     private String utxoList;
  63 | 
  64 |     /**
  65 |      * 支付身份 0 OG、1 WL、2 PUB
  66 |      */
  67 |     private Integer style;
  68 | 
  69 |     /**
  70 |      * 支付源 origin
  71 |      */
  72 |     private String payOrigin;
  73 | 
  74 |     /**
  75 |      * 创建时间
  76 |      */
  77 |     @TableField(fill = FieldFill.INSERT)
  78 |     private LocalDateTime insertTime = LocalDateTime.now();
  79 | 
  80 |     /**
  81 |      * 更新时间
  82 |      */
  83 |     @TableField(fill = FieldFill.INSERT_UPDATE)
  84 |     private LocalDateTime updateTime = LocalDateTime.now();
  85 | }
  86 | 



// ====== FILE: ./src/main/java/com/astro/pojo/AstroPubPayLogDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.*;
   4 | import lombok.Data;
   5 | 
   6 | import java.time.LocalDateTime;
   7 | 
   8 | @Data
   9 | @TableName("astro_pub_pay_log")
  10 | public class AstroPubPayLogDo {
  11 | 
  12 |     /**
  13 |      * 主键id
  14 |      */
  15 |     @TableId(type = IdType.AUTO)
  16 |     private Long id;
  17 | 
  18 |     /**
  19 |      * 用户url
  20 |      */
  21 |     private String userUrl;
  22 | 
  23 |     /**
  24 |      * 公售购买数量
  25 |      */
  26 |     private Integer mintAmount;
  27 | 
  28 |     /**
  29 |      * 其他字段
  30 |      */
  31 |     private String otherJson;
  32 | 
  33 |     /**
  34 |      * 创建时间
  35 |      */
  36 |     @TableField(fill = FieldFill.INSERT)
  37 |     private LocalDateTime insertTime = LocalDateTime.now();
  38 | 
  39 |     /**
  40 |      * 更新时间
  41 |      */
  42 |     @TableField(fill = FieldFill.INSERT_UPDATE)
  43 |     private LocalDateTime updateTime = LocalDateTime.now();
  44 | }



// ====== FILE: ./src/main/java/com/astro/pojo/RichRewardBaseDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.TableName;
   4 | import lombok.AllArgsConstructor;
   5 | import lombok.Data;
   6 | import lombok.NoArgsConstructor;
   7 | 
   8 | import java.time.LocalDate;
   9 | 
  10 | @Data
  11 | @AllArgsConstructor
  12 | @NoArgsConstructor
  13 | @TableName("rich_reward_base")
  14 | public class RichRewardBaseDo extends BaseEntity {
  15 | 
  16 |     /**
  17 |      * 当天矿场收益
  18 |      */
  19 |     private Long rewBase;
  20 | 
  21 |     /**
  22 |      * 收益日期
  23 |      */
  24 |     private LocalDate rewData;
  25 | 
  26 | }


// ====== FILE: ./src/main/java/com/astro/pojo/InviteCodeDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.astro.utils.BaseEntity;
   4 | import com.baomidou.mybatisplus.annotation.TableName;
   5 | import lombok.Data;
   6 | 
   7 | 
   8 | /**
   9 |  *  DDL :
  10 |  * CREATE TABLE `invite_code` (
  11 |  *   `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键id',
  12 |  *   `share_url` varchar(64) NOT NULL COMMENT '发起分享链接用户的 url',
  13 |  *   `invited_url` varchar(64) NOT NULL COMMENT '被邀请用户的 url',
  14 |  *   `invite_code` varchar(64) DEFAULT NULL COMMENT '邀请码',
  15 |  *   `status` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否使用，0：未使用，1：已使用',
  16 |  *   `other_json` text COMMENT '其他字段',
  17 |  *   `insert_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  18 |  *   `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  19 |  *   `is_deleted` bit(1) NOT NULL COMMENT '是否删除，0：正常，1：删除',
  20 |  *   PRIMARY KEY (`id`) USING BTREE,
  21 |  *   UNIQUE KEY `uk_share_url` (`share_url`) USING BTREE
  22 |  * ) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='主页链接分享邀请码';
  23 |  */
  24 | @Data
  25 | @TableName("invite_code")
  26 | public class InviteCodeDo extends BaseEntity {
  27 | 
  28 |     private String shareUrl;
  29 | 
  30 |     private String invitedUrl;
  31 | 
  32 |     private Long inviteCode;
  33 | 
  34 |     private Integer status;
  35 | 
  36 |     private String otherJson;
  37 | 
  38 | }



// ====== FILE: ./src/main/java/com/astro/pojo/TaxAllNftDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.astro.utils.BaseEntity;
   4 | import com.baomidou.mybatisplus.annotation.TableName;
   5 | import lombok.AllArgsConstructor;
   6 | import lombok.Data;
   7 | import lombok.NoArgsConstructor;
   8 | 
   9 | 
  10 | @Data
  11 | @AllArgsConstructor
  12 | @NoArgsConstructor
  13 | @TableName("tax_all_nft")
  14 | public class TaxAllNftDo extends BaseEntity {
  15 | 
  16 |     /**
  17 |      * nft 内部 id
  18 |      */
  19 |     private Long astroseaId;
  20 | 
  21 |     /**
  22 |      * 数字编号
  23 |      */
  24 |     private Integer nftId;
  25 | 
  26 |     /**
  27 |      * 名称
  28 |      */
  29 |     private String name;
  30 | 
  31 |     /**
  32 |      * 创世文本
  33 |      */
  34 |     private String gtId;
  35 | 
  36 | 
  37 |     /**
  38 |      * utxo数组
  39 |      */
  40 |     private String nftUtxo;
  41 | 
  42 |     /**
  43 |      * 稀有度
  44 |      */
  45 |     private String rarity;
  46 | 
  47 |     /**
  48 |      * OSS url
  49 |      */
  50 |     private String imgUrl;
  51 | 
  52 |     /**
  53 |      * 星际文件存储 url
  54 |      */
  55 |     private String ipfsUrl;
  56 | 
  57 |     /**
  58 |      * 所属钱包地址
  59 |      */
  60 |     private String address;
  61 | 
  62 |     /**
  63 |      * 缴税状态
  64 |      */
  65 |     private Integer taxStatus;
  66 | 
  67 |     /**
  68 |      * 售卖状态
  69 |      */
  70 |     private Integer sellStatus;
  71 | 
  72 |     private String otherJson;
  73 | 
  74 | }



// ====== FILE: ./src/main/java/com/astro/pojo/TestGood.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.TableName;
   4 | import lombok.Data;
   5 | 
   6 | @TableName("good")
   7 | @Data
   8 | public class TestGood {
   9 | 
  10 |     private Long id;
  11 | 
  12 |     private Long goodId;
  13 | 
  14 |     private Integer amount;
  15 | 
  16 |     private String json1;
  17 | 
  18 | }


// ====== FILE: ./src/main/java/com/astro/pojo/BaseEntity.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.TableField;
   4 | import com.baomidou.mybatisplus.annotation.TableLogic;
   5 | 
   6 | import java.time.LocalDateTime;
   7 | 
   8 | /**
   9 |  * 基础POJO类
  10 |  *
  11 |  **/
  12 | public class BaseEntity {
  13 | 
  14 |     private Long id;
  15 | 
  16 |     private LocalDateTime insertTime;
  17 | 
  18 |     private LocalDateTime updateTime;
  19 | 
  20 |     @TableField("is_deleted")
  21 |     @TableLogic
  22 |     private Boolean deleted;
  23 | 
  24 |     public Long getId() {
  25 |         return id;
  26 |     }
  27 | 
  28 |     public void setId(Long id) {
  29 |         this.id = id;
  30 |     }
  31 | 
  32 |     public LocalDateTime getInsertTime() {
  33 |         return insertTime;
  34 |     }
  35 | 
  36 |     public void setInsertTime(LocalDateTime insertTime) {
  37 |         this.insertTime = insertTime;
  38 |     }
  39 | 
  40 |     public LocalDateTime getUpdateTime() {
  41 |         return updateTime;
  42 |     }
  43 | 
  44 |     public void setUpdateTime(LocalDateTime updateTime) {
  45 |         this.updateTime = updateTime;
  46 |     }
  47 | 
  48 |     public Boolean getDeleted() {
  49 |         return deleted;
  50 |     }
  51 | 
  52 |     public void setDeleted(Boolean deleted) {
  53 |         this.deleted = deleted;
  54 |     }
  55 | }



// ====== FILE: ./src/main/java/com/astro/pojo/RichHolderDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.TableName;
   4 | import lombok.AllArgsConstructor;
   5 | import lombok.Data;
   6 | import lombok.NoArgsConstructor;
   7 | 
   8 | @Data
   9 | @AllArgsConstructor
  10 | @NoArgsConstructor
  11 | @TableName("rich_holder")
  12 | public class RichHolderDo extends BaseEntity {
  13 | 
  14 |     /**
  15 |      * 钱包地址
  16 |      */
  17 |     private String address;
  18 | 
  19 |     /**
  20 |      * 稀有度1
  21 |      */
  22 |     private Integer lv1amt;
  23 | 
  24 |     /**
  25 |      * 稀有度2
  26 |      */
  27 |     private Integer lv2amt;
  28 | 
  29 |     /**
  30 |      * 稀有度3
  31 |      */
  32 |     private Integer lv3amt;
  33 | 
  34 |     /**
  35 |      * 稀有度4
  36 |      */
  37 |     private Integer lv4amt;
  38 | 
  39 |     /**
  40 |      * 稀有度5
  41 |      */
  42 |     private Integer lv5amt;
  43 | 
  44 |     /**
  45 |      * 稀有度6
  46 |      */
  47 |     private Integer lv6amt;
  48 | }


// ====== FILE: ./src/main/java/com/astro/pojo/MintPayLogDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.*;
   4 | import lombok.Data;
   5 | 
   6 | import java.math.BigDecimal;
   7 | import java.time.LocalDateTime;
   8 | 
   9 | @Data
  10 | @TableName("astro_mint_pay_log")
  11 | public class MintPayLogDo {
  12 | 
  13 |     /**
  14 |      * 主键id
  15 |      */
  16 |     private Long id;
  17 | 
  18 |     /**
  19 |      * 订单id
  20 |      */
  21 |     @TableId(value = "order_id", type = IdType.ASSIGN_ID)
  22 |     private Long orderId;
  23 | 
  24 |     /**
  25 |      * 用户地址
  26 |      */
  27 |     private String address;
  28 | 
  29 |     /**
  30 |      * 支付金额
  31 |      */
  32 |     private BigDecimal payAmount;
  33 | 
  34 |     /**
  35 |      * 区块链支付金额
  36 |      */
  37 |     private String chainPayAmount;
  38 | 
  39 |     /**
  40 |      * mint 数量
  41 |      */
  42 |     private Integer mintAmount;
  43 | 
  44 |     /**
  45 |      * 支付状态{1、paying为正在支付、2、success（paid）为成功、3 received 为已到账}
  46 |      */
  47 |     private Integer payStatus;
  48 | 
  49 |     /**
  50 |      * 区块链交易id
  51 |      */
  52 |     private String txId;
  53 | 
  54 |     /**
  55 |      * nft 编号列表
  56 |      */
  57 |     private String nftList;
  58 | 
  59 |     /**
  60 |      * utxo hash 列表
  61 |      */
  62 |     private String utxoList;
  63 | 
  64 |     /**
  65 |      * 支付身份 0 OG、1 WL、2 PUB
  66 |      */
  67 |     private Integer style;
  68 | 
  69 |     /**
  70 |      * 支付源 origin
  71 |      */
  72 |     private String payOrigin;
  73 | 
  74 |     /**
  75 |      * 创建时间
  76 |      */
  77 |     @TableField(fill = FieldFill.INSERT)
  78 |     private LocalDateTime insertTime = LocalDateTime.now();
  79 | 
  80 |     /**
  81 |      * 更新时间
  82 |      */
  83 |     @TableField(fill = FieldFill.INSERT_UPDATE)
  84 |     private LocalDateTime updateTime = LocalDateTime.now();
  85 | }



// ====== FILE: ./src/main/java/com/astro/pojo/AstroWlPayLogDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.*;
   4 | import lombok.Data;
   5 | 
   6 | import java.time.LocalDateTime;
   7 | /**
   8 |  * NFT WL 白名单购买日志表
   9 |  */
  10 | @Data
  11 | @TableName("astro_wl_pay_log")
  12 | public class AstroWlPayLogDo {
  13 | 
  14 |     /**
  15 |      * 主键id
  16 |      */
  17 |     @TableId(type = IdType.AUTO)
  18 |     private Long id;
  19 | 
  20 |     /**
  21 |      * 用户url
  22 |      */
  23 |     private String userUrl;
  24 | 
  25 |     /**
  26 |      * 支付时间
  27 |      */
  28 |     private String payTime;
  29 | 
  30 |     /**
  31 |      * 其他字段
  32 |      */
  33 |     private String otherJson;
  34 | 
  35 |     /**
  36 |      * 创建时间
  37 |      */
  38 |     @TableField(fill = FieldFill.INSERT)
  39 |     private LocalDateTime insertTime = LocalDateTime.now();
  40 | 
  41 |     /**
  42 |      * 更新时间
  43 |      */
  44 |     @TableField(fill = FieldFill.INSERT_UPDATE)
  45 |     private LocalDateTime updateTime = LocalDateTime.now();
  46 | }



// ====== FILE: ./src/main/java/com/astro/pojo/TaxAllNftDoCopy.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.astro.utils.BaseEntity;
   4 | import com.baomidou.mybatisplus.annotation.TableName;
   5 | import lombok.AllArgsConstructor;
   6 | import lombok.Data;
   7 | import lombok.NoArgsConstructor;
   8 | 
   9 | @Data
  10 | @AllArgsConstructor
  11 | @NoArgsConstructor
  12 | @TableName("tax_all_nft_copy")
  13 | public class TaxAllNftDoCopy extends BaseEntity {
  14 | 
  15 |     /**
  16 |      * nft 内部 id
  17 |      */
  18 |     private Long astroseaId;
  19 | 
  20 |     /**
  21 |      * 数字编号
  22 |      */
  23 |     private Integer nftId;
  24 | 
  25 |     /**
  26 |      * 名称
  27 |      */
  28 |     private String name;
  29 | 
  30 |     /**
  31 |      * 创世文本
  32 |      */
  33 |     private String gtId;
  34 | 
  35 | 
  36 |     /**
  37 |      * utxo数组
  38 |      */
  39 |     private String nftUtxo;
  40 | 
  41 |     /**
  42 |      * 稀有度
  43 |      */
  44 |     private String rarity;
  45 | 
  46 |     /**
  47 |      * OSS url
  48 |      */
  49 |     private String imgUrl;
  50 | 
  51 |     /**
  52 |      * 星际文件存储 url
  53 |      */
  54 |     private String ipfsUrl;
  55 | 
  56 |     /**
  57 |      * 所属钱包地址
  58 |      */
  59 |     private String address;
  60 | 
  61 |     /**
  62 |      * 缴税状态
  63 |      */
  64 |     private Integer taxStatus;
  65 | 
  66 |     /**
  67 |      * 售卖状态
  68 |      */
  69 |     private Integer sellStatus;
  70 | 
  71 |     private String otherJson;
  72 | 
  73 | }



// ====== FILE: ./src/main/java/com/astro/pojo/AstroOgPayLogDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.*;
   4 | import lombok.Data;
   5 | 
   6 | import java.time.LocalDateTime;
   7 | /**
   8 |  * NFT OG 元老购买日志表
   9 |  */
  10 | @Data
  11 | @TableName("astro_og_pay_log")
  12 | public class AstroOgPayLogDo {
  13 | 
  14 |     /**
  15 |      * 主键id
  16 |      */
  17 |     @TableId(type = IdType.AUTO)
  18 |     private Long id;
  19 | 
  20 |     /**
  21 |      * 用户url
  22 |      */
  23 |     private String userUrl;
  24 | 
  25 |     /**
  26 |      * 支付时间
  27 |      */
  28 |     private String payTime;
  29 | 
  30 |     /**
  31 |      * 其他字段
  32 |      */
  33 |     private String otherJson;
  34 | 
  35 |     /**
  36 |      * 创建时间
  37 |      */
  38 |     @TableField(fill = FieldFill.INSERT)
  39 |     private LocalDateTime insertTime = LocalDateTime.now();
  40 | 
  41 |     /**
  42 |      * 更新时间
  43 |      */
  44 |     @TableField(fill = FieldFill.INSERT_UPDATE)
  45 |     private LocalDateTime updateTime = LocalDateTime.now();
  46 | }



// ====== FILE: ./src/main/java/com/astro/pojo/MintCallBackLogDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.*;
   4 | import lombok.Data;
   5 | 
   6 | import java.math.BigDecimal;
   7 | import java.time.LocalDateTime;
   8 | 
   9 | @Data
  10 | @TableName("astro_mint_call_back_log")
  11 | public class MintCallBackLogDo {
  12 | 
  13 |     /**
  14 |      * 主键id
  15 |      */
  16 |     private Long id;
  17 | 
  18 |     /**
  19 |      * 订单id
  20 |      */
  21 |     @TableId(value = "order_id", type = IdType.ASSIGN_ID)
  22 |     private Long orderId;
  23 | 
  24 |     /**
  25 |      * 用户地址
  26 |      */
  27 |     private String address;
  28 | 
  29 |     /**
  30 |      * 支付金额
  31 |      */
  32 |     private BigDecimal payAmount;
  33 | 
  34 |     /**
  35 |      * mint 数量
  36 |      */
  37 |     private Integer mintAmount;
  38 | 
  39 |     /**
  40 |      * 支付状态{1、paying为正在支付、2、success（paid）为成功、3 received 为已到账}
  41 |      */
  42 |     private Integer payStatus;
  43 | 
  44 |     /**
  45 |      * 区块链交易id
  46 |      */
  47 |     private String txId;
  48 | 
  49 |     /**
  50 |      * nft 编号列表
  51 |      */
  52 |     private String nftList;
  53 | 
  54 |     /**
  55 |      * utxo hash 列表
  56 |      */
  57 |     private String utxoList;
  58 | 
  59 |     /**
  60 |      * 支付身份 0 OG、1 WL、2 PUB
  61 |      */
  62 |     private Integer style;
  63 | 
  64 |     /**
  65 |      * 支付源 origin
  66 |      */
  67 |     private String payOrigin;
  68 | 
  69 |     /**
  70 |      * 创建时间
  71 |      */
  72 |     @TableField(fill = FieldFill.INSERT)
  73 |     private LocalDateTime insertTime = LocalDateTime.now();
  74 | 
  75 |     /**
  76 |      * 更新时间
  77 |      */
  78 |     @TableField(fill = FieldFill.INSERT_UPDATE)
  79 |     private LocalDateTime updateTime = LocalDateTime.now();
  80 | }



// ====== FILE: ./src/main/java/com/astro/pojo/AstroAllPayLogDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.*;
   4 | import lombok.AllArgsConstructor;
   5 | import lombok.Data;
   6 | import lombok.NoArgsConstructor;
   7 | 
   8 | import java.math.BigDecimal;
   9 | import java.time.LocalDateTime;
  10 | import java.util.Date;
  11 | 
  12 | 
  13 | /**
  14 |  * NFT 购买总表
  15 |  */
  16 | @Data
  17 | @AllArgsConstructor
  18 | @NoArgsConstructor
  19 | @TableName("astro_all_pay_log")
  20 | public class AstroAllPayLogDo {
  21 | 
  22 |     /**
  23 |      * 主键id
  24 |      */
  25 |     @TableId(type = IdType.AUTO)
  26 |     private Long id;
  27 | 
  28 |     /**
  29 |      * 用户url
  30 |      */
  31 |     private String userUrl;
  32 | 
  33 |     /**
  34 |      * 支付金额
  35 |      */
  36 |     private BigDecimal payAmount;
  37 | 
  38 |     /**
  39 |      * 购买数量
  40 |      */
  41 |     private Integer mintAmount;
  42 | 
  43 |     /**
  44 |      * 用户类型：0 为public 、1为 og & wl 、2 为 og 、3为wl
  45 |      */
  46 |     private String userType;
  47 | 
  48 |     /**
  49 |      * 其他字段
  50 |      */
  51 |     private String otherJson;
  52 | 
  53 |     /**
  54 |      * 创建时间
  55 |      */
  56 |     @TableField(fill = FieldFill.INSERT)
  57 |     private LocalDateTime insertTime = LocalDateTime.now();
  58 | 
  59 |     /**
  60 |      * 更新时间
  61 |      */
  62 |     @TableField(fill = FieldFill.INSERT_UPDATE)
  63 |     private LocalDateTime updateTime = LocalDateTime.now();
  64 | 
  65 | 
  66 | }



// ====== FILE: ./src/main/java/com/astro/pojo/Tax1of1NftDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | 
   4 | import com.astro.utils.BaseEntity;
   5 | import com.baomidou.mybatisplus.annotation.TableName;
   6 | import lombok.AllArgsConstructor;
   7 | import lombok.Data;
   8 | import lombok.NoArgsConstructor;
   9 | 
  10 | 
  11 | @Data
  12 | @AllArgsConstructor
  13 | @NoArgsConstructor
  14 | @TableName("tax_1of1_nft")
  15 | public class Tax1of1NftDo extends BaseEntity {
  16 | 
  17 |     /**
  18 |      * nft 内部 id
  19 |      */
  20 |     private Long astroseaId;
  21 | 
  22 |     /**
  23 |      * 数字编号
  24 |      */
  25 |     private Integer nftId;
  26 | 
  27 |     /**
  28 |      * 名称
  29 |      */
  30 |     private String name;
  31 | 
  32 |     /**
  33 |      * 创世文本
  34 |      */
  35 |     private String gtId;
  36 | 
  37 | 
  38 |     /**
  39 |      * utxo数组
  40 |      */
  41 |     private String nftUtxo;
  42 | 
  43 |     /**
  44 |      * 稀有度
  45 |      */
  46 |     private String rarity;
  47 | 
  48 |     /**
  49 |      * url
  50 |      */
  51 |     private String imgUrl;
  52 | 
  53 |     /**
  54 |      * 星际文件存储 url
  55 |      */
  56 |     private String ipfsUrl;
  57 | 
  58 |     /**
  59 |      * 所属钱包地址
  60 |      */
  61 |     private String address;
  62 | 
  63 |     /**
  64 |      * 缴税状态
  65 |      */
  66 |     private Integer taxStatus;
  67 | 
  68 |     /**
  69 |      * 售卖状态
  70 |      */
  71 |     private Integer sellStatus;
  72 | 
  73 |     private String otherJson;
  74 | 
  75 | }
  76 | 



// ====== FILE: ./src/main/java/com/astro/pojo/OrderDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.TableName;
   4 | import lombok.AllArgsConstructor;
   5 | import lombok.Data;
   6 | import lombok.NoArgsConstructor;
   7 | 
   8 | import java.math.BigDecimal;
   9 | import java.time.LocalDateTime;
  10 | 
  11 | @Data
  12 | @AllArgsConstructor
  13 | @NoArgsConstructor
  14 | @TableName("rich_order")
  15 | public class OrderDo extends BaseEntity {
  16 | 
  17 |     /**
  18 |      * 订单ID
  19 |      */
  20 |     private Long richOrderId;
  21 | 
  22 |     /**
  23 |      * 钱包地址
  24 |      */
  25 |     private String address;
  26 | 
  27 |     /**
  28 |      * 订单时间
  29 |      */
  30 |     private LocalDateTime orderTime;
  31 | 
  32 |     /**
  33 |      * 奖励数量
  34 |      */
  35 |     private BigDecimal rewardAmt;
  36 | 
  37 |     /**
  38 |      * 状态
  39 |      */
  40 |     private Integer status;
  41 | 
  42 | }


// ====== FILE: ./src/main/java/com/astro/pojo/AstroOgListDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.*;
   4 | import lombok.Data;
   5 | 
   6 | import java.time.LocalDateTime;
   7 | /**
   8 |  * Astro 授权 OG 表
   9 |  */
  10 | @Data
  11 | @TableName("astro_og_list")
  12 | public class AstroOgListDo {
  13 | 
  14 |     /**
  15 |      * 主键id
  16 |      */
  17 |     @TableId(type = IdType.AUTO)
  18 |     private Long id;
  19 | 
  20 |     /**
  21 |      * 用户 url
  22 |      */
  23 |     private String userUrl;
  24 | 
  25 |     /**
  26 |      * 是否使用
  27 |      * 0：未使用，1： 正在支付，2: 狗🐶币已经上链到账
  28 |      */
  29 |     private Integer isUsed;
  30 | 
  31 |     /**
  32 |      * 其他字段
  33 |      */
  34 |     private String otherJson;
  35 | 
  36 |     /**
  37 |      * 创建时间
  38 |      */
  39 |     @TableField(fill = FieldFill.INSERT)
  40 |     private LocalDateTime insertTime = LocalDateTime.now();
  41 | 
  42 |     /**
  43 |      * 更新时间
  44 |      */
  45 |     @TableField(fill = FieldFill.INSERT_UPDATE)
  46 |     private LocalDateTime updateTime = LocalDateTime.now();
  47 | }



// ====== FILE: ./src/main/java/com/astro/pojo/NftIndexDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.astro.utils.BaseEntity;
   4 | import com.baomidou.mybatisplus.annotation.*;
   5 | import lombok.AllArgsConstructor;
   6 | import lombok.Data;
   7 | import lombok.NoArgsConstructor;
   8 | 
   9 | import java.time.LocalDateTime;
  10 | 
  11 | @Data
  12 | @AllArgsConstructor
  13 | @NoArgsConstructor
  14 | @TableName("nft_index")
  15 | public class NftIndexDo extends BaseEntity {
  16 | 
  17 |     /**
  18 |      * 地址
  19 |      */
  20 |     private String address;
  21 | 
  22 |     /**
  23 |      * nft utxo
  24 |      */
  25 |     private String utxo;
  26 | 
  27 |     /**
  28 |      * nft价格
  29 |      */
  30 |     private String value;
  31 | 
  32 |     /**
  33 |      * nft index
  34 |      */
  35 |     private Integer utxoIndex;
  36 | 
  37 |     /**
  38 |      * 其他字段
  39 |      */
  40 |     private String otherJson;
  41 | 
  42 | }



// ====== FILE: ./src/main/java/com/astro/pojo/ResenderOrderDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | 
   4 | import com.baomidou.mybatisplus.annotation.*;
   5 | import lombok.AllArgsConstructor;
   6 | import lombok.Data;
   7 | import lombok.NoArgsConstructor;
   8 | 
   9 | import java.math.BigDecimal;
  10 | import java.time.LocalDateTime;
  11 | 
  12 | @Data
  13 | @TableName("astro_resender_order")
  14 | public class ResenderOrderDo {
  15 | 
  16 |     /**
  17 |      * 主键id
  18 |      */
  19 |     private Long id;
  20 | 
  21 |     /**
  22 |      * 订单id
  23 |      */
  24 |     @TableId(value = "order_id", type = IdType.ASSIGN_ID)
  25 |     private Long orderId;
  26 | 
  27 |     /**
  28 |      * 用户地址
  29 |      */
  30 |     private String userUrl;
  31 | 
  32 |     /**
  33 |      * 支付金额
  34 |      */
  35 |     private BigDecimal payAmount;
  36 | 
  37 |     /**
  38 |      * mint 数量
  39 |      */
  40 |     private Integer mintAmount;
  41 | 
  42 |     /**
  43 |      * 支付状态{1、paying为正在支付、2、success（paid）为成功、3 received 为已到账}
  44 |      */
  45 |     private Integer payStatus;
  46 | 
  47 |     /**
  48 |      * 区块链交易id
  49 |      */
  50 |     private String txId;
  51 | 
  52 |     /**
  53 |      * nft 编号列表
  54 |      */
  55 |     private String nftList;
  56 | 
  57 |     /**
  58 |      * utxo hash 列表
  59 |      */
  60 |     private String utxoList;
  61 | 
  62 |     /**
  63 |      * 支付身份 0 OG、1 WL、2 PUB
  64 |      */
  65 |     private Integer style;
  66 | 
  67 |     /**
  68 |      * 支付源 origin
  69 |      */
  70 |     private String payOrigin;
  71 | 
  72 |     /**
  73 |      * 创建时间
  74 |      */
  75 |     @TableField(fill = FieldFill.INSERT)
  76 |     private LocalDateTime insertTime = LocalDateTime.now();
  77 | 
  78 |     /**
  79 |      * 更新时间
  80 |      */
  81 |     @TableField(fill = FieldFill.INSERT_UPDATE)
  82 |     private LocalDateTime updateTime = LocalDateTime.now();
  83 | }



// ====== FILE: ./src/main/java/com/astro/pojo/AstroWlListDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.*;
   4 | import com.baomidou.mybatisplus.annotation.TableName;
   5 | import lombok.Data;
   6 | 
   7 | import java.time.LocalDateTime;
   8 | /**
   9 |  * Astro 授权 WL 表
  10 |  */
  11 | @Data
  12 | @TableName("astro_wl_list")
  13 | public class AstroWlListDo {
  14 | 
  15 |     /**
  16 |      * 主键id
  17 |      */
  18 |     @TableId(type = IdType.AUTO)
  19 |     private Long id;
  20 | 
  21 |     /**
  22 |      * 用户 url
  23 |      */
  24 |     private String userUrl;
  25 | 
  26 |     /**
  27 |      * 是否使用
  28 |      * 0：未使用，1：mint 已支付，2: 狗🐶币已经上链到账
  29 |      */
  30 |     private Integer isUsed;
  31 | 
  32 |     /**
  33 |      * 其他字段
  34 |      */
  35 |     private String otherJson;
  36 | 
  37 |     /**
  38 |      * 创建时间
  39 |      */
  40 |     @TableField(fill = FieldFill.INSERT)
  41 |     private LocalDateTime insertTime = LocalDateTime.now();
  42 | 
  43 |     /**
  44 |      * 更新时间
  45 |      */
  46 |     @TableField(fill = FieldFill.INSERT_UPDATE)
  47 |     private LocalDateTime updateTime = LocalDateTime.now();
  48 | }



// ====== FILE: ./src/main/java/com/astro/pojo/RichRewardLogDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.baomidou.mybatisplus.annotation.TableName;
   4 | import lombok.AllArgsConstructor;
   5 | import lombok.Data;
   6 | import lombok.NoArgsConstructor;
   7 | 
   8 | import java.math.BigDecimal;
   9 | import java.time.LocalDate;
  10 | import java.time.LocalDateTime;
  11 | 
  12 | @Data
  13 | @AllArgsConstructor
  14 | @NoArgsConstructor
  15 | @TableName("rich_reward_log")
  16 | public class RichRewardLogDo extends BaseEntity {
  17 | 
  18 |     /**
  19 |      * 用户钱包地址
  20 |      */
  21 |     private String address;
  22 | 
  23 |     /**
  24 |      * 累加收益，领取后置 0
  25 |      */
  26 |     private BigDecimal totalReward;
  27 | 
  28 |     /**
  29 |      * 收益最后累加时间
  30 |      */
  31 |     private LocalDate updateReward;
  32 | 
  33 |     /**
  34 |      * 最后领取日期
  35 |      */
  36 |     private LocalDate latest;
  37 | 
  38 |     /**
  39 |      * 最后领取具体时间
  40 |      */
  41 |     private LocalDateTime latestDetail;
  42 | 
  43 | }



// ====== FILE: ./src/main/java/com/astro/pojo/SenderOrderDo.java ======

   1 | package com.astro.pojo;
   2 | 
   3 | import com.astro.utils.BaseEntity;
   4 | import lombok.Data;
   5 | 
   6 | @Data
   7 | public class SenderOrderDo extends BaseEntity {
   8 | }



// ====== FILE: ./src/main/java/com/astro/interceptor/JiaRuExceptionHandler.java ======

   1 | package com.astro.interceptor;
   2 | 
   3 | 
   4 | import cn.hutool.http.HttpException;
   5 | import com.astro.constant.HttpCode;
   6 | import com.astro.exception.BizException;
   7 | import com.astro.exception.PubPayException;
   8 | import com.astro.exception.RpcException;
   9 | import com.astro.exception.TokenException;
  10 | import com.astro.response.Response;
  11 | import lombok.extern.slf4j.Slf4j;
  12 | 
  13 | import org.slf4j.Logger;
  14 | import org.slf4j.LoggerFactory;
  15 | import org.springframework.web.bind.annotation.ExceptionHandler;
  16 | import org.springframework.web.bind.annotation.RestControllerAdvice;
  17 | 
  18 | import java.sql.SQLException;
  19 | 
  20 | @Slf4j
  21 | @RestControllerAdvice(basePackages = {"com.astrosea.controller"})
  22 | public class JiaRuExceptionHandler {
  23 | 
  24 |     private static final Logger logger = LoggerFactory.getLogger(JiaRuExceptionHandler.class);
  25 | 
  26 | 
  27 |     /**
  28 |      * 登陆异常处理
  29 |      *
  30 |      * 没有token、token 过期、token 不合法
  31 |      *
  32 |      * @param e 未知异常
  33 |      * @return Response
  34 |      */
  35 |     @ExceptionHandler(TokenException.class)
  36 |     public Response<?> tokenException(TokenException e) {
  37 |         return Response.error(e.getCode(), e.getMessage());
  38 |     }
  39 | 
  40 | 
  41 |     /**
  42 |      * 公售处理异常处理
  43 |      *
  44 |      * @param e 流程处理异常
  45 |      * @return Response
  46 |      */
  47 |     @ExceptionHandler(PubPayException.class)
  48 |     public Response<?> handleProcessException(PubPayException e) {
  49 |         return Response.error(e.getCode(), e.getMessage());
  50 |     }
  51 | 
  52 |     /**
  53 |      * RPC服务异常处理
  54 |      *
  55 |      * @param e RPC服务异常
  56 |      * @return Response
  57 |      */
  58 |     @ExceptionHandler(RpcException.class)
  59 |     public Response<?> handleRpcException(RpcException e) {
  60 |         return Response.error(e.getCode(), e.getMessage());
  61 |     }
  62 | 
  63 | 
  64 |     /**
  65 |      * 处理SQL异常
  66 |      *
  67 |      * @param e SQL异常
  68 |      * @return Response
  69 |      */
  70 |     @ExceptionHandler(SQLException.class)
  71 |     public Response<?> handleSQLException(SQLException e) {
  72 |         log.error("SQL异常：", e);
  73 |         return Response.error(HttpCode.MYSQL_ERROR_5001, "数据库操作异常：" + e.getMessage());
  74 |     }
  75 | 
  76 |     /**
  77 |      * 处理SQL异常
  78 |      *
  79 |      * @param e SQL异常
  80 |      * @return Response
  81 |      */
  82 |     @ExceptionHandler(HttpException.class)
  83 |     public Response<?> handleSQLException(HttpException e) {
  84 |         log.error("SQL异常：", e);
  85 |         return Response.error(HttpCode.HTTP_ERROR_5002, "http 异常：" + e.getMessage());
  86 |     }
  87 | 
  88 | 
  89 |     /**
  90 |      * 未知异常处理
  91 |      *
  92 |      * @param e 未知异常
  93 |      * @return Response
  94 |      */
  95 |     @ExceptionHandler(Exception.class)
  96 |     public Response<?> handleUnknownException(Exception e) {
  97 |         log.info("系统异常日志：{}", e);
  98 |         return Response.error(HttpCode.INNER_ERROR_5000 , "系统异常"+e);
  99 |     }
 100 | 
 101 | 
 102 | 
 103 | }


// ====== FILE: ./src/main/java/com/astro/interceptor/RefreshTokenInterceptor.java ======

   1 | package com.astro.interceptor;
   2 | 
   3 | 
   4 | import cn.hutool.core.util.StrUtil;
   5 | import com.astro.constant.HttpCode;
   6 | import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
   7 | 
   8 | import javax.servlet.http.HttpServletResponse;
   9 | import javax.servlet.http.HttpServletRequest;
  10 | 
  11 | public class RefreshTokenInterceptor extends HandlerInterceptorAdapter {
  12 | 
  13 | 
  14 | 
  15 |     @Override
  16 |     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception
  17 |     {
  18 |         //先从请求头(K-V)里拿 token
  19 |         String token = request.getHeader("token");
  20 | 
  21 | 
  22 | 
  23 |         //返回 true 放行
  24 |         return true;
  25 |     }
  26 | 
  27 |     @Override
  28 |     public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception
  29 |     {
  30 | 
  31 |     }
  32 | 
  33 | }

